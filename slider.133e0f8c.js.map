{"version":3,"sources":["slider/Model.ts","slider/functions/createElement.ts","slider/view/drivers/driverHorizontal.ts","slider/view/drivers/driverVertical.ts","slider/view/Scale.ts","slider/view/Thumbs.ts","slider/view/Tooltips.ts","slider/view/View.ts","slider/EventEmitter.ts","slider/Controller.ts","slider/slider.ts"],"names":[],"mappings":"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","file":"slider.133e0f8c.js","sourceRoot":"../src","sourcesContent":["import { IModelState } from './interfaces/iModelState';\nimport EventEmitter from './EventEmitter';\n\nclass Model {\n  public state: IModelState;\n\n  private emitter: EventEmitter;\n\n  constructor(eventEmitter: EventEmitter) {\n    this.state = {\n      min: 0,\n      max: 100,\n      thumbsValues: [20, 32, 44, 60],\n      orientation: 'horizontal',\n      thumbsCount: 4,\n      step: 2,\n      isTooltip: true,\n    };\n\n    this.emitter = eventEmitter;\n    this.notifyStateChanged();\n  }\n\n  // set new min value\n  public setNewValueMin(min: number): void {\n    if (this.state.min === min) {\n      return;\n    }\n    this.state.min = min;\n    this.normolizeState();\n  }\n\n  // set new value max\n  public setNewValueMax(max: number): void {\n    if (this.state.max === max) {\n      return;\n    }\n    this.state.max = max;\n    this.normolizeState();\n  }\n\n  // set a new number of thumbs\n  public setNewValueCount(thumbsCount: number): void {\n    if (this.state.thumbsCount === thumbsCount) {\n      return;\n    }\n    // установить значения для новых ползунков\n    if (this.state.thumbsCount !== thumbsCount) {\n      if (this.state.thumbsCount < thumbsCount) {\n        const missingQuantityThumbs = thumbsCount - this.state.thumbsCount;\n\n        new Array(missingQuantityThumbs).fill(1).forEach(() => {\n          this.state.thumbsValues[this.state.thumbsValues.length] =\n            this.state.thumbsValues[this.state.thumbsValues.length - 1] +\n            this.state.step;\n        });\n\n        this.state.thumbsCount = thumbsCount;\n      }\n      if (this.state.thumbsCount > thumbsCount) {\n        const excessThumbs = this.state.thumbsCount - thumbsCount;\n        new Array(excessThumbs).fill(1).forEach(() => {\n          this.state.thumbsValues.splice(-1, 1);\n        });\n        this.state.thumbsCount = thumbsCount;\n      }\n    }\n    this.normolizeState();\n  }\n\n  // set a new value for the thumb state\n  public setNewValueThumbsValues(thumbValue: number, index: number): void {\n    if (this.state.thumbsValues[index] === thumbValue) {\n      return;\n    }\n    this.state.thumbsValues[index] = thumbValue;\n    this.normolizeState();\n  }\n\n  // set a new value for the step of moving the thumbs\n  public setNewValueStep(step: number): void {\n    if (this.state.step === step) {\n      return;\n    }\n    this.state.step = step;\n    this.normolizeState();\n  }\n\n  // set a new value for the tooltip field\n  public setNewValueTooltip(value: boolean): void {\n    if (value !== this.state.isTooltip) {\n      this.state.isTooltip = value;\n      this.notifyStateChanged();\n    }\n  }\n\n  // set new value for orientation field\n  public setNewValueOrientation(value: string): void {\n    if (value === 'horizontal') {\n      this.state.orientation = 'horizontal';\n    } else if (value === 'vertical') {\n      this.state.orientation = 'vertical';\n    }\n    this.notifyStateChanged();\n  }\n\n  public overwriteCurrentThumbsValues(thumbsValues: number[]): void {\n    this.state.thumbsValues = thumbsValues;\n    this.normolizeState();\n  }\n\n  private normolizeState(): void {\n    const minimumPossibleValue =\n      Math.floor(this.state.min / this.state.step) * this.state.step;\n    const maximumPossibleValue =\n      Math.floor(this.state.max / this.state.step) * this.state.step;\n    const maximumCountOfThumbs = Math.floor(\n      this.state.max / (this.state.step * 2),\n    );\n\n    if (this.state.thumbsCount <= 0) {\n      this.state.thumbsCount = 1;\n    }\n    if (maximumCountOfThumbs < this.state.thumbsCount) {\n      this.state.thumbsCount = maximumCountOfThumbs;\n\n      if (this.state.thumbsCount < this.state.thumbsValues.length) {\n        this.state.thumbsValues.splice(\n          this.state.thumbsCount,\n          this.state.thumbsValues.length - this.state.thumbsCount,\n        );\n        this.checkThumbsValues();\n      }\n    }\n    if (this.state.min > this.state.thumbsValues[0]) {\n      this.state.thumbsValues[0] = this.state.min;\n    }\n    if (this.state.min !== minimumPossibleValue) {\n      this.state.min = minimumPossibleValue;\n    }\n    if (\n      this.state.max <\n      this.state.thumbsValues[this.state.thumbsValues.length - 1]\n    ) {\n      this.state.thumbsValues[\n        this.state.thumbsValues.length - 1\n      ] = this.state.max;\n    }\n    if (this.state.max !== maximumPossibleValue) {\n      this.state.max = maximumPossibleValue;\n    }\n    if (this.state.step <= 0) {\n      this.state.step = 1;\n    }\n    this.checkThumbsValues();\n    this.notifyStateChanged();\n  }\n\n  // Calculate thumbs values based on step size\n  private checkThumbsValues(): void {\n    this.state.thumbsValues.forEach((element: number, i: number) => {\n      const newValue: number = element;\n      const remainderOfTheDivision: number = newValue % this.state.step;\n      const newCurrentValue: number = newValue - remainderOfTheDivision;\n      const maxPossibleValue: number =\n        this.state.max -\n        (this.state.max % this.state.step) -\n        (this.state.thumbsValues.length - 1 - i) * this.state.step;\n      const minPossibleValue: number =\n        this.state.min -\n        (this.state.min % this.state.step) +\n        i * this.state.step;\n\n      if (newCurrentValue > maxPossibleValue) {\n        this.state.thumbsValues[i] = maxPossibleValue;\n      }\n      if (newCurrentValue < minPossibleValue) {\n        this.state.thumbsValues[i] = minPossibleValue;\n      }\n      if (this.state.thumbsValues[i] !== newCurrentValue) {\n        this.state.thumbsValues[i] = newCurrentValue;\n      }\n\n      const isGreaterThanNextValue: boolean =\n        i !== this.state.thumbsValues[this.state.thumbsValues.length - 1] &&\n        element >= this.state.thumbsValues[i + 1];\n\n      if (isGreaterThanNextValue) {\n        this.state.thumbsValues[i + 1] =\n          this.state.thumbsValues[i] + this.state.step;\n        if (\n          this.state.thumbsValues[i + 1] >\n          maxPossibleValue + this.state.step\n        ) {\n          this.state.thumbsValues[i + 1] = maxPossibleValue + this.state.step;\n          this.state.thumbsValues[i] = maxPossibleValue;\n        }\n      }\n    });\n  }\n\n  private notifyStateChanged(): void {\n    this.emitter.emit('model:state-changed', this.state);\n  }\n}\nexport default Model;\n","/* функция CreateElement создает необходимый элемент с заданным классом */\nconst createElement = (teg: string, className: string): HTMLElement => {\n  const element: HTMLElement = document.createElement(teg);\n  element.className = className;\n  return element;\n};\nexport default createElement;\n","import { IDriver } from '../../interfaces/iDriver';\nimport createElement from '../../functions/createElement';\n\nconst driverHorizontal: IDriver = {\n  getElementOffset(element: HTMLElement): number {\n    return element.offsetLeft;\n  },\n  getOffsetNextThumb(element: HTMLElement, stepWidth: number): number {\n    return this.getElementOffset(element) - stepWidth;\n  },\n  getOffsetPreviousThumb(element: HTMLElement, stepWidth: number): number {\n    return this.getElementOffset(element) + stepWidth;\n  },\n  createElementTooltipText(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__tooltip-text js-slider__tooltip-text',\n    );\n    return element;\n  },\n  createElementScale(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'div',\n      'slider__scale js-slider__scale',\n    );\n    return element;\n  },\n  createElementActiveRange(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__active-range js-slider__active-range',\n    );\n    return element;\n  },\n  searchElementsTooltipText(slider: HTMLElement): HTMLElement[] {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-tooltip-text'),\n    );\n    return $elements;\n  },\n  calculateCoefficientPoint(\n    slider: HTMLElement,\n    max: number,\n    min: number,\n  ): number {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__scale'),\n    );\n    const scale = $elements[0];\n    return scale.offsetWidth / (max - min);\n  },\n  searchElementScaleToDelete(slider: HTMLElement): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find(\n      '.js-slider__vertical-scale',\n    );\n    return $element;\n  },\n  searchElementActiveRangeToDelete(slider: HTMLElement): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find(\n      '.js-slider__vertical-active-range',\n    );\n    return $element;\n  },\n  setInPlaceThumb({\n    elements,\n    currentThumbIndex,\n    coefficientPoint,\n    thumbsValues,\n    shiftToMinValue,\n    slider,\n  }: {\n    elements: HTMLElement[];\n    currentThumbIndex: number | null;\n    coefficientPoint: number;\n    thumbsValues: number[];\n    shiftToMinValue: number;\n    slider: HTMLElement;\n  }): void {\n    new Array(elements.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        if (i !== currentThumbIndex) {\n          const thumb = elements[i];\n          const indentLeft = String(\n            Math.ceil(coefficientPoint * thumbsValues[i]) - shiftToMinValue,\n          );\n          thumb.style.top = '';\n          thumb.style.left = `${indentLeft}px`;\n        }\n      });\n    this.updateActiveRange(slider);\n  },\n  getCurrentValueAxisToProcessStart(target: HTMLElement): number {\n    return target.offsetLeft;\n  },\n  getStartValueAxisToProcessStart(\n    eventThumb: MouseEvent,\n    currentXorY: number,\n  ): number {\n    return eventThumb.pageX - currentXorY;\n  },\n  getMaxValueAxisToProcessStart(slider: HTMLElement): number {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__scale'),\n    );\n    const scale = $elements[0];\n    return scale.offsetWidth;\n  },\n  getCurrentValueAxisToProcessMove(\n    eventThumb: MouseEvent,\n    startXorY: number,\n  ): number {\n    return eventThumb.pageX - startXorY;\n  },\n  setIndentForTarget(\n    target: HTMLElement,\n    currentXorY: number,\n    slider: HTMLElement,\n  ): void {\n    const element = target;\n    const indentLeft = String(currentXorY);\n    element.style.left = `${indentLeft}px`;\n\n    this.updateActiveRange(slider);\n  },\n  setIndentForTargetToProcessStop({\n    target,\n    coefficientPoint,\n    currentValue,\n    shiftToMinValue,\n    slider,\n  }: {\n    target: HTMLElement;\n    coefficientPoint: number;\n    currentValue: number;\n    shiftToMinValue: number;\n    slider: HTMLElement;\n  }): void {\n    const element = target;\n    const indentLeft = String(\n      Math.ceil(coefficientPoint * currentValue) - shiftToMinValue,\n    );\n    element.style.left = `${indentLeft}px`;\n\n    this.updateActiveRange(slider);\n  },\n  updateActiveRange(slider: HTMLElement): void {\n    const $activeRangeElement: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__active-range'),\n    );\n    const range = $activeRangeElement[0];\n    const $allThumbs: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__thumb'),\n    );\n\n    range.style.marginTop = '';\n    range.style.height = '';\n\n    if ($allThumbs.length === 1) {\n      const widthActiveRange = String(\n        driverHorizontal.getElementOffset($allThumbs[0]),\n      );\n      range.style.marginLeft = `0px`;\n      range.style.width = `${widthActiveRange}px`;\n    } else if ($allThumbs.length > 1) {\n      const marginLeft = String(\n        driverHorizontal.getElementOffset($allThumbs[0]),\n      );\n      const widthActiveRange = String(\n        driverHorizontal.getElementOffset($allThumbs[$allThumbs.length - 1]) -\n          driverHorizontal.getElementOffset($allThumbs[0]),\n      );\n      range.style.marginLeft = `${marginLeft}px`;\n      range.style.width = `${widthActiveRange}px`;\n    }\n  },\n  calculateClickLocation(\n    event: MouseEvent,\n    target: HTMLElement,\n    shiftToMinValue: number,\n  ): number {\n    return event.offsetX + target.offsetLeft + shiftToMinValue;\n  },\n  getOffsetFromClick(event: MouseEvent): number {\n    return event.offsetX;\n  },\n};\nexport default driverHorizontal;\n","import { IDriver } from '../../interfaces/iDriver';\nimport createElement from '../../functions/createElement';\n\nconst driverVertical: IDriver = {\n  getElementOffset(element: HTMLElement): number {\n    return element.offsetTop;\n  },\n  getOffsetNextThumb(element: HTMLElement, stepWidth: number): number {\n    return this.getElementOffset(element) - stepWidth;\n  },\n  getOffsetPreviousThumb(element: HTMLElement, stepWidth: number): number {\n    return this.getElementOffset(element) + stepWidth;\n  },\n  createElementTooltipText(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__vertical-tooltip-text js-slider__vertical-tooltip-text',\n    );\n    return element;\n  },\n  createElementScale(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'div',\n      'slider__vertical-scale js-slider__vertical-scale',\n    );\n    return element;\n  },\n  createElementActiveRange(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__vertical-active-range js-slider__vertical-active-range',\n    );\n    return element;\n  },\n  searchElementsTooltipText(slider: HTMLElement): HTMLElement[] {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__tooltip-text'),\n    );\n    return $elements;\n  },\n  searchElementScaleToDelete(slider: HTMLElement): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find('.js-slider__scale');\n    return $element;\n  },\n  searchElementActiveRangeToDelete(slider: HTMLElement): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find(\n      '.js-slider__active-range',\n    );\n    return $element;\n  },\n  calculateCoefficientPoint(\n    slider: HTMLElement,\n    max: number,\n    min: number,\n  ): number {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-scale'),\n    );\n    const scale = $elements[0];\n    return scale.offsetHeight / (max - min);\n  },\n  setInPlaceThumb({\n    elements,\n    currentThumbIndex,\n    coefficientPoint,\n    thumbsValues,\n    shiftToMinValue,\n    slider,\n  }: {\n    elements: HTMLElement[];\n    currentThumbIndex: number | null;\n    coefficientPoint: number;\n    thumbsValues: number[];\n    shiftToMinValue: number;\n    slider: HTMLElement;\n  }): void {\n    new Array(elements.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        if (i !== currentThumbIndex) {\n          const thumb = elements[i];\n          const indentTop = String(\n            Math.ceil(coefficientPoint * thumbsValues[i]) - shiftToMinValue,\n          );\n          thumb.style.left = '';\n          thumb.style.top = `${indentTop}px`;\n        }\n      });\n    this.updateActiveRange(slider);\n  },\n  getCurrentValueAxisToProcessStart(target: HTMLElement): number {\n    return target.offsetTop;\n  },\n  getStartValueAxisToProcessStart(\n    eventThumb: MouseEvent,\n    currentXorY: number,\n  ): number {\n    return eventThumb.pageY - currentXorY;\n  },\n  getMaxValueAxisToProcessStart(slider: HTMLElement): number {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-scale'),\n    );\n    const scale = $elements[0];\n    return scale.offsetHeight;\n  },\n  getCurrentValueAxisToProcessMove(\n    eventThumb: MouseEvent,\n    startXorY: number,\n  ): number {\n    return eventThumb.pageY - startXorY;\n  },\n  setIndentForTarget(\n    target: HTMLElement,\n    currentXorY: number,\n    slider: HTMLElement,\n  ): void {\n    const element = target;\n    const indentTop = String(currentXorY);\n    element.style.top = `${indentTop}px`;\n\n    this.updateActiveRange(slider);\n  },\n  setIndentForTargetToProcessStop({\n    target,\n    coefficientPoint,\n    currentValue,\n    shiftToMinValue,\n    slider,\n  }: {\n    target: HTMLElement;\n    coefficientPoint: number;\n    currentValue: number;\n    shiftToMinValue: number;\n    slider: HTMLElement;\n  }): void {\n    const element = target;\n    const indentTop = String(\n      Math.ceil(coefficientPoint * currentValue) - shiftToMinValue,\n    );\n    element.style.top = `${indentTop}px`;\n\n    this.updateActiveRange(slider);\n  },\n  updateActiveRange(slider: HTMLElement): void {\n    const $activeRangeElement: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-active-range'),\n    );\n    const range = $activeRangeElement[0];\n    const $allThumbs: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__thumb'),\n    );\n\n    range.style.marginLeft = '';\n    range.style.width = '';\n\n    if ($allThumbs.length === 1) {\n      const heightActiveRange = String(\n        driverVertical.getElementOffset($allThumbs[0]),\n      );\n      range.style.marginTop = `0px`;\n      range.style.height = `${heightActiveRange}px`;\n    } else if ($allThumbs.length > 1) {\n      const marginTop = String(driverVertical.getElementOffset($allThumbs[0]));\n      const heightActiveRange = String(\n        driverVertical.getElementOffset($allThumbs[$allThumbs.length - 1]) -\n          driverVertical.getElementOffset($allThumbs[0]),\n      );\n      range.style.marginTop = `${marginTop}px`;\n      range.style.height = `${heightActiveRange}px`;\n    }\n  },\n  calculateClickLocation(event: MouseEvent, target: HTMLElement): number {\n    return event.offsetY + target.offsetTop;\n  },\n  getOffsetFromClick(event: MouseEvent): number {\n    return event.offsetY;\n  },\n};\nexport default driverVertical;\n","import EventEmitter from '../EventEmitter';\nimport { IModelState } from '../interfaces/iModelState';\nimport { IDriver } from '../interfaces/iDriver';\nimport driverHorizontal from './drivers/driverHorizontal';\nimport driverVertical from './drivers/driverVertical';\n\nclass Scale {\n  private slider: HTMLElement;\n\n  private emitter: EventEmitter;\n\n  private scale!: HTMLElement;\n\n  private orientation: string | null;\n\n  private driver: IDriver | null;\n\n  private thumbsValues: number[];\n\n  constructor(element: HTMLElement, emitter: EventEmitter) {\n    this.slider = element;\n    this.emitter = emitter;\n    this.orientation = null;\n    this.driver = null;\n    this.thumbsValues = [];\n  }\n\n  public initializeScale(state: IModelState): void {\n    if (this.orientation !== state.orientation) {\n      this.orientation = state.orientation;\n    }\n    if (state.orientation === 'horizontal') {\n      this.driver = driverHorizontal;\n    }\n    if (state.orientation === 'vertical') {\n      this.driver = driverVertical;\n    }\n    if (this.thumbsValues !== state.thumbsValues) {\n      this.thumbsValues = state.thumbsValues;\n    }\n\n    this.createScale();\n    this.listenScaleEvents();\n  }\n\n  public setConfig(state: IModelState): void {\n    if (this.orientation !== state.orientation) {\n      if (state.orientation === 'horizontal') {\n        this.driver = driverHorizontal;\n      }\n      if (state.orientation === 'vertical') {\n        this.driver = driverVertical;\n      }\n      this.orientation = state.orientation;\n      this.changeOrientation();\n    }\n    this.driver?.updateActiveRange(this.slider);\n    this.thumbsValues = state.thumbsValues;\n  }\n\n  /* function createScale adds scale elements to the main html slider structure */\n  private createScale(): void {\n    if (this.driver !== null) {\n      const scale: HTMLElement = this.driver.createElementScale();\n      const activeRange: HTMLElement = this.driver.createElementActiveRange();\n\n      this.slider.append(scale);\n      scale.append(activeRange);\n\n      this.scale = scale;\n    }\n  }\n\n  private changeOrientation(): void {\n    if (this.driver !== null) {\n      const activeRangeToRemove: JQuery<HTMLElement> = this.driver.searchElementActiveRangeToDelete(\n        this.slider,\n      );\n      activeRangeToRemove.remove();\n      const scaleToDelete: JQuery<HTMLElement> = this.driver.searchElementScaleToDelete(\n        this.slider,\n      );\n      scaleToDelete.remove();\n\n      this.createScale();\n      this.listenScaleEvents();\n    }\n  }\n\n  private listenScaleEvents(): void {\n    this.scale.addEventListener('click', this.handleScaleClick.bind(this));\n  }\n\n  private handleScaleClick(event: MouseEvent): void {\n    this.emitter.emit('view:click-on-scale', event);\n  }\n}\nexport default Scale;\n","import EventEmitter from '../EventEmitter';\nimport createElement from '../functions/createElement';\nimport { IModelState } from '../interfaces/iModelState';\nimport { IThumbsState } from '../interfaces/IThumbsState';\nimport { IDriver } from '../interfaces/iDriver';\nimport driverHorizontal from './drivers/driverHorizontal';\nimport driverVertical from './drivers/driverVertical';\n// import { event } from 'jquery';\n\nclass Thumbs {\n  private slider: HTMLElement;\n\n  private emitter: EventEmitter;\n\n  private state: IThumbsState;\n\n  private driver: IDriver | null;\n\n  constructor(element: HTMLElement, eventEmitter: EventEmitter) {\n    this.slider = element;\n    this.emitter = eventEmitter;\n    this.driver = null;\n\n    this.state = {\n      thumbs: [],\n      coefficientPoint: 0,\n      shiftToMinValue: 0,\n      currentThumbIndex: null,\n      currentValue: 0,\n      currentValueAxis: 0,\n      thumbValueAxis: null,\n      startValueAxis: 0,\n      stopValueAxis: 0,\n      valueAxisFromStartMove: 0,\n      minValueSlider: 0,\n      maxValueSlider: 100,\n      stepSlider: 0,\n      thumbsCount: 1,\n      thumbsValues: [],\n      orientation: null,\n      target: null,\n    };\n\n    this.emitter.makeSubscribe(\n      'view:update-thumbs-position',\n      (event: MouseEvent) => {\n        this.setThumbToNewPosition(event);\n      },\n    );\n  }\n\n  public initializeThumbs(state: IModelState): void {\n    if (this.state.minValueSlider !== state.min) {\n      this.state.minValueSlider = state.min;\n    }\n    if (this.state.maxValueSlider !== state.max) {\n      this.state.maxValueSlider = state.max;\n    }\n    if (this.state.stepSlider !== state.step) {\n      this.state.stepSlider = state.step;\n    }\n    if (this.state.thumbsCount !== state.thumbsCount) {\n      this.state.thumbsCount = state.thumbsCount;\n    }\n    if (this.state.thumbsValues !== state.thumbsValues) {\n      this.state.thumbsValues = state.thumbsValues;\n    }\n    if (this.state.orientation !== state.orientation) {\n      this.state.orientation = state.orientation;\n    }\n    if (state.orientation === 'horizontal') {\n      this.driver = driverHorizontal;\n    }\n    if (state.orientation === 'vertical') {\n      this.driver = driverVertical;\n    }\n\n    this.createThumbs(this.state.thumbsCount);\n    this.setValuesThumbs();\n    this.listenThumbsEvents();\n    this.listenSizeWindow();\n  }\n\n  public setConfig(state: IModelState): void {\n    if (this.state.minValueSlider !== state.min) {\n      this.state.minValueSlider = state.min;\n    }\n    if (this.state.maxValueSlider !== state.max) {\n      this.state.maxValueSlider = state.max;\n    }\n    if (this.state.stepSlider !== state.step) {\n      this.state.stepSlider = state.step;\n    }\n    if (this.state.thumbsCount !== state.thumbsCount) {\n      this.state.thumbsCount = state.thumbsCount;\n      this.changeCountThumbs();\n    }\n    if (this.state.orientation !== state.orientation) {\n      if (state.orientation === 'horizontal') {\n        this.driver = driverHorizontal;\n      }\n      if (state.orientation === 'vertical') {\n        this.driver = driverVertical;\n      }\n      this.state.orientation = state.orientation;\n      this.updateThumbsPosition();\n    }\n    this.updateThumbsPosition();\n  }\n\n  /* the CreateSlider function adds sliders to the parent of the slider */\n  private createThumbs(thumbsCount: number): void {\n    const htmlFragment = document.createDocumentFragment();\n    new Array(thumbsCount).fill(1).forEach(() => {\n      const thumb: HTMLElement = createElement(\n        'div',\n        'slider__thumb js-slider__thumb',\n      );\n\n      htmlFragment.append(thumb);\n      this.state.thumbs.push(thumb);\n    });\n    this.slider.append(htmlFragment);\n  }\n\n  /* changes the number of sliders drawn on the scale */\n  private changeCountThumbs(): void {\n    if (this.state.thumbs.length < this.state.thumbsCount) {\n      const thumbsCount: number =\n        this.state.thumbsCount - this.state.thumbs.length;\n\n      this.createThumbs(thumbsCount);\n      this.listenNewThumbsEvents(thumbsCount);\n    }\n    if (this.state.thumbs.length > this.state.thumbsCount) {\n      const excessCount: number =\n        this.state.thumbs.length - this.state.thumbsCount;\n      const $allThumbs: HTMLElement[] = Array.from(\n        $(this.slider).find('.js-slider__thumb'),\n      );\n\n      new Array(excessCount).fill(1).forEach((_element: number, i: number) => {\n        this.state.thumbsValues.splice(-1, 1);\n        this.state.thumbs.splice(-1, 1);\n        const newLength = $allThumbs.length - i;\n        $allThumbs[newLength - 1].remove();\n      });\n    }\n  }\n\n  private handleThumbMove(event: MouseEvent): void {\n    this.processMove.call(this, event);\n  }\n\n  private handleThumbStop(): void {\n    this.processStop.call(this);\n  }\n\n  /* hangs the 'mousedown' event handler for each created thumb */\n  private listenThumbsEvents(): void {\n    this.state.thumbs.forEach((element: HTMLElement, i: number) => {\n      element.addEventListener(\n        'mousedown',\n        this.handleThumbStart.bind(this, i),\n      );\n    });\n  }\n\n  private handleThumbStart(index: number, event: MouseEvent): void {\n    this.processStart(event, index);\n  }\n\n  /* hangs the 'mousedown' event handler for each added thumb */\n  private listenNewThumbsEvents(thumbsCount: number): void {\n    new Array(thumbsCount).fill(1).forEach((_element: number, i: number) => {\n      const index = this.state.thumbs.length - (thumbsCount - i);\n      this.state.thumbs[\n        this.state.thumbs.length - (thumbsCount - i)\n      ].addEventListener('mousedown', this.handleThumbStart.bind(this, index));\n    });\n  }\n\n  /* listens to the 'resize' event on the slider page */\n  private listenSizeWindow(): void {\n    window.addEventListener('resize', this.handleWindowResize.bind(this));\n  }\n\n  private handleWindowResize(): void {\n    this.updateThumbsPosition.call(this);\n  }\n\n  /* places thumbs on the slider based on default values */\n  private setValuesThumbs(): void {\n    if (this.driver !== null) {\n      this.calculateCoefficientPoint();\n      this.calculateShiftToMinValue();\n      this.driver.setInPlaceThumb({\n        elements: this.state.thumbs,\n        currentThumbIndex: this.state.currentThumbIndex,\n        coefficientPoint: this.state.coefficientPoint,\n        thumbsValues: this.state.thumbsValues,\n        shiftToMinValue: this.state.shiftToMinValue,\n        slider: this.slider,\n      });\n    }\n  }\n\n  /* the method calculates the current value of the thumb */\n  private calculateValue(currentValueAxis: number): number {\n    this.calculateCoefficientPoint();\n    let currentValue: number =\n      Math.ceil(currentValueAxis / this.state.coefficientPoint) +\n      this.state.minValueSlider;\n\n    const intermediateValue: number = Math.floor(\n      currentValue / this.state.stepSlider,\n    );\n    currentValue = this.state.stepSlider * intermediateValue;\n\n    return currentValue;\n  }\n\n  private calculateValueAxis(value: number): number {\n    this.calculateShiftToMinValue();\n    this.calculateCoefficientPoint();\n\n    const intermediateValue: number = value / this.state.stepSlider;\n    const currentValue: number = intermediateValue * this.state.stepSlider;\n    const currentValueAxis: number =\n      Math.ceil(currentValue * this.state.coefficientPoint) -\n      this.state.shiftToMinValue;\n\n    return currentValueAxis;\n  }\n\n  /* the method calculates the value of the position of the thumb on the scale */\n  private calculateValueOfPlaceOnScale(i: number): void {\n    this.state.currentValue = this.calculateValue(this.state.currentValueAxis);\n\n    if (this.state.thumbsValues[i] !== this.state.currentValue) {\n      this.emitter.emit('view:thumbsValues-changed', {\n        value: this.state.currentValue,\n        index: i,\n      });\n    }\n  }\n\n  /* calculates the potential value of the thumb at the point of click on the scale */\n  private calculateValueOfPlaceClickOnScale(currentValueAxis: number): number {\n    const currentValue: number | null = this.calculateValue(currentValueAxis);\n    if (this.state.currentValue !== null) {\n      this.calculateShiftToMinValue();\n      const halfStep =\n        Math.floor(\n          (this.state.currentValue + this.state.stepSlider / 2) *\n            this.state.coefficientPoint,\n        ) - this.state.shiftToMinValue;\n\n      if (this.state.currentValueAxis > halfStep) {\n        this.state.currentValue += this.state.stepSlider;\n      }\n    }\n    return currentValue;\n  }\n\n  private calculateShiftToMinValue(): void {\n    this.calculateCoefficientPoint();\n    this.state.shiftToMinValue = Math.ceil(\n      this.state.coefficientPoint * this.state.minValueSlider,\n    );\n  }\n\n  private calculateCoefficientPoint(): void {\n    if (this.driver !== null) {\n      this.state.coefficientPoint = this.driver.calculateCoefficientPoint(\n        this.slider,\n        this.state.maxValueSlider,\n        this.state.minValueSlider,\n      );\n    }\n  }\n\n  private updateThumbsPosition(): void {\n    this.calculateCoefficientPoint();\n    this.calculateShiftToMinValue();\n\n    if (this.driver !== null) {\n      this.driver.setInPlaceThumb({\n        elements: this.state.thumbs,\n        currentThumbIndex: this.state.currentThumbIndex,\n        coefficientPoint: this.state.coefficientPoint,\n        thumbsValues: this.state.thumbsValues,\n        shiftToMinValue: this.state.shiftToMinValue,\n        slider: this.slider,\n      });\n    }\n  }\n\n  private updateThumbPositionOnScale(index: number): void {\n    this.calculateValueOfPlaceOnScale(index);\n  }\n\n  /* method for setting the closest slider to the clicked position on the slider scale */\n  private setThumbToNewPosition(event: MouseEvent): void {\n    event.preventDefault();\n    if (this.driver !== null) {\n      this.calculateShiftToMinValue();\n      const target: HTMLDivElement = event.target as HTMLDivElement;\n      const clickLocationAxis: number = this.driver.calculateClickLocation(\n        event,\n        target,\n        this.state.shiftToMinValue,\n      );\n\n      const currentValue:\n        | number\n        | null\n        | undefined = this.calculateValueOfPlaceClickOnScale(clickLocationAxis);\n\n      let nearestThumbIndex: number | null = null;\n\n      this.state.thumbsValues.forEach((thumbValue: number, i: number) => {\n        const isCurrentValue: boolean =\n          currentValue !== null && currentValue !== undefined;\n        const isFirstThumb: boolean = i === 0 && thumbValue >= currentValue;\n        const isLastThumb: boolean =\n          i === this.state.thumbsValues.length - 1 &&\n          thumbValue <= currentValue;\n        const isIntermediateThumb: boolean =\n          currentValue >= thumbValue &&\n          currentValue <= this.state.thumbsValues[i + 1];\n\n        if (isCurrentValue) {\n          if (isFirstThumb) {\n            nearestThumbIndex = i;\n          } else if (isLastThumb) {\n            nearestThumbIndex = i;\n          } else if (isIntermediateThumb) {\n            const leftSpacing: number = currentValue - thumbValue;\n            const rightSpacing: number =\n              this.state.thumbsValues[i + 1] - currentValue;\n\n            if (leftSpacing > rightSpacing) {\n              nearestThumbIndex = i + 1;\n            } else {\n              nearestThumbIndex = i;\n            }\n          }\n        }\n      });\n      if (nearestThumbIndex != null) {\n        if (\n          this.state.thumbsValues[nearestThumbIndex] !== this.state.currentValue\n        ) {\n          this.emitter.emit('view:thumbsValues-changed', {\n            value: currentValue,\n            index: nearestThumbIndex,\n          });\n        }\n      }\n    }\n  }\n\n  private processStart(event: MouseEvent, index: number): void {\n    this.state.currentThumbIndex = index;\n\n    event.preventDefault();\n\n    const elements: HTMLElement[] = this.state.thumbs;\n    this.state.target = elements[index];\n\n    if (this.driver !== null) {\n      this.state.currentValueAxis = this.driver.getCurrentValueAxisToProcessStart(\n        this.state.target,\n      );\n      this.state.startValueAxis = this.state.minValueSlider;\n      this.state.valueAxisFromStartMove = this.driver.getStartValueAxisToProcessStart(\n        event,\n        this.state.currentValueAxis,\n      );\n      this.state.stopValueAxis = this.driver.getMaxValueAxisToProcessStart(\n        this.slider,\n      );\n      this.state.thumbValueAxis = this.calculateValueAxis(\n        this.state.thumbsValues[index],\n      );\n    }\n    this.state.currentValue = this.state.thumbsValues[index];\n\n    document.addEventListener('mousemove', this.handleThumbMove.bind(this));\n    document.addEventListener('mouseup', this.handleThumbStop.bind(this));\n  }\n\n  private processMove(event: MouseEvent): void {\n    const elements: HTMLElement[] = this.state.thumbs;\n    const index = this.state.currentThumbIndex;\n\n    if (index !== null) {\n      if (this.state.thumbValueAxis !== null) {\n        if (this.state.target !== null) {\n          const isFirstThumb: boolean = index === 0;\n          const isIntermediateThumb: boolean =\n            index > 0 && index < elements.length - 1;\n          const isLastThumb: boolean =\n            index === elements.length - 1 && index !== 0;\n          const isOneThumb: boolean = elements.length === 1;\n          const isMultipleThumbs: boolean = elements.length !== 1;\n\n          if (this.driver !== null) {\n            this.calculateCoefficientPoint();\n            const stepWidth: number = Math.ceil(\n              this.state.stepSlider * this.state.coefficientPoint,\n            );\n            this.state.currentValueAxis = this.driver.getCurrentValueAxisToProcessMove(\n              event,\n              this.state.valueAxisFromStartMove,\n            );\n\n            const nextStepValueAxis: number = this.calculateValueAxis(\n              this.state.thumbsValues[index] + this.state.stepSlider,\n            );\n\n            const previousStepValueAxis: number = this.calculateValueAxis(\n              this.state.thumbsValues[index] - this.state.stepSlider,\n            );\n\n            if (isFirstThumb) {\n              if (isOneThumb) {\n                if (this.state.currentValueAxis > this.state.stopValueAxis) {\n                  this.setIndentForTarget(this.state.stopValueAxis, index);\n                } else if (\n                  this.state.currentValueAxis < this.state.startValueAxis\n                ) {\n                  this.setIndentForTarget(this.state.startValueAxis, index);\n                } else if (this.state.stepSlider === 1) {\n                  this.setIndentForTarget(this.state.currentValueAxis, index);\n                } else {\n                  this.checkPreviousOrNextValueThumb(\n                    previousStepValueAxis,\n                    nextStepValueAxis,\n                    index,\n                  );\n                }\n              }\n              if (isMultipleThumbs) {\n                const offsetNextThumb: number = this.driver.getOffsetNextThumb(\n                  elements[index + 1],\n                  stepWidth,\n                );\n                if (this.state.currentValueAxis > offsetNextThumb) {\n                  this.setIndentForTarget(offsetNextThumb, index);\n                } else if (\n                  this.state.currentValueAxis < this.state.startValueAxis\n                ) {\n                  this.setIndentForTarget(this.state.startValueAxis, index);\n                } else if (this.state.stepSlider === 1) {\n                  this.setIndentForTarget(this.state.currentValueAxis, index);\n                } else {\n                  this.checkPreviousOrNextValueThumb(\n                    previousStepValueAxis,\n                    nextStepValueAxis,\n                    index,\n                  );\n                }\n              }\n            }\n            if (isIntermediateThumb) {\n              const offsetNextThumb: number = this.driver.getOffsetNextThumb(\n                elements[index + 1],\n                stepWidth,\n              );\n              const offsetPreviousThumb: number = this.driver.getOffsetPreviousThumb(\n                elements[index - 1],\n                stepWidth,\n              );\n\n              if (this.state.currentValueAxis > offsetNextThumb) {\n                this.setIndentForTarget(offsetNextThumb, index);\n              } else if (this.state.currentValueAxis < offsetPreviousThumb) {\n                this.setIndentForTarget(offsetPreviousThumb, index);\n              } else if (this.state.stepSlider === 1) {\n                this.setIndentForTarget(this.state.currentValueAxis, index);\n              } else {\n                this.checkPreviousOrNextValueThumb(\n                  previousStepValueAxis,\n                  nextStepValueAxis,\n                  index,\n                );\n              }\n            }\n            if (isLastThumb) {\n              const offsetPreviousThumb: number = this.driver.getOffsetPreviousThumb(\n                elements[index - 1],\n                stepWidth,\n              );\n\n              if (this.state.currentValueAxis < offsetPreviousThumb) {\n                this.setIndentForTarget(offsetPreviousThumb, index);\n              } else if (\n                this.state.currentValueAxis > this.state.stopValueAxis\n              ) {\n                this.setIndentForTarget(this.state.stopValueAxis, index);\n              } else if (this.state.stepSlider === 1) {\n                this.setIndentForTarget(this.state.currentValueAxis, index);\n              } else {\n                this.checkPreviousOrNextValueThumb(\n                  previousStepValueAxis,\n                  nextStepValueAxis,\n                  index,\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private setIndentForTarget(valueAxis: number, index: number): void {\n    if (this.driver !== null) {\n      if (this.state.target !== null) {\n        this.driver.setIndentForTarget(\n          this.state.target,\n          valueAxis,\n          this.slider,\n        );\n      }\n    }\n    this.state.currentValueAxis = valueAxis;\n    this.state.thumbValueAxis = valueAxis;\n    this.updateThumbPositionOnScale(index);\n  }\n\n  private checkPreviousOrNextValueThumb(\n    previousValueAxis: number,\n    nextValueAxis: number,\n    index: number,\n  ): void {\n    if (this.driver !== null) {\n      if (this.state.target !== null) {\n        if (this.state.currentValueAxis > nextValueAxis) {\n          this.driver.setIndentForTarget(\n            this.state.target,\n            nextValueAxis,\n            this.slider,\n          );\n          this.state.thumbValueAxis = nextValueAxis;\n          this.state.currentValueAxis = nextValueAxis;\n          this.updateThumbPositionOnScale(index);\n        }\n        if (this.state.currentValueAxis < previousValueAxis) {\n          this.driver.setIndentForTarget(\n            this.state.target,\n            previousValueAxis,\n            this.slider,\n          );\n          this.state.currentValueAxis = previousValueAxis;\n          this.state.thumbValueAxis = previousValueAxis;\n          this.updateThumbPositionOnScale(index);\n        }\n      }\n    }\n  }\n\n  private processStop(): void {\n    if (this.driver !== null) {\n      if (this.state.target !== null) {\n        if (this.state.currentValue !== null) {\n          this.calculateCoefficientPoint();\n          this.calculateShiftToMinValue();\n          this.driver.setIndentForTargetToProcessStop({\n            target: this.state.target,\n            coefficientPoint: this.state.coefficientPoint,\n            currentValue: this.state.currentValue,\n            shiftToMinValue: this.state.shiftToMinValue,\n            slider: this.slider,\n          });\n        }\n      }\n    }\n\n    document.removeEventListener('mousemove', this.handleThumbMove.bind(this));\n    document.removeEventListener('mouseup', this.handleThumbStop.bind(this));\n\n    this.state.currentValue = null;\n    this.state.currentThumbIndex = null;\n  }\n}\nexport default Thumbs;\n","import createElement from '../functions/createElement';\nimport { IModelState } from '../interfaces/iModelState';\nimport { IDriver } from '../interfaces/iDriver';\nimport driverHorizontal from './drivers/driverHorizontal';\nimport driverVertical from './drivers/driverVertical';\n\nclass Tooltips {\n  private slider: HTMLElement;\n\n  private tooltipsElements: HTMLElement[];\n\n  private textInTooltips!: HTMLElement[];\n\n  private tooltipsValues: number[];\n\n  private thumbsCount: number;\n\n  private orientation: string | null;\n\n  private driver: IDriver | null;\n\n  private isTooltip: boolean | null;\n\n  constructor(element: HTMLElement) {\n    this.slider = element;\n    this.tooltipsElements = [];\n    this.textInTooltips = [];\n    this.tooltipsValues = [];\n    this.thumbsCount = 0;\n    this.orientation = null;\n    this.driver = null;\n    this.isTooltip = null;\n  }\n\n  public initializeTooltips(state: IModelState): void {\n    if (this.thumbsCount !== state.thumbsCount) {\n      this.thumbsCount = state.thumbsCount;\n    }\n    if (this.tooltipsValues !== state.thumbsValues) {\n      this.tooltipsValues = state.thumbsValues;\n    }\n    if (this.orientation !== state.orientation) {\n      this.orientation = state.orientation;\n    }\n    if (state.orientation === 'horizontal') {\n      this.driver = driverHorizontal;\n    } else if (state.orientation === 'vertical') {\n      this.driver = driverVertical;\n    }\n    if (state.isTooltip) {\n      this.isTooltip = true;\n      this.showTooltip();\n    } else if (!state.isTooltip) {\n      this.isTooltip = false;\n      this.hideTooltip();\n    }\n\n    this.createTooltips(this.thumbsCount);\n    this.setTooltipsValues();\n  }\n\n  public setConfig(state: IModelState): void {\n    if (this.tooltipsValues !== state.thumbsValues) {\n      this.tooltipsValues = state.thumbsValues;\n    }\n    if (this.thumbsCount !== state.thumbsCount) {\n      this.thumbsCount = state.thumbsCount;\n      this.changeCountTooltips();\n    }\n    if (this.isTooltip !== state.isTooltip) {\n      if (state.isTooltip) {\n        this.isTooltip = true;\n        this.showTooltip();\n      } else if (!state.isTooltip) {\n        this.isTooltip = false;\n        this.hideTooltip();\n      }\n    }\n    if (this.orientation !== state.orientation) {\n      if (state.orientation === 'horizontal') {\n        this.driver = driverHorizontal;\n      }\n      if (state.orientation === 'vertical') {\n        this.driver = driverVertical;\n      }\n      this.orientation = state.orientation;\n      this.changeOrientation();\n      this.setTooltipsValues();\n    }\n    this.setTooltipsValues();\n  }\n\n  /* createTooltips function adds tooltip elements to the main html slider structure */\n  private createTooltips(thumbsCount: number): void {\n    new Array(thumbsCount).fill(1).forEach((_element: number, i: number) => {\n      if (this.driver !== null) {\n        const tooltip: HTMLElement = createElement(\n          'div',\n          'slider__tooltip js-slider__tooltip',\n        );\n        const textInTooltips: HTMLElement = this.driver.createElementTooltipText();\n\n        tooltip.append(textInTooltips);\n        const thumbs = this.slider.querySelectorAll('.js-slider__thumb');\n        thumbs[thumbs.length - (thumbsCount - i)].append(tooltip);\n        this.tooltipsElements.push(tooltip);\n        this.textInTooltips.push(textInTooltips);\n      }\n    });\n  }\n\n  /* sets the default sliders for their respective tooltips */\n  private setTooltipsValues(): void {\n    this.tooltipsValues.forEach((element: number, i: number) => {\n      this.textInTooltips[i].innerHTML = String(element);\n    });\n  }\n\n  /* changes the number of rendered tooltips */\n  private changeCountTooltips(): void {\n    if (this.tooltipsElements.length < this.thumbsCount) {\n      const thumbsCount: number =\n        this.thumbsCount - this.tooltipsElements.length;\n      this.createTooltips(thumbsCount);\n    }\n    if (this.tooltipsElements.length > this.thumbsCount) {\n      const excessCount: number =\n        this.tooltipsElements.length - this.thumbsCount;\n\n      new Array(excessCount).fill(1).forEach(() => {\n        this.tooltipsElements.splice(-1, 1);\n        this.textInTooltips.splice(-1, 1);\n      });\n    }\n  }\n\n  /* redraws tooltips when orientation changes */\n  private changeOrientation(): void {\n    if (this.driver !== null) {\n      const $tooltips: HTMLElement[] = Array.from(\n        $(this.slider).find('.js-slider__tooltip'),\n      );\n      this.textInTooltips = [];\n      const textInTooltips: HTMLElement[] = this.driver.searchElementsTooltipText(\n        this.slider,\n      );\n      textInTooltips.forEach((element: HTMLElement) => {\n        element.remove();\n      });\n      $tooltips.forEach((element: HTMLElement) => {\n        if (this.driver !== null) {\n          const tooltipText: HTMLElement = this.driver.createElementTooltipText();\n          element.append(tooltipText);\n          this.textInTooltips.push(tooltipText);\n        }\n      });\n    }\n  }\n\n  /* hideTooltip method hides sliders tooltips */\n  private hideTooltip(): void {\n    const $allTooltips: HTMLElement[] = Array.from(\n      $(this.slider).find('.js-slider__tooltip'),\n    );\n    $allTooltips.forEach((element: HTMLElement): void => {\n      element.classList.add('slider__tooltip-hide');\n    });\n  }\n\n  /* showTooltip method shows sliders tooltips */\n  private showTooltip(): void {\n    const $allTooltips: HTMLElement[] = Array.from(\n      $(this.slider).find('.js-slider__tooltip'),\n    );\n    $allTooltips.forEach((element: HTMLElement): void => {\n      element.classList.remove('slider__tooltip-hide');\n    });\n  }\n}\nexport default Tooltips;\n","import EventEmitter from '../EventEmitter';\nimport { IModelState } from '../interfaces/iModelState';\nimport Scale from './Scale';\nimport Thumbs from './Thumbs';\nimport Tooltips from './Tooltips';\n\nclass View {\n  private slider: HTMLElement;\n\n  private isCreatedSlider: boolean;\n\n  private emitter: EventEmitter;\n\n  private scale!: Scale;\n\n  private thumbs!: Thumbs;\n\n  private tooltips!: Tooltips;\n\n  constructor(slider: HTMLElement, eventEmitter: EventEmitter) {\n    this.slider = slider;\n    this.isCreatedSlider = false;\n    this.emitter = eventEmitter;\n    this.scale = new Scale(this.slider, this.emitter);\n    this.thumbs = new Thumbs(this.slider, this.emitter);\n    this.tooltips = new Tooltips(this.slider);\n    this.emitter.makeSubscribe('model:state-changed', (state: IModelState) => {\n      this.initialize(state);\n      this.rerender(state);\n    });\n    this.emitter.makeSubscribe('view:click-on-scale', (event: MouseEvent) => {\n      this.emitter.emit('view:update-thumbs-position', event);\n    });\n  }\n\n  private initialize(state: IModelState): void {\n    if (!this.isCreatedSlider) {\n      this.scale.initializeScale.call(this.scale, state);\n      this.thumbs.initializeThumbs.call(this.thumbs, state);\n      this.tooltips.initializeTooltips.call(this.tooltips, state);\n\n      this.isCreatedSlider = true;\n    }\n  }\n\n  private rerender(state: IModelState): void {\n    this.scale.setConfig.call(this.scale, state);\n    this.thumbs.setConfig.call(this.thumbs, state);\n    this.tooltips.setConfig.call(this.tooltips, state);\n  }\n}\nexport default View;\n","import { IModelState } from './interfaces/iModelState';\n\ninterface IData {\n  value: number;\n  index: number;\n}\ntype CallbackFunctionVariadic = (...args: any[]) => void;\ninterface StringArray {\n  [index: string]: CallbackFunctionVariadic[];\n}\nclass EventEmitter {\n  public handlersByEvent: StringArray;\n\n  constructor() {\n    this.handlersByEvent = {};\n  }\n\n  public makeSubscribe(\n    eventName: string,\n    fn: CallbackFunctionVariadic,\n  ): () => void {\n    if (!this.handlersByEvent[eventName]) {\n      this.handlersByEvent[eventName] = [];\n    }\n\n    this.handlersByEvent[eventName].push(fn);\n    return (): void => {\n      this.handlersByEvent[eventName] = this.handlersByEvent[eventName].filter(\n        eventFn => fn !== eventFn,\n      );\n    };\n  }\n\n  public emit(\n    eventName: string,\n    data: IModelState | IData | number[] | MouseEvent,\n  ): void {\n    const handlers: CallbackFunctionVariadic[] = this.handlersByEvent[\n      eventName\n    ];\n    if (handlers) {\n      handlers.forEach(fn => {\n        fn.call(null, data);\n      });\n    }\n  }\n}\nexport default EventEmitter;\n","import { IHTMLElement } from './interfaces/iHTMLElement';\nimport { IModelState } from './interfaces/iModelState';\nimport Model from './Model';\nimport View from './view/View';\nimport EventEmitter from './EventEmitter';\n\ninterface IData {\n  value: number;\n  index: number;\n}\n\nclass Controller {\n  public slider: IHTMLElement;\n\n  constructor(element: IHTMLElement) {\n    this.slider = element;\n    this.slider.classList.add('slider');\n\n    const eventEmitter = new EventEmitter();\n    new View(this.slider, eventEmitter);\n    const model: Model = new Model(eventEmitter);\n\n    this.attachPublicMethods(model, eventEmitter);\n\n    eventEmitter.makeSubscribe(\n      'view:countThumbs-changed',\n      (thumbsValues: number[]) => {\n        model.overwriteCurrentThumbsValues(thumbsValues);\n      },\n    );\n\n    eventEmitter.makeSubscribe('view:thumbsValues-changed', (data: IData) => {\n      model.setNewValueThumbsValues(data.value, data.index);\n    });\n  }\n\n  private attachPublicMethods(model: Model, eventEmitter: EventEmitter) {\n    this.slider.getState = (): IModelState => {\n      const modelState: IModelState = { ...model.state };\n      return modelState;\n    };\n    this.slider.setNewValueMin = (min: number): void => {\n      model.setNewValueMin(min);\n    };\n    this.slider.setNewValueMax = (max: number): void => {\n      model.setNewValueMax(max);\n    };\n    this.slider.setNewValueCount = (count: number): void => {\n      model.setNewValueCount(count);\n    };\n    this.slider.setNewValueThumbsValues = (\n      touchValue: number,\n      index: number,\n    ): void => {\n      model.setNewValueThumbsValues(touchValue, index);\n    };\n    this.slider.setNewValueStep = (step: number): void => {\n      model.setNewValueStep(step);\n    };\n    this.slider.setNewValueOrientation = (value: string): void => {\n      model.setNewValueOrientation(value);\n    };\n    this.slider.setNewValueTooltip = (value: boolean): void => {\n      model.setNewValueTooltip(value);\n    };\n    this.slider.subscribeToStateModel = (\n      handler: (state: IModelState) => void,\n      isCreatedInput: boolean,\n      countInputs: () => Element[],\n      changeCountInputs: (state: IModelState) => void,\n      setValueToInputFromModelState: (state: IModelState) => void,\n      setValueToStepFromModelState: (state: IModelState) => void,\n      setValueToMinInputFromModelState: (state: IModelState) => void,\n      setValueMaxInputFromModelState: (state: IModelState) => void,\n    ): void => {\n      eventEmitter.makeSubscribe(\n        'model:state-changed',\n        (state: IModelState): void => {\n          let isCreatedElement = isCreatedInput;\n          if (!isCreatedElement) {\n            handler(state);\n            isCreatedElement = true;\n          }\n          const arrayCountInputs = countInputs();\n          if (arrayCountInputs.length !== state.thumbsValues.length) {\n            changeCountInputs(state);\n          }\n          setValueToInputFromModelState(state);\n          setValueToStepFromModelState(state);\n          setValueToMinInputFromModelState(state);\n          setValueMaxInputFromModelState(state);\n        },\n      );\n    };\n  }\n}\nexport default Controller;\n","import Controller from './Controller';\nimport { IHTMLElement } from './interfaces/iHTMLElement';\n\n(function callSlider($) {\n  const $jquery = $;\n  $jquery.fn.slider = function renderSlider() {\n    const elements: IHTMLElement[] = Array.from(this) as IHTMLElement[];\n    elements.forEach((element: IHTMLElement) => {\n      new Controller(element);\n    });\n  };\n})(jQuery);\n"]}