[{"/Users/veronikazdorova/jQuery-slider/src/__tests__/configuratorHorizontal.test.ts":"1","/Users/veronikazdorova/jQuery-slider/src/__tests__/configuratorVertical.test.ts":"2","/Users/veronikazdorova/jQuery-slider/src/__tests__/eventEmitter.test.ts":"3","/Users/veronikazdorova/jQuery-slider/src/__tests__/functions/createElement.test.ts":"4","/Users/veronikazdorova/jQuery-slider/src/__tests__/model.test.ts":"5","/Users/veronikazdorova/jQuery-slider/src/__tests__/view/scale.test.ts":"6","/Users/veronikazdorova/jQuery-slider/src/__tests__/view/thumbs.integration.test.ts":"7","/Users/veronikazdorova/jQuery-slider/src/__tests__/view/thumbs.modular.test.ts":"8","/Users/veronikazdorova/jQuery-slider/src/__tests__/view/tooltips.test.ts":"9","/Users/veronikazdorova/jQuery-slider/src/pages/demo/demo.ts":"10","/Users/veronikazdorova/jQuery-slider/src/slider/controller.ts":"11","/Users/veronikazdorova/jQuery-slider/src/slider/eventEmitter.ts":"12","/Users/veronikazdorova/jQuery-slider/src/slider/functions/createElement.ts":"13","/Users/veronikazdorova/jQuery-slider/src/slider/interfaces/IThumbsState.ts":"14","/Users/veronikazdorova/jQuery-slider/src/slider/interfaces/iConfigurator.ts":"15","/Users/veronikazdorova/jQuery-slider/src/slider/interfaces/iHTMLElement.ts":"16","/Users/veronikazdorova/jQuery-slider/src/slider/interfaces/iModelState.ts":"17","/Users/veronikazdorova/jQuery-slider/src/slider/model.ts":"18","/Users/veronikazdorova/jQuery-slider/src/slider/slider.ts":"19","/Users/veronikazdorova/jQuery-slider/src/slider/view/configurators/configuratorHorizontal.ts":"20","/Users/veronikazdorova/jQuery-slider/src/slider/view/configurators/configuratorVertical.ts":"21","/Users/veronikazdorova/jQuery-slider/src/slider/view/scale.ts":"22","/Users/veronikazdorova/jQuery-slider/src/slider/view/thumbs.ts":"23","/Users/veronikazdorova/jQuery-slider/src/slider/view/tooltips.ts":"24","/Users/veronikazdorova/jQuery-slider/src/slider/view/view.ts":"25"},{"size":9029,"mtime":1595072918168,"results":"26","hashOfConfig":"27"},{"size":8881,"mtime":1595072985587,"results":"28","hashOfConfig":"27"},{"size":965,"mtime":1595070993757,"results":"29","hashOfConfig":"27"},{"size":246,"mtime":1594914304803,"results":"30","hashOfConfig":"27"},{"size":5047,"mtime":1595071006908,"results":"31","hashOfConfig":"27"},{"size":2444,"mtime":1595068231996,"results":"32","hashOfConfig":"27"},{"size":22288,"mtime":1595068952393,"results":"33","hashOfConfig":"27"},{"size":13041,"mtime":1595072832570,"results":"34","hashOfConfig":"27"},{"size":11253,"mtime":1595070868967,"results":"35","hashOfConfig":"27"},{"size":16128,"mtime":1595259434221,"results":"36","hashOfConfig":"27"},{"size":2988,"mtime":1595071085790,"results":"37","hashOfConfig":"27"},{"size":1049,"mtime":1595073141322,"results":"38","hashOfConfig":"27"},{"size":340,"mtime":1594639924778,"results":"39","hashOfConfig":"27"},{"size":267,"mtime":1594578939970,"results":"40","hashOfConfig":"27"},{"size":1664,"mtime":1594909138848,"results":"41","hashOfConfig":"27"},{"size":970,"mtime":1594909322545,"results":"42","hashOfConfig":"27"},{"size":181,"mtime":1594578934375,"results":"43","hashOfConfig":"27"},{"size":7071,"mtime":1594908928699,"results":"44","hashOfConfig":"27"},{"size":412,"mtime":1594981374479,"results":"45","hashOfConfig":"27"},{"size":5215,"mtime":1595259266555,"results":"46","hashOfConfig":"27"},{"size":5163,"mtime":1595256999924,"results":"47","hashOfConfig":"27"},{"size":1835,"mtime":1594629536846,"results":"48","hashOfConfig":"27"},{"size":16403,"mtime":1595257624529,"results":"49","hashOfConfig":"27"},{"size":4097,"mtime":1594906753082,"results":"50","hashOfConfig":"27"},{"size":4310,"mtime":1594909013161,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"v1tgg",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":1,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/veronikazdorova/jQuery-slider/src/__tests__/configuratorHorizontal.test.ts",[],"/Users/veronikazdorova/jQuery-slider/src/__tests__/configuratorVertical.test.ts",[],"/Users/veronikazdorova/jQuery-slider/src/__tests__/eventEmitter.test.ts",[],"/Users/veronikazdorova/jQuery-slider/src/__tests__/functions/createElement.test.ts",[],"/Users/veronikazdorova/jQuery-slider/src/__tests__/model.test.ts",[],"/Users/veronikazdorova/jQuery-slider/src/__tests__/view/scale.test.ts",[],"/Users/veronikazdorova/jQuery-slider/src/__tests__/view/thumbs.integration.test.ts",[],"/Users/veronikazdorova/jQuery-slider/src/__tests__/view/thumbs.modular.test.ts",["106","107"],"import configuratorHorizontal from '../../slider/view/configurators/configuratorHorizontal';\nimport EventEmitter from '../../slider/eventEmitter';\nimport { IModelState } from '../../slider/interfaces/iModelState';\nimport View from '../../slider/view/view';\nimport Thumbs from '../../slider/view/thumbs';\nimport sinonLib = require('sinon');\n\nconst state: IModelState = {\n  min: 0,\n  max: 100,\n  thumbsValues: [20, 30, 40, 50],\n  orientation: 'horizontal',\n  amount: 4,\n  step: 2,\n  isTooltip: true,\n};\ndescribe('Модульные тесты', () => {\n  const element = window.document.createElement('div');\n  element.className = 'js-slider-test';\n  window.document.body.appendChild(element);\n\n  const eventEmitter = new EventEmitter();\n  const emitter = eventEmitter;\n\n  const view = new View(element, eventEmitter);\n  const thumbs = new Thumbs(element, eventEmitter);\n\n  test('Проверка корректного создания элементов', () => {\n    emitter.emit('model:state-changed', state);\n\n    const thumbsElements = window.document.querySelectorAll('.js-slider__thumb');\n\n    expect(thumbsElements.length).toBe(state.amount);\n  });\n  test('Проверить наличие родителей у созданных элементов', () => {\n    const parentThumbsElements = window.document.querySelectorAll('.js-slider__thumb')[0].parentNode as HTMLElement;\n\n    expect(parentThumbsElements.className).toContain('js-slider-test');\n  });\n  test('Проверить изменение количества созданных элементов при изменении количества бегунков в большую сторону', () => {\n    state.amount = 5;\n    emitter.emit('model:state-changed', state);\n\n    const thumbsElements = window.document.querySelectorAll('.js-slider__thumb');\n\n    expect(thumbsElements.length).toBe(state.amount);\n\n    // Проверить значение добавленного ползунка\n    expect(state.thumbsValues.length).toBe(5);\n    expect(state.thumbsValues[4]).toBe(52);\n  });\n  test('Проверить удаление ползунков', () => {\n    state.amount = 3;\n    emitter.emit('model:state-changed', state);\n\n    const thumbsElements = window.document.querySelectorAll('.js-slider__thumb');\n\n    expect(thumbsElements.length).toBe(state.amount);\n    expect(state.thumbsValues.length).toBe(3);\n  });\n  test('Проверить корректность рассчета текущего значения ползунка', () => {\n    thumbs.state.coefficientPoint = 3.5;\n    const currentValue: number = thumbs.calculateValue(state, 345);\n    expect(currentValue).toBe(98);\n  });\n  test('Проверка рассчета значения места бегунка на шкале', () => {\n    thumbs.state.coefficientPoint = 3.2;\n    thumbs.state.currentValueAxis = 273;\n    thumbs.state.shiftToMinValue = 0;\n    thumbs.calculateValueOfPlaceOnScale(state, 3);\n    expect(thumbs.state.currentValue).toBe(86);\n  });\n  test('Проверка установки ближайшего ползунка на место клика по шкале слайдера', () => {\n    const sinon: sinonLib.SinonStatic = sinonLib;\n\n    const configurator = configuratorHorizontal;\n    const activeRange: HTMLElement = configurator.createElementActivRange();\n    const scale: HTMLElement = configurator.createElementScale();\n\n    const event = new MouseEvent('click', {\n      bubbles: true,\n      cancelable: true,\n      clientX: 100,\n      clientY: 100,\n    });\n\n    sinon.stub(configuratorHorizontal, 'calculateCoefficientPoint').callsFake(() => 2);\n    sinon.stub(configuratorHorizontal, 'getOffsetFromClick').callsFake(() => 100);\n    sinon.stub(configuratorHorizontal, 'calculateClickLocation').callsFake(() => 130);\n\n    scale.dispatchEvent(event);\n    let currentValues = thumbs.setThumbToNewPosition.apply(thumbs, [event, state, configurator]);\n    expect(currentValues[0]).toBe(30);\n    expect(currentValues[1]).toBe(1);\n\n    activeRange.dispatchEvent(event);\n    currentValues = thumbs.setThumbToNewPosition.apply(thumbs, [event, state, configurator]);\n    expect(currentValues[0]).toBe(40);\n    expect(currentValues[1]).toBe(2);\n\n    sinon.reset();\n  });\n  test('Тест вызова onStart', () => {\n    const sinon: sinonLib.SinonStatic = sinonLib;\n\n    thumbs.configurator = configuratorHorizontal;\n    const activeRange: HTMLElement = thumbs.configurator.createElementActivRange();\n    const scale: HTMLElement = thumbs.configurator.createElementScale();\n    const i = 0;\n    const setCurrentTooltipValue = () => 0;\n    const event = new MouseEvent('click', {\n      bubbles: true,\n      cancelable: true,\n      clientX: 100,\n      clientY: 100,\n    });\n\n    sinon.stub(configuratorHorizontal, 'getCurrentValueAxisToProcessStart').callsFake(() => 90);\n    sinon.stub(configuratorHorizontal, 'getStartValueAxisToProcessStart').callsFake(() => 50);\n    sinon.stub(configuratorHorizontal, 'getMaxValueAxisToProcessStart').callsFake(() => 300);\n\n    thumbs.processStart(state, event, i, scale, activeRange, setCurrentTooltipValue);\n    expect(thumbs.state.currentValue).toBe(state.thumbsValues[i]);\n\n    sinon.reset();\n  });\n  test('Проверка onMove для первого ползунка', () => {\n    const sinon: sinonLib.SinonStatic = sinonLib;\n\n    thumbs.configurator = configuratorHorizontal;\n    const activeRange: HTMLElement = thumbs.configurator.createElementActivRange();\n    const elements: HTMLElement[] = thumbs.state.thumbs;\n\n    const setCurrentTooltipValue = () => 0;\n    const event = new MouseEvent('click', {\n      bubbles: true,\n      cancelable: true,\n      clientX: 100,\n      clientY: 100,\n    });\n\n    const getCurrentValueAxisToOnMove = sinon.stub(configuratorHorizontal, 'getCurrentValueAxisToProcessMove');\n    getCurrentValueAxisToOnMove.onCall(0).returns(290);\n    getCurrentValueAxisToOnMove.onCall(1).returns(290);\n    getCurrentValueAxisToOnMove.onCall(2).returns(10);\n    const elementOffset = sinon.stub(configuratorHorizontal, 'getElementOffset').callsFake(() => 290);\n    const targetOffset = sinon.stub(configuratorHorizontal, 'getTargetWidth').callsFake(() => 24);\n    const setIndentForTarget = sinon.stub(configuratorHorizontal, 'setIndentForTarget').callsFake(() => 0);\n    const updateLineSpan = sinon.stub(configuratorHorizontal, 'updateActiveRange').callsFake(() => 0);\n\n    const i = 0;\n    const target: HTMLElement = elements[i];\n\n    // Если ползунок на шкале один\n    thumbs.state.maxValueAxis = 280;\n    thumbs.state.thumbs.length = 1;\n\n    thumbs.processMove(state, event, i, target, activeRange, setCurrentTooltipValue);\n    expect(thumbs.state.currentValueAxis).toBe(thumbs.state.maxValueAxis);\n    thumbs.state.maxValueAxis = 350;\n\n    // Проверка первого ползунка, если ползунков на шкале много\n    thumbs.state.thumbs.length = 4;\n\n    thumbs.processMove(state, event, i, target, activeRange, setCurrentTooltipValue);\n    expect(thumbs.state.currentValueAxis).toBe(266);\n\n    // Если значение первого ползунка становиться меньше минимально возможного значения\n    state.min = 20;\n\n    thumbs.processMove(state, event, i, target, activeRange, setCurrentTooltipValue);\n    expect(thumbs.state.currentValueAxis).toBe(state.min);\n\n    // сбросить заглушки\n    getCurrentValueAxisToOnMove.restore();\n    elementOffset.restore();\n    targetOffset.restore();\n    setIndentForTarget.restore();\n    updateLineSpan.restore();\n  });\n  test('Проверка onMove для любого ползунка кроме первого и последнего', () => {\n    const sinon: sinonLib.SinonStatic = sinonLib;\n\n    thumbs.configurator = configuratorHorizontal;\n    const activeRange: HTMLElement = thumbs.configurator.createElementActivRange();\n    const elements: HTMLElement[] = thumbs.state.thumbs;\n\n    const setCurrentTooltipValue = () => 0;\n    const event = new MouseEvent('click', {\n      bubbles: true,\n      cancelable: true,\n      clientX: 100,\n      clientY: 100,\n    });\n\n    const setCurrentXorYtoOnMove = sinon.stub(configuratorHorizontal, 'getCurrentValueAxisToProcessMove');\n    setCurrentXorYtoOnMove.onCall(0).returns(290);\n    setCurrentXorYtoOnMove.onCall(1).returns(250);\n\n    const elementOffset = sinon.stub(configuratorHorizontal, 'getElementOffset').callsFake(() => 290);\n    elementOffset.onCall(0).returns(290);\n    elementOffset.onCall(1).returns(250);\n    elementOffset.onCall(2).returns(350);\n    elementOffset.onCall(3).returns(250);\n\n    const targetOffset = sinon.stub(configuratorHorizontal, 'getTargetWidth').callsFake(() => 24);\n    const setIndentForTarget = sinon.stub(configuratorHorizontal, 'setIndentForTarget').callsFake(() => 0);\n    const updateLineSpan = sinon.stub(configuratorHorizontal, 'updateActiveRange').callsFake(() => 0);\n\n    const i = 1;\n    const target: HTMLElement = elements[i];\n\n    // Если значение любого кроме первого и последнего ползунка\n    // превышает значение следующего за ним ползунка\n    thumbs.processMove(state, event, i, target, activeRange, setCurrentTooltipValue);\n    expect(thumbs.state.currentValueAxis).toBe(266);\n\n    // Если значение любого кроме первого и последнего ползунка меньше значения предыдущего ползунка\n    thumbs.processMove(state, event, i, target, activeRange, setCurrentTooltipValue);\n    expect(thumbs.state.currentValueAxis).toBe(274);\n\n    // сбросить заглушки\n    setCurrentXorYtoOnMove.restore();\n    elementOffset.restore();\n    targetOffset.restore();\n    setIndentForTarget.restore();\n    updateLineSpan.restore();\n  });\n  test('Проверка onMove для последнего ползунка', () => {\n    const sinon: sinonLib.SinonStatic = sinonLib;\n\n    thumbs.configurator = configuratorHorizontal;\n    const activeRange: HTMLElement = thumbs.configurator.createElementActivRange();\n    const elements: HTMLElement[] = thumbs.state.thumbs;\n\n    const setCurrentTooltipValue = () => 0;\n    const event = new MouseEvent('click', {\n      bubbles: true,\n      cancelable: true,\n      clientX: 100,\n      clientY: 100,\n    });\n\n    const i = 3;\n    const target: HTMLElement = elements[i];\n\n    const setCurrentXorYtoOnMove = sinon.stub(configuratorHorizontal, 'getCurrentValueAxisToProcessMove');\n    setCurrentXorYtoOnMove.onCall(0).returns(290);\n    setCurrentXorYtoOnMove.onCall(1).returns(350);\n\n    const elementOffset = sinon.stub(configuratorHorizontal, 'getElementOffset').callsFake(() => 290);\n    const targetOffset = sinon.stub(configuratorHorizontal, 'getTargetWidth').callsFake(() => 24);\n    const setIndentForTarget = sinon.stub(configuratorHorizontal, 'setIndentForTarget').callsFake(() => 0);\n    const updateLineSpan = sinon.stub(configuratorHorizontal, 'updateActiveRange').callsFake(() => 0);\n\n    // Если значение ползунка меньше значения предыдущего ползунка\n    thumbs.processMove(state, event, i, target, activeRange, setCurrentTooltipValue);\n    expect(thumbs.state.currentValueAxis).toBe(314);\n\n    thumbs.state.maxValueAxis = 280;\n    // Если значение ползунка больше максимально допустимого значения предыдущего ползунка\n    thumbs.processMove(state, event, i, target, activeRange, setCurrentTooltipValue);\n    expect(thumbs.state.currentValueAxis).toBe(thumbs.state.maxValueAxis);\n\n    // сбросить заглушки\n    setCurrentXorYtoOnMove.restore();\n    elementOffset.restore();\n    targetOffset.restore();\n    setIndentForTarget.restore();\n    updateLineSpan.restore();\n  });\n  test('Проверка onStop', () => {\n    const sinon: sinonLib.SinonStatic = sinonLib;\n\n    thumbs.configurator = configuratorHorizontal;\n    const activeRange: HTMLElement = thumbs.configurator.createElementActivRange();\n    const elements: HTMLElement[] = thumbs.state.thumbs;\n\n    const setCurrentTooltipValue = () => 0;\n    const event = new MouseEvent('click', {\n      bubbles: true,\n      cancelable: true,\n      clientX: 100,\n      clientY: 100,\n    });\n    const i = 1;\n    const target: HTMLElement = elements[i];\n\n    sinon.stub(configuratorHorizontal, 'setIndentForTargetToProcessStop').callsFake(() => 0);\n\n    const handleMove = () => thumbs.processMove(state, event,\n      i, target, activeRange, setCurrentTooltipValue);\n    const handleStop = () => thumbs.processStop(handleMove, handleStop, event,\n      i, target, state, setCurrentTooltipValue);\n\n    thumbs.processStop(handleMove, handleStop, event, i, target, state, setCurrentTooltipValue);\n    expect(thumbs.state.currentValue).toBe(null);\n    expect(thumbs.state.currentThumbIndex).toBe(null);\n  });\n});\n","/Users/veronikazdorova/jQuery-slider/src/__tests__/view/tooltips.test.ts",["108","109"],"import EventEmitter from '../../slider/eventEmitter';\nimport { IModelState } from '../../slider/interfaces/iModelState';\nimport View from '../../slider/view/view';\nimport puppeteer from 'puppeteer';\n\nconst state: IModelState = {\n  min: 0,\n  max: 100,\n  thumbsValues: [20, 30, 40, 50],\n  orientation: 'horizontal',\n  amount: 4,\n  step: 2,\n  isTooltip: true,\n};\n\ndescribe('Модульные тесты', () => {\n  const slider = window.document.createElement('div');\n  slider.className = 'js-slider-test';\n  window.document.body.appendChild(slider);\n\n  const eventEmitter = new EventEmitter();\n  const view = new View(slider, eventEmitter);\n\n  test('Проверка корректности создания тултипов', () => {\n    eventEmitter.emit('model:state-changed', state);\n\n    const tooltipsElements = window.document.querySelectorAll('.js-slider__tooltip');\n    const textInTooltipsElements = window.document.querySelectorAll('.js-slider__tooltip-text');\n    const slidersElements = window.document.querySelectorAll('.js-slider__thumb');\n\n    expect(tooltipsElements.length).toBe(state.amount);\n    tooltipsElements.forEach((element) => {\n      expect(element.className).toContain('js-slider__tooltip');\n    });\n    expect(textInTooltipsElements.length).toBe(state.amount);\n    textInTooltipsElements.forEach((element) => {\n      expect(element.className).toContain('js-slider__tooltip-text');\n    });\n    tooltipsElements.forEach((element, i: number) => {\n      expect(element.childNodes).toContain(textInTooltipsElements[i]);\n    });\n    slidersElements.forEach((element, i: number) => {\n      expect(element.childNodes).toContain(tooltipsElements[i]);\n    });\n  });\n  test('Проверка установки значений ползунков по-умолчанию в соответствующие им тултипы ', () => {\n    const textInTooltipsElements = window.document.querySelectorAll('.js-slider__tooltip-text');\n    state.thumbsValues.forEach((element: number, i: number) => {\n      expect(String(element)).toBe(textInTooltipsElements[i].innerHTML);\n    });\n  });\n  test('Проверка изменения количества отрисованных тултипов при изменении количества ползунков', () => {\n    state.amount = 6;\n    eventEmitter.emit('model:state-changed', state);\n\n    let tooltipsElements = window.document.querySelectorAll('.js-slider__tooltip');\n    let textInTooltipsElements = window.document.querySelectorAll('.js-slider__tooltip-text');\n    let slidersElements = window.document.querySelectorAll('.js-slider__thumb');\n\n    expect(tooltipsElements.length).toBe(state.amount);\n    expect(textInTooltipsElements.length).toBe(state.amount);\n    tooltipsElements.forEach((element, i: number) => {\n      expect(element.childNodes).toContain(textInTooltipsElements[i]);\n    });\n    slidersElements.forEach((element, i: number) => {\n      expect(String(element.childNodes[0])).toContain(String(tooltipsElements[i]));\n    });\n\n    state.amount = 4;\n    eventEmitter.emit('model:state-changed', state);\n\n    tooltipsElements = window.document.querySelectorAll('.js-slider__tooltip');\n    textInTooltipsElements = window.document.querySelectorAll('.js-slider__tooltip-text');\n    slidersElements = window.document.querySelectorAll('.js-slider__thumb');\n\n    expect(tooltipsElements.length).toBe(state.amount);\n    expect(textInTooltipsElements.length).toBe(state.amount);\n    tooltipsElements.forEach((element, i: number) => {\n      expect(element.childNodes).toContain(textInTooltipsElements[i]);\n    });\n    slidersElements.forEach((element, i: number) => {\n      expect(element.childNodes).toContain(tooltipsElements[i]);\n    });\n  });\n  test('Проверка перерисовки тултипов при смене ориентации', () => {\n    state.orientation = 'vertical';\n    eventEmitter.emit('model:state-changed', state);\n\n    let tooltipsElements = window.document.querySelectorAll('.js-slider__tooltip');\n    let textInTooltipsElements = window.document.querySelectorAll('.js-slider__vertical-tooltip-text');\n\n    textInTooltipsElements.forEach((element) => {\n      expect(element.className).toContain('js-slider__vertical-tooltip-text');\n    });\n    tooltipsElements.forEach((element, i: number) => {\n      expect(element.childNodes).toContain(textInTooltipsElements[i]);\n    });\n\n    state.orientation = 'horizontal';\n    eventEmitter.emit('model:state-changed', state);\n\n    tooltipsElements = window.document.querySelectorAll('.js-slider__tooltip');\n    textInTooltipsElements = window.document.querySelectorAll('.js-slider__tooltip-text');\n\n    textInTooltipsElements.forEach((element) => {\n      expect(element.className).toContain('js-slider__tooltip-text');\n    });\n    tooltipsElements.forEach((element, i: number) => {\n      expect(element.childNodes).toContain(textInTooltipsElements[i]);\n    });\n  });\n  test('Проверить наличие значений в тултипах', () => {\n    const tooltipsText = window.document.querySelectorAll('.js-slider__tooltip-text');\n\n    expect(tooltipsText[0].innerHTML).toContain('20');\n    expect(tooltipsText[1].innerHTML).toContain('30');\n    expect(tooltipsText[2].innerHTML).toContain('40');\n  });\n  test('Проверка скрытия тултипов бегунков', () => {\n    state.isTooltip = false;\n    eventEmitter.emit('model:state-changed', state);\n\n    const tooltipsElements = window.document.querySelectorAll('.js-slider__tooltip');\n    tooltipsElements.forEach((element) => {\n      expect(element.className).toContain('slider__tooltip-hide');\n    });\n  });\n  test('Проверка показа тултипов бегунков', () => {\n    state.isTooltip = true;\n    eventEmitter.emit('model:state-changed', state);\n\n    const tooltipsElements = window.document.querySelectorAll('.js-slider__tooltip');\n    tooltipsElements.forEach((element) => {\n      expect(element.className).not.toContain('slider__tooltip-hide');\n    });\n  });\n});\ndescribe('Интеграционные тесты для горизонтального вида', () => {\n  let browser: puppeteer.Browser;\n  let page: puppeteer.Page;\n\n  beforeEach(async () => {\n    const element: HTMLDivElement | null = window.document.querySelector('.js-slider-test');\n    if (element !== null && element !== undefined) {\n      element.remove();\n    }\n    browser = await puppeteer.launch({ headless: false });\n    page = await browser.newPage();\n  });\n  afterEach(async () => {\n    await browser.close();\n  });\n  test('Проверить корректность изменений значений в тултипах горизонтального вида', async () => {\n    await page.goto('http://localhost:1234');\n    await page.waitFor(500);\n\n    // Функция для нахождения коэффициента единичного значения слайдера в пикселях\n    const getCoefficientPoint = (sliderLineWidth: number, max: number, min: number) => {\n      const value = sliderLineWidth / (max - min);\n      return value;\n    };\n    const calculateValue = (offsetLeft: number, startSlider: number, coefficientPoint: number) => {\n      let currentValueX: number = Math.floor((offsetLeft - startSlider)\n      / coefficientPoint) + state.min;\n      const multi: number = Math.floor(currentValueX / state.step);\n      currentValueX = state.step * multi;\n      return currentValueX;\n    };\n      // Найти координаты линии слайдера\n    const sliderLine: puppeteer.ElementHandle<Element> | null = await page.$('.js-slider__scale');\n    const rectSliderLine = await page.evaluate((element: HTMLDivElement) => {\n      const {\n        top, left, bottom, right,\n      } = element.getBoundingClientRect();\n      return {\n        top, left, bottom, right,\n      };\n    }, sliderLine);\n    const sliderLineWidth: number = rectSliderLine.right - rectSliderLine.left;\n\n    // Найти первый ползунок и его ширину\n    const thumbsElements: puppeteer.ElementHandle<Element>[] = await page.$$('.js-slider__thumb');\n    const firstElement: puppeteer.ElementHandle<Element> = thumbsElements[0];\n    let rectFirstElement = await page.evaluate((element: HTMLDivElement) => {\n      const {\n        top, left, bottom, right,\n      } = element.getBoundingClientRect();\n      return {\n        top, left, bottom, right,\n      };\n    }, firstElement);\n    const elementWidth: number = rectFirstElement.right - rectFirstElement.left;\n\n    // Точки начала и конца линии слайдера\n    const startPointSlider = rectSliderLine.left - (elementWidth / 2);\n    // const endPointSlider = rectSliderLine.right + (elementWidth/2);\n\n    await page.mouse.move(rectFirstElement.left, rectFirstElement.top);\n    await page.mouse.down();\n    await page.waitFor(200);\n    await page.mouse.move(rectFirstElement.left - 40, rectFirstElement.top, { steps: 2 });\n    await page.waitFor(200);\n    await page.mouse.up();\n\n    rectFirstElement = await page.evaluate((element: HTMLDivElement) => {\n      const {\n        top, left, bottom, right,\n      } = element.getBoundingClientRect();\n      return {\n        top, left, bottom, right,\n      };\n    }, firstElement);\n\n    const coefficientPoint = getCoefficientPoint(sliderLineWidth, state.max, state.min);\n    let currentValueTooltip = String(calculateValue(rectFirstElement.left,\n      startPointSlider, coefficientPoint));\n    let tooltipsText: puppeteer.ElementHandle<Element>[] = await page.$$('.js-slider__tooltip-text');\n    let tooltipText: puppeteer.ElementHandle<Element> = tooltipsText[0];\n    let innerHTMLTooltip = await page.evaluateHandle((element:\n      HTMLElement) => element.innerHTML, tooltipText);\n\n    expect(await innerHTMLTooltip.jsonValue()).toBe(currentValueTooltip);\n\n    // Найти координаты последнего ползунка\n    const lastElement: puppeteer.ElementHandle<Element> = thumbsElements[thumbsElements.length - 1];\n    let rectLastElement = await page.evaluate((element: HTMLDivElement) => {\n      const {\n        top, left, bottom, right,\n      } = element.getBoundingClientRect();\n      return {\n        top, left, bottom, right,\n      };\n    }, lastElement);\n\n    await page.mouse.move(rectLastElement.left, rectLastElement.top);\n    await page.mouse.down();\n    await page.waitFor(200);\n    await page.mouse.move(rectLastElement.left - 75, rectLastElement.top, { steps: 2 });\n    await page.waitFor(200);\n    await page.mouse.up();\n\n    rectLastElement = await page.evaluate((element: HTMLDivElement) => {\n      const {\n        top, left, bottom, right,\n      } = element.getBoundingClientRect();\n      return {\n        top, left, bottom, right,\n      };\n    }, lastElement);\n\n    currentValueTooltip = String(calculateValue(rectLastElement.left,\n      startPointSlider, coefficientPoint));\n    tooltipsText = await page.$$('.js-slider__tooltip-text');\n    tooltipText = tooltipsText[tooltipsText.length - 1];\n    innerHTMLTooltip = await page.evaluateHandle((element:\n      HTMLElement) => element.innerHTML, tooltipText);\n\n    expect(await innerHTMLTooltip.jsonValue()).toBe(currentValueTooltip);\n  });\n});\n","/Users/veronikazdorova/jQuery-slider/src/pages/demo/demo.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/controller.ts",["110","111","112"],"import { IHTMLElement } from './interfaces/iHTMLElement';\nimport Model from './model';\nimport View from './view/view';\nimport EventEmitter from './eventEmitter';\nimport { IModelState } from './interfaces/iModelState';\n\ninterface IData {\n    value: number\n    index: number\n}\n\nexport default class Controller {\n    public slider: IHTMLElement\n\n    constructor(element: IHTMLElement) {\n      this.slider = element;\n      this.slider.classList.add('slider');\n\n      const eventEmitter = new EventEmitter();\n      const view = new View(this.slider, eventEmitter);\n      const model: Model = new Model(eventEmitter);\n\n      this.slider.getState = (): IModelState => {\n        const modelState: IModelState = model.state;\n        return modelState;\n      };\n      this.slider.setNewValueMin = (min: number): void => {\n        model.setNewValueMin(min);\n      };\n      this.slider.setNewValueMax = (max: number): void => {\n        model.setNewValueMax(max);\n      };\n      this.slider.setNewValueAmount = (amount: number): void => {\n        model.setNewValueAmount(amount);\n      };\n      this.slider.setNewValueThumbsValues = (touchValue: number, index: number): void => {\n        model.setNewValueThumbsValues(touchValue, index);\n      };\n      this.slider.setNewValueStep = (step: number): void => {\n        model.setNewValueStep(step);\n      };\n      this.slider.setNewValueOrientation = (value: string): void => {\n        model.setNewValueOrientation(value);\n      };\n      this.slider.setNewValueTooltip = (value: boolean): void => {\n        model.setNewValueTooltip(value);\n      };\n      this.slider.subscribeToStateModel = (handler: (state: IModelState) => void,\n        isCreatedInput: boolean, amountInputs: () => Element[],\n        changeAmountInputs: (state: IModelState) => void,\n        setValueToInputFromModelState: (state: IModelState) => void,\n        setValueToStepFromModelState: (state: IModelState) => void,\n        setValueToMinInputFromModelState: (state: IModelState) => void,\n        setValueMaxInputFromModelState: (state: IModelState) => void): void => {\n        eventEmitter.makeSubscribe('model:state-changed', (state: IModelState): void => {\n          if (!isCreatedInput) {\n            handler(state);\n            isCreatedInput = true;\n          }\n          const arrayAmountInputs = amountInputs();\n          if (arrayAmountInputs.length !== state.thumbsValues.length) {\n            changeAmountInputs(state);\n          }\n          setValueToInputFromModelState(state);\n          setValueToStepFromModelState(state);\n          setValueToMinInputFromModelState(state);\n          setValueMaxInputFromModelState(state);\n        });\n      };\n      eventEmitter.makeSubscribe('view:amountThumbs-changed', (thumbsValues: number[]) => {\n        model.overwriteCurrentThumbsValues(thumbsValues);\n      });\n\n      eventEmitter.makeSubscribe('view:thumbsValues-changed', (data: IData) => {\n        model.setCurrentThumbsValues(data.value, data.index);\n      });\n    }\n}\n","/Users/veronikazdorova/jQuery-slider/src/slider/eventEmitter.ts",["113"],"/Users/veronikazdorova/jQuery-slider/src/slider/functions/createElement.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/interfaces/IThumbsState.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/interfaces/iConfigurator.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/interfaces/iHTMLElement.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/interfaces/iModelState.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/model.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/slider.ts",["114","115","116","117"],"import Controller from './controller';\nimport { IHTMLElement } from './interfaces/iHTMLElement';\n\n((function ($) {\n  $.fn.slider = function () {\n    const elements: IHTMLElement[] = Array.from(this) as IHTMLElement[];\n    elements.forEach((element: IHTMLElement) => {\n      const controller = new Controller(element);\n      console.log('создан контроллер', controller);\n    });\n  };\n})(jQuery));\n","/Users/veronikazdorova/jQuery-slider/src/slider/view/configurators/configuratorHorizontal.ts",["118"],"/Users/veronikazdorova/jQuery-slider/src/slider/view/configurators/configuratorVertical.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/view/scale.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/view/thumbs.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/view/tooltips.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/view/view.ts",[],{"ruleId":"119","severity":2,"message":"120","line":25,"column":9,"nodeType":"121","messageId":"122","endLine":25,"endColumn":13},{"ruleId":"123","severity":1,"message":"120","line":25,"column":9,"nodeType":"121","messageId":"122","endLine":25,"endColumn":13},{"ruleId":"119","severity":2,"message":"120","line":22,"column":9,"nodeType":"121","messageId":"122","endLine":22,"endColumn":13},{"ruleId":"123","severity":1,"message":"120","line":22,"column":9,"nodeType":"121","messageId":"122","endLine":22,"endColumn":13},{"ruleId":"119","severity":2,"message":"120","line":20,"column":13,"nodeType":"121","messageId":"122","endLine":20,"endColumn":17},{"ruleId":"123","severity":1,"message":"120","line":20,"column":13,"nodeType":"121","messageId":"122","endLine":20,"endColumn":17},{"ruleId":"124","severity":2,"message":"125","line":58,"column":13,"nodeType":"121","messageId":"126","endLine":58,"endColumn":27},{"ruleId":"127","severity":1,"message":"128","line":7,"column":43,"nodeType":"129","messageId":"130","endLine":7,"endColumn":46,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":4,"column":3,"nodeType":"134","messageId":"135","endLine":4,"endColumn":12},{"ruleId":"124","severity":2,"message":"136","line":5,"column":3,"nodeType":"121","messageId":"137","endLine":5,"endColumn":4},{"ruleId":"132","severity":1,"message":"133","line":5,"column":17,"nodeType":"134","messageId":"135","endLine":5,"endColumn":26},{"ruleId":"138","severity":1,"message":"139","line":9,"column":7,"nodeType":"140","messageId":"141","endLine":9,"endColumn":18},{"ruleId":"138","severity":1,"message":"139","line":94,"column":5,"nodeType":"140","messageId":"141","endLine":94,"endColumn":16},"no-unused-vars","'view' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","no-param-reassign","Assignment to function parameter 'isCreatedInput'.","assignmentToFunctionParam","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["142","143"],"func-names","Unexpected unnamed function.","FunctionExpression","unnamed","Assignment to property of function parameter '$'.","assignmentToFunctionParamProp","no-console","Unexpected console statement.","MemberExpression","unexpected",{"messageId":"144","fix":"145","desc":"146"},{"messageId":"147","fix":"148","desc":"149"},"suggestUnknown",{"range":"150","text":"151"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"150","text":"152"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[155,158],"unknown","never"]