[{"/Users/veronikazdorova/jQuery-slider/src/__tests__/configuratorHorizontal.test.ts":"1","/Users/veronikazdorova/jQuery-slider/src/__tests__/configuratorVertical.test.ts":"2","/Users/veronikazdorova/jQuery-slider/src/__tests__/eventEmitter.test.ts":"3","/Users/veronikazdorova/jQuery-slider/src/__tests__/functions/createElement.test.ts":"4","/Users/veronikazdorova/jQuery-slider/src/__tests__/model.test.ts":"5","/Users/veronikazdorova/jQuery-slider/src/__tests__/view/scale.test.ts":"6","/Users/veronikazdorova/jQuery-slider/src/__tests__/view/thumbs.integration.test.ts":"7","/Users/veronikazdorova/jQuery-slider/src/__tests__/view/thumbs.modular.test.ts":"8","/Users/veronikazdorova/jQuery-slider/src/__tests__/view/tooltips.test.ts":"9","/Users/veronikazdorova/jQuery-slider/src/pages/demo/demo.ts":"10","/Users/veronikazdorova/jQuery-slider/src/slider/controller.ts":"11","/Users/veronikazdorova/jQuery-slider/src/slider/eventEmitter.ts":"12","/Users/veronikazdorova/jQuery-slider/src/slider/functions/createElement.ts":"13","/Users/veronikazdorova/jQuery-slider/src/slider/interfaces/IThumbsState.ts":"14","/Users/veronikazdorova/jQuery-slider/src/slider/interfaces/iConfigurator.ts":"15","/Users/veronikazdorova/jQuery-slider/src/slider/interfaces/iHTMLElement.ts":"16","/Users/veronikazdorova/jQuery-slider/src/slider/interfaces/iModelState.ts":"17","/Users/veronikazdorova/jQuery-slider/src/slider/model.ts":"18","/Users/veronikazdorova/jQuery-slider/src/slider/slider.ts":"19","/Users/veronikazdorova/jQuery-slider/src/slider/view/configurators/configuratorHorizontal.ts":"20","/Users/veronikazdorova/jQuery-slider/src/slider/view/configurators/configuratorVertical.ts":"21","/Users/veronikazdorova/jQuery-slider/src/slider/view/scale.ts":"22","/Users/veronikazdorova/jQuery-slider/src/slider/view/thumbs.ts":"23","/Users/veronikazdorova/jQuery-slider/src/slider/view/tooltips.ts":"24","/Users/veronikazdorova/jQuery-slider/src/slider/view/view.ts":"25"},{"size":9029,"mtime":1595072918168,"results":"26","hashOfConfig":"27"},{"size":8881,"mtime":1595072985587,"results":"28","hashOfConfig":"27"},{"size":965,"mtime":1595070993757,"results":"29","hashOfConfig":"27"},{"size":246,"mtime":1594914304803,"results":"30","hashOfConfig":"27"},{"size":5047,"mtime":1595071006908,"results":"31","hashOfConfig":"27"},{"size":2444,"mtime":1595068231996,"results":"32","hashOfConfig":"27"},{"size":22288,"mtime":1595068952393,"results":"33","hashOfConfig":"27"},{"size":13041,"mtime":1595072832570,"results":"34","hashOfConfig":"27"},{"size":11253,"mtime":1595070868967,"results":"35","hashOfConfig":"27"},{"size":16604,"mtime":1594911726941,"results":"36","hashOfConfig":"27"},{"size":2988,"mtime":1595071085790,"results":"37","hashOfConfig":"27"},{"size":1038,"mtime":1594909957053,"results":"38","hashOfConfig":"27"},{"size":340,"mtime":1594639924778,"results":"39","hashOfConfig":"27"},{"size":267,"mtime":1594578939970,"results":"40","hashOfConfig":"27"},{"size":1664,"mtime":1594909138848,"results":"41","hashOfConfig":"27"},{"size":970,"mtime":1594909322545,"results":"42","hashOfConfig":"27"},{"size":181,"mtime":1594578934375,"results":"43","hashOfConfig":"27"},{"size":7071,"mtime":1594908928699,"results":"44","hashOfConfig":"27"},{"size":412,"mtime":1594981374479,"results":"45","hashOfConfig":"27"},{"size":5173,"mtime":1594909259368,"results":"46","hashOfConfig":"27"},{"size":5173,"mtime":1594909272457,"results":"47","hashOfConfig":"27"},{"size":1835,"mtime":1594629536846,"results":"48","hashOfConfig":"27"},{"size":16403,"mtime":1594908865773,"results":"49","hashOfConfig":"27"},{"size":4097,"mtime":1594906753082,"results":"50","hashOfConfig":"27"},{"size":4310,"mtime":1594909013161,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"v1tgg",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":5,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":1,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/veronikazdorova/jQuery-slider/src/__tests__/configuratorHorizontal.test.ts",[],"/Users/veronikazdorova/jQuery-slider/src/__tests__/configuratorVertical.test.ts",[],"/Users/veronikazdorova/jQuery-slider/src/__tests__/eventEmitter.test.ts",[],"/Users/veronikazdorova/jQuery-slider/src/__tests__/functions/createElement.test.ts",[],"/Users/veronikazdorova/jQuery-slider/src/__tests__/model.test.ts",[],"/Users/veronikazdorova/jQuery-slider/src/__tests__/view/scale.test.ts",[],"/Users/veronikazdorova/jQuery-slider/src/__tests__/view/thumbs.integration.test.ts",[],"/Users/veronikazdorova/jQuery-slider/src/__tests__/view/thumbs.modular.test.ts",["106","107"],"/Users/veronikazdorova/jQuery-slider/src/__tests__/view/tooltips.test.ts",["108","109"],"import EventEmitter from '../../slider/eventEmitter';\nimport { IModelState } from '../../slider/interfaces/iModelState';\nimport View from '../../slider/view/view';\nimport puppeteer from 'puppeteer';\n\nconst state: IModelState = {\n  min: 0,\n  max: 100,\n  thumbsValues: [20, 30, 40, 50],\n  orientation: 'horizontal',\n  amount: 4,\n  step: 2,\n  isTooltip: true,\n};\n\ndescribe('Модульные тесты', () => {\n  const slider = window.document.createElement('div');\n  slider.className = 'js-slider-test';\n  window.document.body.appendChild(slider);\n\n  const eventEmitter = new EventEmitter();\n  const view = new View(slider, eventEmitter);\n\n  test('Проверка корректности создания тултипов', () => {\n    eventEmitter.emit('model:state-changed', state);\n\n    const tooltipsElements = window.document.querySelectorAll('.js-slider__tooltip');\n    const textInTooltipsElements = window.document.querySelectorAll('.js-slider__tooltip-text');\n    const slidersElements = window.document.querySelectorAll('.js-slider__thumb');\n\n    expect(tooltipsElements.length).toBe(state.amount);\n    tooltipsElements.forEach((element) => {\n      expect(element.className).toContain('js-slider__tooltip');\n    });\n    expect(textInTooltipsElements.length).toBe(state.amount);\n    textInTooltipsElements.forEach((element) => {\n      expect(element.className).toContain('js-slider__tooltip-text');\n    });\n    tooltipsElements.forEach((element, i: number) => {\n      expect(element.childNodes).toContain(textInTooltipsElements[i]);\n    });\n    slidersElements.forEach((element, i: number) => {\n      expect(element.childNodes).toContain(tooltipsElements[i]);\n    });\n  });\n  test('Проверка установки значений ползунков по-умолчанию в соответствующие им тултипы ', () => {\n    const textInTooltipsElements = window.document.querySelectorAll('.js-slider__tooltip-text');\n    state.thumbsValues.forEach((element: number, i: number) => {\n      expect(String(element)).toBe(textInTooltipsElements[i].innerHTML);\n    });\n  });\n  test('Проверка изменения количества отрисованных тултипов при изменении количества ползунков', () => {\n    state.amount = 6;\n    eventEmitter.emit('model:state-changed', state);\n\n    let tooltipsElements = window.document.querySelectorAll('.js-slider__tooltip');\n    let textInTooltipsElements = window.document.querySelectorAll('.js-slider__tooltip-text');\n    let slidersElements = window.document.querySelectorAll('.js-slider__thumb');\n\n    expect(tooltipsElements.length).toBe(state.amount);\n    expect(textInTooltipsElements.length).toBe(state.amount);\n    tooltipsElements.forEach((element, i: number) => {\n      expect(element.childNodes).toContain(textInTooltipsElements[i]);\n    });\n    slidersElements.forEach((element, i: number) => {\n      expect(String(element.childNodes[0])).toContain(String(tooltipsElements[i]));\n    });\n\n    state.amount = 4;\n    eventEmitter.emit('model:state-changed', state);\n\n    tooltipsElements = window.document.querySelectorAll('.js-slider__tooltip');\n    textInTooltipsElements = window.document.querySelectorAll('.js-slider__tooltip-text');\n    slidersElements = window.document.querySelectorAll('.js-slider__thumb');\n\n    expect(tooltipsElements.length).toBe(state.amount);\n    expect(textInTooltipsElements.length).toBe(state.amount);\n    tooltipsElements.forEach((element, i: number) => {\n      expect(element.childNodes).toContain(textInTooltipsElements[i]);\n    });\n    slidersElements.forEach((element, i: number) => {\n      expect(element.childNodes).toContain(tooltipsElements[i]);\n    });\n  });\n  test('Проверка перерисовки тултипов при смене ориентации', () => {\n    state.orientation = 'vertical';\n    eventEmitter.emit('model:state-changed', state);\n\n    let tooltipsElements = window.document.querySelectorAll('.js-slider__tooltip');\n    let textInTooltipsElements = window.document.querySelectorAll('.js-slider__vertical-tooltip-text');\n\n    textInTooltipsElements.forEach((element) => {\n      expect(element.className).toContain('js-slider__vertical-tooltip-text');\n    });\n    tooltipsElements.forEach((element, i: number) => {\n      expect(element.childNodes).toContain(textInTooltipsElements[i]);\n    });\n\n    state.orientation = 'horizontal';\n    eventEmitter.emit('model:state-changed', state);\n\n    tooltipsElements = window.document.querySelectorAll('.js-slider__tooltip');\n    textInTooltipsElements = window.document.querySelectorAll('.js-slider__tooltip-text');\n\n    textInTooltipsElements.forEach((element) => {\n      expect(element.className).toContain('js-slider__tooltip-text');\n    });\n    tooltipsElements.forEach((element, i: number) => {\n      expect(element.childNodes).toContain(textInTooltipsElements[i]);\n    });\n  });\n  test('Проверить наличие значений в тултипах', () => {\n    const tooltipsText = window.document.querySelectorAll('.js-slider__tooltip-text');\n\n    expect(tooltipsText[0].innerHTML).toContain('20');\n    expect(tooltipsText[1].innerHTML).toContain('30');\n    expect(tooltipsText[2].innerHTML).toContain('40');\n  });\n  test('Проверка скрытия тултипов бегунков', () => {\n    state.isTooltip = false;\n    eventEmitter.emit('model:state-changed', state);\n\n    const tooltipsElements = window.document.querySelectorAll('.js-slider__tooltip');\n    tooltipsElements.forEach((element) => {\n      expect(element.className).toContain('slider__tooltip-hide');\n    });\n  });\n  test('Проверка показа тултипов бегунков', () => {\n    state.isTooltip = true;\n    eventEmitter.emit('model:state-changed', state);\n\n    const tooltipsElements = window.document.querySelectorAll('.js-slider__tooltip');\n    tooltipsElements.forEach((element) => {\n      expect(element.className).not.toContain('slider__tooltip-hide');\n    });\n  });\n});\ndescribe('Интеграционные тесты для горизонтального вида', () => {\n  let browser: puppeteer.Browser;\n  let page: puppeteer.Page;\n\n  beforeEach(async () => {\n    const element: HTMLDivElement | null = window.document.querySelector('.js-slider-test');\n    if (element !== null && element !== undefined) {\n      element.remove();\n    }\n    browser = await puppeteer.launch({ headless: false });\n    page = await browser.newPage();\n  });\n  afterEach(async () => {\n    await browser.close();\n  });\n  test('Проверить корректность изменений значений в тултипах горизонтального вида', async () => {\n    await page.goto('http://localhost:1234');\n    await page.waitFor(500);\n\n    // Функция для нахождения коэффициента единичного значения слайдера в пикселях\n    const getCoefficientPoint = (sliderLineWidth: number, max: number, min: number) => {\n      const value = sliderLineWidth / (max - min);\n      return value;\n    };\n    const calculateValue = (offsetLeft: number, startSlider: number, coefficientPoint: number) => {\n      let currentValueX: number = Math.floor((offsetLeft - startSlider)\n      / coefficientPoint) + state.min;\n      const multi: number = Math.floor(currentValueX / state.step);\n      currentValueX = state.step * multi;\n      return currentValueX;\n    };\n      // Найти координаты линии слайдера\n    const sliderLine: puppeteer.ElementHandle<Element> | null = await page.$('.js-slider__scale');\n    const rectSliderLine = await page.evaluate((element: HTMLDivElement) => {\n      const {\n        top, left, bottom, right,\n      } = element.getBoundingClientRect();\n      return {\n        top, left, bottom, right,\n      };\n    }, sliderLine);\n    const sliderLineWidth: number = rectSliderLine.right - rectSliderLine.left;\n\n    // Найти первый ползунок и его ширину\n    const thumbsElements: puppeteer.ElementHandle<Element>[] = await page.$$('.js-slider__thumb');\n    const firstElement: puppeteer.ElementHandle<Element> = thumbsElements[0];\n    let rectFirstElement = await page.evaluate((element: HTMLDivElement) => {\n      const {\n        top, left, bottom, right,\n      } = element.getBoundingClientRect();\n      return {\n        top, left, bottom, right,\n      };\n    }, firstElement);\n    const elementWidth: number = rectFirstElement.right - rectFirstElement.left;\n\n    // Точки начала и конца линии слайдера\n    const startPointSlider = rectSliderLine.left - (elementWidth / 2);\n    // const endPointSlider = rectSliderLine.right + (elementWidth/2);\n\n    await page.mouse.move(rectFirstElement.left, rectFirstElement.top);\n    await page.mouse.down();\n    await page.waitFor(200);\n    await page.mouse.move(rectFirstElement.left - 40, rectFirstElement.top, { steps: 2 });\n    await page.waitFor(200);\n    await page.mouse.up();\n\n    rectFirstElement = await page.evaluate((element: HTMLDivElement) => {\n      const {\n        top, left, bottom, right,\n      } = element.getBoundingClientRect();\n      return {\n        top, left, bottom, right,\n      };\n    }, firstElement);\n\n    const coefficientPoint = getCoefficientPoint(sliderLineWidth, state.max, state.min);\n    let currentValueTooltip = String(calculateValue(rectFirstElement.left,\n      startPointSlider, coefficientPoint));\n    let tooltipsText: puppeteer.ElementHandle<Element>[] = await page.$$('.js-slider__tooltip-text');\n    let tooltipText: puppeteer.ElementHandle<Element> = tooltipsText[0];\n    let innerHTMLTooltip = await page.evaluateHandle((element:\n      HTMLElement) => element.innerHTML, tooltipText);\n\n    expect(await innerHTMLTooltip.jsonValue()).toBe(currentValueTooltip);\n\n    // Найти координаты последнего ползунка\n    const lastElement: puppeteer.ElementHandle<Element> = thumbsElements[thumbsElements.length - 1];\n    let rectLastElement = await page.evaluate((element: HTMLDivElement) => {\n      const {\n        top, left, bottom, right,\n      } = element.getBoundingClientRect();\n      return {\n        top, left, bottom, right,\n      };\n    }, lastElement);\n\n    await page.mouse.move(rectLastElement.left, rectLastElement.top);\n    await page.mouse.down();\n    await page.waitFor(200);\n    await page.mouse.move(rectLastElement.left - 75, rectLastElement.top, { steps: 2 });\n    await page.waitFor(200);\n    await page.mouse.up();\n\n    rectLastElement = await page.evaluate((element: HTMLDivElement) => {\n      const {\n        top, left, bottom, right,\n      } = element.getBoundingClientRect();\n      return {\n        top, left, bottom, right,\n      };\n    }, lastElement);\n\n    currentValueTooltip = String(calculateValue(rectLastElement.left,\n      startPointSlider, coefficientPoint));\n    tooltipsText = await page.$$('.js-slider__tooltip-text');\n    tooltipText = tooltipsText[tooltipsText.length - 1];\n    innerHTMLTooltip = await page.evaluateHandle((element:\n      HTMLElement) => element.innerHTML, tooltipText);\n\n    expect(await innerHTMLTooltip.jsonValue()).toBe(currentValueTooltip);\n  });\n});\n","/Users/veronikazdorova/jQuery-slider/src/pages/demo/demo.ts",["110","111","112","113","114"],"import { IModelState } from '../../slider/interfaces/iModelState';\nimport { IHTMLElement } from '../../slider/interfaces/iHTMLElement';\n\n$(() => {\n  $('.js-slider-test').slider();\n\n  const elements: IHTMLElement[] = Array.from($('.js-slider-test'));\n\n  elements.forEach((element: IHTMLElement, index: number) => {\n    let isCreatedInput = false;\n\n    const createElement = (teg: string, className: string) => {\n      const htmlElement: IHTMLElement = document.createElement(teg) as IHTMLElement;\n      htmlElement.className = className;\n      return htmlElement;\n    };\n\n    const createInput = (state: IModelState) => {\n      const thumbsCurrentValuesList: IHTMLElement[] = Array.from(document.querySelectorAll('.js-configuration__thumbs-current-value-list'));\n      const thumbsIntervalValuesList: IHTMLElement[] = Array.from(document.querySelectorAll('.js-configuration__thumbs-interval-value-list'));\n\n      const fragmentCurrentValueList = document.createDocumentFragment();\n      const fragmentIntervalValueList = document.createDocumentFragment();\n\n      new Array(state.amount)\n        .fill(1)\n        .forEach((_element: number, i: number) => {\n          const currentValueItem: HTMLElement = createElement('li', 'configuration__thumbs-item js-configuration__thumbs-item');\n          const currentValueInput: HTMLElement = createElement('input', 'configuration__thumbs-value js-configuration__thumbs-value');\n          currentValueInput.setAttribute('type', 'text');\n          currentValueInput.setAttribute('value', String(state.thumbsValues[i]));\n\n          currentValueItem.append(currentValueInput);\n          fragmentCurrentValueList.append(currentValueItem);\n\n          const intervalValuesSet: HTMLElement = createElement('li', 'configuration__thumbs-set js-configuration__thumbs-set');\n\n          const valueFrom: HTMLElement = createElement('input', 'configuration__thumbs-value-from js-configuration__thumbs-value-from');\n          valueFrom.setAttribute('type', 'text');\n          if (i === 0) {\n            valueFrom.setAttribute('value', String(state.min));\n          } else {\n            valueFrom.setAttribute('value', String(state.thumbsValues[i - 1] + state.step));\n          }\n\n          const valueTo: HTMLElement = createElement('input', 'configuration__thumbs-value-to js-configuration__thumbs-value-to');\n          valueTo.setAttribute('type', 'text');\n          valueTo.setAttribute('value', String(state.max));\n          if (i === state.amount - 1) {\n            valueTo.setAttribute('value', String(state.max));\n          } else {\n            valueTo.setAttribute('value', String(state.thumbsValues[i + 1] - state.step));\n          }\n\n          intervalValuesSet.append(valueFrom);\n          intervalValuesSet.append(valueTo);\n          fragmentIntervalValueList.append(intervalValuesSet);\n        });\n      thumbsCurrentValuesList[index].append(fragmentCurrentValueList);\n      thumbsIntervalValuesList[index].append(fragmentIntervalValueList);\n      if (!isCreatedInput) {\n        isCreatedInput = true;\n      }\n    };\n    const changeAmountInputs = (state: IModelState) => {\n      const thumbsCurrentValuesList: IHTMLElement[] = Array.from(document.querySelectorAll('.js-configuration__thumbs-current-value-list'));\n      const $amountInputs: HTMLElement[] = Array.from($(thumbsCurrentValuesList[index]).find('.js-configuration__thumbs-item'));\n\n      const thumbsIntervalValuesList: IHTMLElement[] = Array.from(document.querySelectorAll('.js-configuration__thumbs-interval-value-list'));\n\n      if ($amountInputs.length < state.thumbsValues.length) {\n        const missingAmount: number = state.thumbsValues.length - $amountInputs.length;\n\n        const fragmentCurrentValueList = document.createDocumentFragment();\n        const fragmentIntervalValueList = document.createDocumentFragment();\n        new Array(missingAmount)\n          .fill(1)\n          .forEach((_element: number, i: number) => {\n            const $currentAmountInputs: HTMLElement[] = Array.from($(thumbsCurrentValuesList[index]).find('.js-configuration__thumbs-item'));\n            const currentValueItem: HTMLElement = createElement('li', 'configuration__thumbs-item js-thumbs-values__item');\n            const currentValueInput: HTMLElement = createElement('input', 'configuration__thumbs-value js-configuration__thumbs-value');\n            currentValueInput.setAttribute('type', 'text');\n            currentValueInput.setAttribute('value', String(state.thumbsValues[i]));\n\n            currentValueItem.append(currentValueInput);\n            fragmentCurrentValueList.append(currentValueItem);\n\n            const intervalValuesSet: HTMLElement = createElement('div', 'configuration__thumbs-set js-configuration__thumbs-set');\n\n            const valueFrom: HTMLElement = createElement('input', 'configuration__thumbs-value-from js-configuration__thumbs-value-from');\n            valueFrom.setAttribute('type', 'text');\n            valueFrom.setAttribute('value', String(state.thumbsValues[$currentAmountInputs.length - 1] + state.step));\n\n            const valueTo: HTMLElement = createElement('input', 'configuration__thumbs-value-to js-configuration__thumbs-value-to');\n            valueTo.setAttribute('type', 'text');\n            valueTo.setAttribute('value', String(state.max));\n\n            intervalValuesSet.append(valueFrom);\n            intervalValuesSet.append(valueTo);\n            fragmentIntervalValueList.append(intervalValuesSet);\n\n            setNewValueToNewInputs(state);\n          });\n        thumbsCurrentValuesList[index].append(fragmentCurrentValueList);\n        thumbsIntervalValuesList[index].append(fragmentIntervalValueList);\n      }\n      if ($amountInputs.length > state.thumbsValues.length) {\n        const excessAmount: number = $amountInputs.length - state.thumbsValues.length;\n\n        const thumbsCurrentValuesList: IHTMLElement[] = Array.from(document.querySelectorAll('.js-configuration__thumbs-current-value-list'));\n        const $allCurrentValuesInputs: HTMLElement[] = Array.from($(thumbsCurrentValuesList[0]).find('.js-configuration__thumbs-item'));\n\n        const thumbsIntervalValuesList: IHTMLElement[] = Array.from(document.querySelectorAll('.js-configuration__thumbs-interval-value-list'));\n        const $allIntervalValuesInputs: HTMLElement[] = Array.from($(thumbsIntervalValuesList[0]).find('.js-configuration__thumbs-set'));\n\n        new Array(excessAmount)\n          .fill(1)\n          .forEach(() => {\n            $allCurrentValuesInputs[$allCurrentValuesInputs.length - 1].remove();\n            $allCurrentValuesInputs.splice(-1, 1);\n\n            $allIntervalValuesInputs[$allIntervalValuesInputs.length - 1].remove();\n            $allIntervalValuesInputs.splice(-1, 1);\n          });\n      }\n    };\n    const setNewValueToNewInputs = (state: IModelState) => {\n      const thumbsCurrentValuesList: IHTMLElement[] = Array.from(document.querySelectorAll('.js-configuration__thumbs-current-value-list'));\n\n      const $allThumbs: IHTMLElement[] = Array.from($(thumbsCurrentValuesList[index]).find('.js-configuration__thumbs-value'));\n      const indexNewInput: number = $allThumbs.length - 1;\n      $allThumbs[indexNewInput].value = state.thumbsValues[indexNewInput];\n    };\n    const setValueToInputFromModelState = (state: IModelState) => {\n      const thumbsCurrentValuesList: IHTMLElement[] = Array.from(document.querySelectorAll('.js-configuration__thumbs-current-value-list'));\n\n      const thumbsIntervalValuesList: IHTMLElement[] = Array.from(document.querySelectorAll('.js-configuration__thumbs-interval-value-list'));\n\n      const $allThumbs: IHTMLElement[] = Array.from($(thumbsCurrentValuesList[index]).find('.js-configuration__thumbs-value'));\n      const $allValueFrom: IHTMLElement[] = Array.from($(thumbsIntervalValuesList[index]).find('.js-configuration__thumbs-value-from'));\n      const $allValueTo: IHTMLElement[] = Array.from($(thumbsIntervalValuesList[index]).find('.js-configuration__thumbs-value-to'));\n\n      new Array(state.thumbsValues.length)\n        .fill(1)\n        .forEach((_element: number, i: number) => {\n          $allThumbs[i].value = state.thumbsValues[i];\n          if (i === 0) {\n            if (state.thumbsValues.length === 1) {\n              $allValueFrom[i].value = state.min;\n              $allValueTo[i].value = state.max;\n            } else {\n              $allValueFrom[i].value = state.min;\n              $allValueTo[i].value = state.thumbsValues[i + 1] - state.step;\n            }\n          } else if (i === state.amount - 1) {\n            $allValueFrom[i].value = state.thumbsValues[i - 1] + state.step;\n            $allValueTo[i].value = state.max;\n          } else {\n            $allValueFrom[i].value = state.thumbsValues[i - 1] + state.step;\n            $allValueTo[i].value = state.thumbsValues[i + 1] - state.step;\n          }\n        });\n    };\n    const setValueToStepFromModelState = (state: IModelState) => {\n      const configurationPanel: IHTMLElement[] = Array.from(document.querySelectorAll('.js-configuration'));\n\n      const $stepSizes: IHTMLElement[] = Array.from($(configurationPanel[index]).find('.js-input-step-size__value'));\n      const stepSize = $stepSizes[0];\n      stepSize.value = state.step;\n    };\n    const setValueToMinInputFromModelState = (state: IModelState) => {\n      const configurationPanel: IHTMLElement[] = Array.from(document.querySelectorAll('.js-configuration'));\n\n      const $minMaxInputs: IHTMLElement[] = Array.from($(configurationPanel[index]).find('.js-input-min-max__value'));\n      const minInput: IHTMLElement = $minMaxInputs[0];\n      minInput.value = state.min;\n    };\n    const setValueMaxInputFromModelState = (state: IModelState) => {\n      const configurationPanel: IHTMLElement[] = Array.from(document.querySelectorAll('.js-configuration'));\n\n      const $minMaxInputs: IHTMLElement[] = Array.from($(configurationPanel[index]).find('.js-input-min-max__value'));\n      const maxInput: IHTMLElement = $minMaxInputs[1];\n      maxInput.value = state.max;\n    };\n\n    const modelState: IModelState = element.getState();\n    createInput(modelState);\n    setValueToStepFromModelState(modelState);\n    setValueToMinInputFromModelState(modelState);\n    setValueMaxInputFromModelState(modelState);\n\n    // переименовать функцию\n    const amountInputs = () => {\n      const configurationPanel: HTMLDivElement[] = Array.from(document.querySelectorAll('.js-configuration'));\n\n      const $amountInputs: HTMLElement[] = Array.from($(configurationPanel[index]).find('.js-configuration__thumbs-value'));\n      return $amountInputs;\n    };\n\n    element.subscribeToStateModel(createInput, isCreatedInput, amountInputs, changeAmountInputs,\n      setValueToInputFromModelState, setValueToStepFromModelState, setValueToMinInputFromModelState,\n      setValueMaxInputFromModelState);\n\n    const configurationPanel: IHTMLElement[] = Array.from(document.querySelectorAll('.js-configuration'));\n\n    // получить из поля ввода и передать новые введеные пользователем мин и макс значения слайдера\n    // из панели конфигураций в объект newConfig\n    const $minMaxValues: IHTMLElement[] = Array.from($(configurationPanel[index]).find('.js-input-min-max__value'));\n    const minValue: IHTMLElement = $minMaxValues[0];\n    const maxValue: IHTMLElement = $minMaxValues[1];\n\n    const handleMinValueBlur = () => {\n      const min = Number(minValue.value);\n      element.setNewValueMin(min);\n    };\n    const handleMaxValueBlur = () => {\n      const max = Number(maxValue.value);\n      element.setNewValueMax(max);\n    };\n    minValue.addEventListener('blur', handleMinValueBlur);\n    maxValue.addEventListener('blur', handleMaxValueBlur);\n\n    // получить из поля ввода и передать новое значение количества ползунков введенное пользователем\n    // из панели конфигураций\n    const $amountSliderThumbs: IHTMLElement[] = Array.from($(configurationPanel[index]).find('.js-input-amount-thumb__value'));\n\n    const handleAmountSliderThumbsBlur = () => {\n      const amount = Number($amountSliderThumbs[0].value);\n      element.setNewValueAmount(amount);\n    };\n    $amountSliderThumbs[0].addEventListener('blur', handleAmountSliderThumbsBlur);\n    // получить из поля ввода и передать новые значения текущих состояний\n    // ползунков введенных пользователем из панели конфигураций\n    const toFindinputsSliderThumbs = (): IHTMLElement[] => {\n      const configurationPanel: IHTMLElement[] = Array.from(document.querySelectorAll('.js-configuration'));\n      const $element:IHTMLElement[] = Array.from($(configurationPanel[index]).find('.js-configuration__thumbs-value'));\n      return $element;\n    };\n    const inputsSliderThumbs: IHTMLElement[] = toFindinputsSliderThumbs();\n\n    new Array(inputsSliderThumbs.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        const handleInputsSliderThumbsBlur = () => {\n          const thumbsValue = Number(inputsSliderThumbs[i].value);\n          element.setNewValueThumbsValues(thumbsValue, i);\n        };\n        inputsSliderThumbs[i].addEventListener('blur', handleInputsSliderThumbsBlur);\n      });\n\n    // получить из поля ввода и передать новое значение размера шага введенного пользователем\n    // из панели конфигураций в объект newConfig\n    const $stepSize: IHTMLElement[] = Array.from($(configurationPanel[index]).find('.js-input-step-size__value'));\n\n    const handleStepSizeBlur = () => {\n      const step = Number($stepSize[0].value);\n      element.setNewValueStep(step);\n    };\n    $stepSize[0].addEventListener('blur', handleStepSizeBlur);\n\n    // получить из поля ввода и передать новое значение ориентации слайдера\n    const $orientationSlider: IHTMLElement[] = Array.from($(configurationPanel[index]).find('.js-radio-button'));\n\n    new Array($orientationSlider.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        const handleOrientationSliderClick = () => {\n          let orientation = '';\n          if (i === 0) { orientation = 'horizontal'; }\n          if (i === 1) { orientation = 'vertical'; }\n          element.setNewValueOrientation(orientation);\n        };\n        $orientationSlider[i].addEventListener('click', handleOrientationSliderClick);\n      });\n\n    // получить из поля ввода и передать новое значение наличия тултипа\n    const $checkboxContainer: IHTMLElement[] = Array.from($(configurationPanel[index]).find('.js-checkbox-button'));\n    const $checkboxInput: IHTMLElement[] = Array.from($(configurationPanel[index]).find('.js-checkbox-button__content'));\n\n    const handleCheckboxContainerClick = () => {\n      let checked = true;\n      if ($checkboxInput[0].checked === true) {\n        checked = true;\n      }\n      if ($checkboxInput[0].checked === false) {\n        checked = false;\n      }\n      element.setNewValueTooltip(checked);\n    };\n    $checkboxContainer[0].addEventListener('click', handleCheckboxContainerClick);\n\n    const setValueOfInputsSliderThumbs = () => {\n      const inputsSliderThumbs: IHTMLElement[] = toFindinputsSliderThumbs();\n\n      new Array(inputsSliderThumbs.length)\n        .fill(1)\n        .forEach((_element: number, i: number) => {\n          const thumbsValue = Number(inputsSliderThumbs[i].value);\n          element.setNewValueThumbsValues(thumbsValue, i);\n        });\n    };\n\n    const form: IHTMLElement[] = Array.from(document.querySelectorAll('.js-configuration'));\n    const handleElementFormSubmit: (event: Event) => void = (event): void => {\n      const currentEvent: Event = event;\n      currentEvent.preventDefault();\n\n      const min = Number(minValue.value);\n      element.setNewValueMin(min);\n\n      const max = Number(maxValue.value);\n      element.setNewValueMax(max);\n\n      const amount = Number($amountSliderThumbs[0].value);\n      element.setNewValueAmount(amount);\n\n      setValueOfInputsSliderThumbs();\n\n      const step = Number($stepSize[0].value);\n      element.setNewValueStep(step);\n    };\n    form.forEach((elementForm: HTMLElement) => {\n      elementForm.addEventListener('submit', handleElementFormSubmit);\n    });\n  });\n});\n","/Users/veronikazdorova/jQuery-slider/src/slider/controller.ts",["115","116","117"],"/Users/veronikazdorova/jQuery-slider/src/slider/eventEmitter.ts",["118","119"],"import { IModelState } from './interfaces/iModelState';\n\ninterface IData {\n    value: number\n    index: number\n}\ntype CallbackFunctionVariadic = (...args: any[]) => void;\ninterface StringArray {\n    [index: string]: CallbackFunctionVariadic[];\n}\nexport default class EventEmitter {\n    public handlersByEvent: StringArray;\n\n    constructor() {\n      this.handlersByEvent = {};\n    }\n\n    public makeSubscribe(eventName: string, fn: CallbackFunctionVariadic): () => void {\n      if (!this.handlersByEvent[eventName]) {\n        this.handlersByEvent[eventName] = [];\n      }\n\n      this.handlersByEvent[eventName].push(fn);\n      return (): void => {\n        this.handlersByEvent[eventName] = this.handlersByEvent[eventName].filter((eventFn) => fn !== eventFn);\n      };\n    }\n\n    public emit(eventName: string, data: IModelState | IData | number[]): void {\n      const handlers: CallbackFunctionVariadic[] = this.handlersByEvent[eventName];\n      if (handlers) {\n        handlers.forEach((fn) => { fn.call(null, data); });\n      }\n    }\n}\n","/Users/veronikazdorova/jQuery-slider/src/slider/functions/createElement.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/interfaces/IThumbsState.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/interfaces/iConfigurator.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/interfaces/iHTMLElement.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/interfaces/iModelState.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/model.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/slider.ts",["120","121","122","123"],"import Controller from './controller';\nimport { IHTMLElement } from './interfaces/iHTMLElement';\n\n((function ($) {\n  $.fn.slider = function () {\n    const elements: IHTMLElement[] = Array.from(this) as IHTMLElement[];\n    elements.forEach((element: IHTMLElement) => {\n      const controller = new Controller(element);\n      console.log('создан контроллер', controller);\n    });\n  };\n})(jQuery));\n","/Users/veronikazdorova/jQuery-slider/src/slider/view/configurators/configuratorHorizontal.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/view/configurators/configuratorVertical.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/view/scale.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/view/thumbs.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/view/tooltips.ts",[],"/Users/veronikazdorova/jQuery-slider/src/slider/view/view.ts",[],{"ruleId":"124","severity":2,"message":"125","line":25,"column":9,"nodeType":"126","messageId":"127","endLine":25,"endColumn":13},{"ruleId":"128","severity":1,"message":"125","line":25,"column":9,"nodeType":"126","messageId":"127","endLine":25,"endColumn":13},{"ruleId":"124","severity":2,"message":"125","line":22,"column":9,"nodeType":"126","messageId":"127","endLine":22,"endColumn":13},{"ruleId":"128","severity":1,"message":"125","line":22,"column":9,"nodeType":"126","messageId":"127","endLine":22,"endColumn":13},{"ruleId":"129","severity":2,"message":"130","line":102,"column":13,"nodeType":"126","messageId":"131","endLine":102,"endColumn":35},{"ruleId":"132","severity":2,"message":"133","line":110,"column":15,"nodeType":"126","messageId":"134","endLine":110,"endColumn":54},{"ruleId":"132","severity":2,"message":"135","line":113,"column":15,"nodeType":"126","messageId":"134","endLine":113,"endColumn":55},{"ruleId":"132","severity":2,"message":"136","line":235,"column":13,"nodeType":"126","messageId":"134","endLine":235,"endColumn":47},{"ruleId":"132","severity":2,"message":"137","line":293,"column":13,"nodeType":"126","messageId":"134","endLine":293,"endColumn":47},{"ruleId":"124","severity":2,"message":"125","line":20,"column":13,"nodeType":"126","messageId":"127","endLine":20,"endColumn":17},{"ruleId":"128","severity":1,"message":"125","line":20,"column":13,"nodeType":"126","messageId":"127","endLine":20,"endColumn":17},{"ruleId":"138","severity":2,"message":"139","line":58,"column":13,"nodeType":"126","messageId":"140","endLine":58,"endColumn":27},{"ruleId":"141","severity":1,"message":"142","line":7,"column":43,"nodeType":"143","messageId":"144","endLine":7,"endColumn":46,"suggestions":"145"},{"ruleId":"146","severity":2,"message":"147","line":25,"column":1,"nodeType":"148","messageId":"149"},{"ruleId":"150","severity":1,"message":"151","line":4,"column":3,"nodeType":"152","messageId":"153","endLine":4,"endColumn":12},{"ruleId":"138","severity":2,"message":"154","line":5,"column":3,"nodeType":"126","messageId":"155","endLine":5,"endColumn":4},{"ruleId":"150","severity":1,"message":"151","line":5,"column":17,"nodeType":"152","messageId":"153","endLine":5,"endColumn":26},{"ruleId":"156","severity":1,"message":"157","line":9,"column":7,"nodeType":"158","messageId":"159","endLine":9,"endColumn":18},"no-unused-vars","'view' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","no-use-before-define","'setNewValueToNewInputs' was used before it was defined.","usedBeforeDefined","no-shadow","'thumbsCurrentValuesList' is already declared in the upper scope.","noShadow","'thumbsIntervalValuesList' is already declared in the upper scope.","'configurationPanel' is already declared in the upper scope.","'inputsSliderThumbs' is already declared in the upper scope.","no-param-reassign","Assignment to function parameter 'isCreatedInput'.","assignmentToFunctionParam","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["160","161"],"max-len","This line has a length of 110. Maximum allowed is 100.","Program","max","func-names","Unexpected unnamed function.","FunctionExpression","unnamed","Assignment to property of function parameter '$'.","assignmentToFunctionParamProp","no-console","Unexpected console statement.","MemberExpression","unexpected",{"messageId":"162","fix":"163","desc":"164"},{"messageId":"165","fix":"166","desc":"167"},"suggestUnknown",{"range":"168","text":"169"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"168","text":"170"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[155,158],"unknown","never"]