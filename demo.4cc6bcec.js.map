{"version":3,"sources":["demo/components/configuration-panel/utilities.ts","demo/components/configuration-panel/configuration-panel.ts","slider/Model/defaultState.ts","slider/Model/Model.ts","slider/functions/createElement.ts","slider/view/utilities/utilities.ts","slider/view/ProgressBar.ts","slider/view/Thumbs.ts","slider/view/Tooltips.ts","slider/view/View.ts","slider/Controller.ts","slider/EventEmitter.ts","slider/Wrapper.ts","slider/slider.ts","demo/page/demo.ts"],"names":[],"mappings":"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","file":"demo.4cc6bcec.js","sourceRoot":"../src","sourcesContent":["import { IHTMLElement } from '../../../slider/interfaces/iHTMLElement';\n\nconst utilities = {\n  createElement(tag: string, className: string): IHTMLElement {\n    const htmlElement: IHTMLElement = document.createElement(\n      tag,\n    ) as IHTMLElement;\n    htmlElement.className = className;\n    return htmlElement;\n  },\n};\n\nexport default utilities;\n","import { IModelState } from '../../../slider/interfaces/iModelState';\nimport utilities from './utilities';\n\nclass ConfigurationPanel {\n  public connection: PlainObject<any>;\n\n  public sliderIndex: number;\n\n  public elements: {\n    panel: HTMLElement | null;\n    minValue: HTMLInputElement | null;\n    maxValue: HTMLInputElement | null;\n    countSliderThumbs: HTMLInputElement[] | null;\n    inputsSliderThumbs: HTMLInputElement[] | null;\n    stepSize: HTMLInputElement[] | null;\n    orientationButtons: HTMLInputElement[] | null;\n    checkboxContainer: HTMLInputElement[] | null;\n    checkboxInputTooltip: HTMLInputElement[] | null;\n    checkboxInputScaleOfValues: HTMLInputElement[] | null;\n    forms: HTMLElement[] | null;\n  };\n\n  constructor(element: JQuery<HTMLElement>, index: number) {\n    this.connection = element.data();\n    this.sliderIndex = index;\n\n    this.elements = {\n      panel: null,\n      minValue: null,\n      maxValue: null,\n      countSliderThumbs: null,\n      inputsSliderThumbs: null,\n      stepSize: null,\n      orientationButtons: null,\n      checkboxContainer: null,\n      checkboxInputTooltip: null,\n      checkboxInputScaleOfValues: null,\n      forms: null,\n    };\n\n    this.connection.subscribeToModelChanges((state: IModelState) => {\n      this.render(state);\n    });\n\n    this.connection.subscribeToThumbsChanges((thumbsValues: number[]) => {\n      this.updateThumbsValues(thumbsValues);\n    });\n\n    this.findElements();\n    this.bindEventListeners();\n    this.render(this.connection.getState());\n  }\n\n  render(state: IModelState): void {\n    this.createInput(state);\n    this.setValuesFromState(state);\n  }\n\n  updateThumbsValues(thumbsValues: number[]): void {\n    this.elements.inputsSliderThumbs?.forEach((element, i) => {\n      const thumb = element;\n      thumb.value = String(thumbsValues[i]);\n    });\n  }\n\n  findElements(): void {\n    const configurationPanels = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n\n    this.elements.panel = configurationPanels[this.sliderIndex] as HTMLElement;\n\n    const $minMaxContainer = $('.js-field__min-max');\n    const $minMaxValues: HTMLInputElement[] = Array.from(\n      $($minMaxContainer[this.sliderIndex]).find('.js-input__value'),\n    ) as HTMLInputElement[];\n    [this.elements.minValue, this.elements.maxValue] = $minMaxValues;\n\n    const $countThumbsContainer = $('.js-configuration__field-count-thumb');\n    this.elements.countSliderThumbs = Array.from(\n      $($countThumbsContainer[this.sliderIndex]).find('.js-input__value'),\n    ) as HTMLInputElement[];\n\n    const $thumbsValuesContainer = $('.js-field__thumbs-values');\n    this.elements.inputsSliderThumbs = Array.from(\n      $thumbsValuesContainer[this.sliderIndex].querySelectorAll(\n        '.js-configuration__thumb-value',\n      ),\n    );\n\n    const $stepSizeContainer = $('.js-configuration__field-step-size');\n    this.elements.stepSize = Array.from(\n      $($stepSizeContainer[this.sliderIndex]).find('.js-input__value'),\n    ) as HTMLInputElement[];\n\n    this.elements.orientationButtons = Array.from(\n      $(this.elements.panel).find('.js-radio-button__content'),\n    ) as HTMLInputElement[];\n\n    this.elements.checkboxContainer = Array.from(\n      $(this.elements.panel).find('.js-checkbox-button'),\n    ) as HTMLInputElement[];\n    this.elements.checkboxInputTooltip = Array.from(\n      $(this.elements.panel).find('.js-checkbox-button__tooltip'),\n    ) as HTMLInputElement[];\n    this.elements.checkboxInputScaleOfValues = Array.from(\n      $(this.elements.panel).find('.js-checkbox-button__scale-of-values'),\n    ) as HTMLInputElement[];\n\n    this.elements.forms = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    ) as HTMLElement[];\n  }\n\n  setValuesFromState(state: IModelState): void {\n    if (this.elements.orientationButtons !== null) {\n      if (state.orientation === 'horizontal') {\n        this.elements.orientationButtons[0].checked = true;\n      }\n      if (state.orientation === 'vertical') {\n        this.elements.orientationButtons[1].checked = true;\n      }\n    }\n\n    if (this.elements.minValue !== null) {\n      this.elements.minValue.value = String(state.min);\n    }\n    if (this.elements.maxValue !== null) {\n      this.elements.maxValue.value = String(state.max);\n    }\n\n    if (this.elements.countSliderThumbs !== null) {\n      this.elements.countSliderThumbs[0].value = String(state.thumbsCount);\n    }\n\n    if (this.elements.stepSize !== null) {\n      this.elements.stepSize[0].value = String(state.step);\n    }\n\n    if (this.elements.checkboxInputTooltip !== null) {\n      if (!state.isTooltip) {\n        this.elements.checkboxInputTooltip[0].checked = false;\n      } else {\n        this.elements.checkboxInputTooltip[0].checked = true;\n      }\n    }\n\n    if (this.elements.checkboxInputScaleOfValues !== null) {\n      if (!state.isScaleOfValues) {\n        this.elements.checkboxInputScaleOfValues[0].checked = false;\n      }\n      if (state.isScaleOfValues) {\n        this.elements.checkboxInputScaleOfValues[0].checked = true;\n      }\n    }\n  }\n\n  createInput(state: IModelState): void {\n    const thumbsCurrentValuesList: HTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration__thumbs-current-value-list'),\n    );\n\n    thumbsCurrentValuesList[this.sliderIndex].innerHTML = '';\n\n    const fragmentCurrentValueList = document.createDocumentFragment();\n\n    new Array(state.thumbsCount)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        const currentValueItem: HTMLElement = utilities.createElement(\n          'li',\n          'configuration__thumbs-item js-configuration__thumbs-item',\n        );\n        const currentValueInput: HTMLElement = utilities.createElement(\n          'input',\n          'configuration__thumbs-value js-configuration__thumb-value',\n        );\n        currentValueInput.setAttribute('type', 'number');\n        currentValueInput.setAttribute('step', 'any');\n        currentValueInput.setAttribute('value', String(state.thumbsValues[i]));\n\n        currentValueItem.append(currentValueInput);\n        fragmentCurrentValueList.append(currentValueItem);\n      });\n    thumbsCurrentValuesList[this.sliderIndex].append(fragmentCurrentValueList);\n\n    this.elements.inputsSliderThumbs = Array.from(\n      thumbsCurrentValuesList[this.sliderIndex].querySelectorAll(\n        '.js-configuration__thumb-value',\n      ),\n    );\n    this.listenInputsSliderThumbs();\n  }\n\n  bindEventListeners(): void {\n    this.listenMinValue();\n    this.listenMaxValue();\n    this.listenThumbsCount();\n    this.listenStepSize();\n    this.listenOrientationSlider();\n    this.listenCheckboxContainer();\n    this.listenForm();\n  }\n\n  listenMinValue(): void {\n    this.elements.minValue?.addEventListener(\n      'blur',\n      this.handleElementClickOrBlur.bind(this),\n    );\n  }\n\n  listenMaxValue(): void {\n    this.elements.maxValue?.addEventListener(\n      'blur',\n      this.handleElementClickOrBlur.bind(this),\n    );\n  }\n\n  listenThumbsCount(): void {\n    if (this.elements.countSliderThumbs !== null) {\n      this.elements.countSliderThumbs[0].addEventListener(\n        'blur',\n        this.handleElementClickOrBlur.bind(this),\n      );\n    }\n  }\n\n  listenStepSize(): void {\n    if (this.elements.stepSize !== null) {\n      this.elements.stepSize[0].addEventListener(\n        'blur',\n        this.handleElementClickOrBlur.bind(this),\n      );\n    }\n  }\n\n  listenInputsSliderThumbs(): void {\n    this.elements.inputsSliderThumbs?.forEach(element => {\n      element.addEventListener(\n        'blur',\n        this.handleElementClickOrBlur.bind(this),\n      );\n    });\n  }\n\n  listenOrientationSlider(): void {\n    this.elements.orientationButtons?.forEach(element => {\n      element.addEventListener(\n        'click',\n        this.handleElementClickOrBlur.bind(this),\n      );\n    });\n  }\n\n  listenCheckboxContainer(): void {\n    this.elements.checkboxContainer?.forEach(element => {\n      element.addEventListener(\n        'click',\n        this.handleElementClickOrBlur.bind(this),\n      );\n    });\n  }\n\n  listenForm(): void {\n    if (this.elements.forms !== null) {\n      this.elements.forms.forEach((elementForm: HTMLElement) => {\n        elementForm.addEventListener(\n          'submit',\n          this.handleElementFormSubmit.bind(this),\n        );\n      });\n    }\n  }\n\n  handleElementClickOrBlur(): void {\n    const state = this.getValuesFromAllInputs();\n    this.connection.update(state);\n  }\n\n  handleElementFormSubmit: (event: Event) => void = (event): void => {\n    const currentEvent: Event = event;\n    currentEvent.preventDefault();\n\n    const state = this.getValuesFromAllInputs();\n    this.connection.update(state);\n  };\n\n  getValuesFromAllInputs(): IModelState {\n    const state: IModelState = {\n      min: Number(this.elements.minValue?.value),\n      max: Number(this.elements.maxValue?.value),\n      step: 0,\n      thumbsCount: 0,\n      thumbsValues: [],\n      isScaleOfValues: true,\n      isTooltip: true,\n      orientation: 'horizontal',\n    };\n\n    if (this.elements.stepSize !== null) {\n      state.step = Number(this.elements.stepSize[0].value);\n    }\n\n    if (this.elements.countSliderThumbs !== null) {\n      state.thumbsCount = Number(this.elements.countSliderThumbs[0].value);\n    }\n\n    this.elements.inputsSliderThumbs?.forEach((element, i) => {\n      state.thumbsValues[i] = Number(element.value);\n    });\n\n    if (this.elements.checkboxInputScaleOfValues !== null) {\n      if (!this.elements.checkboxInputScaleOfValues[0].checked) {\n        state.isScaleOfValues = false;\n      }\n    }\n\n    if (this.elements.checkboxInputTooltip !== null) {\n      if (!this.elements.checkboxInputTooltip[0].checked) {\n        state.isTooltip = false;\n      }\n    }\n\n    if (this.elements.orientationButtons !== null) {\n      if (this.elements.orientationButtons[1].checked === true) {\n        state.orientation = 'vertical';\n      }\n    }\n\n    return state;\n  }\n}\nexport default ConfigurationPanel;\n","import { IModelState } from '../interfaces/iModelState';\n\nconst defaultState: IModelState = {\n  min: 0,\n  max: 100,\n  thumbsValues: [20, 32, 44, 60],\n  orientation: 'horizontal',\n  thumbsCount: 4,\n  step: 2,\n  isTooltip: true,\n  isScaleOfValues: true,\n};\n\nexport default defaultState;\n","import { IModelState } from '../interfaces/iModelState';\nimport EventEmitter from '../EventEmitter';\nimport defaultState from './defaultState';\n\nclass Model {\n  public state: IModelState;\n\n  private emitter: EventEmitter;\n\n  constructor(eventEmitter: EventEmitter) {\n    this.state = {\n      min: defaultState.min,\n      max: defaultState.max,\n      thumbsValues: defaultState.thumbsValues,\n      orientation: defaultState.orientation,\n      thumbsCount: defaultState.thumbsCount,\n      step: defaultState.step,\n      isTooltip: defaultState.isTooltip,\n      isScaleOfValues: defaultState.isScaleOfValues,\n    };\n\n    this.emitter = eventEmitter;\n    this.notifyStateChanged();\n  }\n\n  public updateState(state: IModelState): void {\n    this.state = state;\n    this.normolizeState();\n  }\n\n  private normolizeState() {\n    if (this.state.min < 0) {\n      this.state.min = defaultState.min;\n    }\n\n    if (this.state.step <= 0) {\n      this.state.step = 1;\n    }\n\n    if (this.state.thumbsCount <= 0) {\n      this.state.thumbsCount = 1;\n    }\n\n    if (!['horizontal', 'vertical'].includes(this.state.orientation)) {\n      this.state.orientation = defaultState.orientation;\n    }\n\n    if (!Number.isInteger(this.state.min)) {\n      this.state.min -= this.state.min - Math.floor(this.state.min);\n    }\n\n    if (!Number.isInteger(this.state.max)) {\n      this.state.max -= this.state.max - Math.floor(this.state.max);\n    }\n\n    if (!Number.isInteger(this.state.thumbsCount)) {\n      this.state.thumbsCount -=\n        this.state.thumbsCount - Math.floor(this.state.thumbsCount);\n    }\n\n    const minPossibleMaxValue =\n      this.state.min + this.state.step * (this.state.thumbsCount + 1);\n\n    if (this.state.max < minPossibleMaxValue) {\n      this.state.max = minPossibleMaxValue;\n    }\n\n    if (this.state.thumbsValues.length < this.state.thumbsCount) {\n      const missingQuantityThumbs =\n        this.state.thumbsCount - this.state.thumbsValues.length;\n      new Array(missingQuantityThumbs).fill(1).forEach(() => {\n        this.state.thumbsValues[this.state.thumbsValues.length] =\n          this.state.thumbsValues[this.state.thumbsValues.length - 1] +\n          this.state.step;\n      });\n    }\n    if (this.state.thumbsValues.length > this.state.thumbsCount) {\n      if (this.state.thumbsCount > 0) {\n        const excessThumbs =\n          this.state.thumbsValues.length - this.state.thumbsCount;\n        new Array(excessThumbs).fill(1).forEach(() => {\n          this.state.thumbsValues.splice(-1, 1);\n        });\n      }\n    }\n\n    this.checkThumbsValues(this.state.thumbsValues);\n    this.notifyStateChanged();\n  }\n\n  // set a new value for the thumb state\n  public setNewThumbValue(thumbValue: number, index: number): void {\n    if (this.state.thumbsValues[index] === thumbValue) {\n      return;\n    }\n\n    this.state.thumbsValues[index] = thumbValue;\n\n    for (let i = index; i < this.state.thumbsValues.length; i += 1) {\n      if (this.state.thumbsValues[i] >= this.state.thumbsValues[i + 1]) {\n        this.state.thumbsValues[i + 1] =\n          this.state.thumbsValues[i] + this.state.step;\n      }\n    }\n\n    for (let i = index; i > 0; i -= 1) {\n      if (this.state.thumbsValues[i] <= this.state.thumbsValues[i - 1]) {\n        this.state.thumbsValues[i - 1] =\n          this.state.thumbsValues[i] - this.state.step;\n      }\n    }\n\n    this.checkThumbsValues(this.state.thumbsValues);\n  }\n\n  public requestThumbValueChange(value: number, index: number): void {\n    const correctValue: number = Math.round(value);\n\n    if (correctValue !== this.state.thumbsValues[index]) {\n      this.setNewThumbValue(correctValue, index);\n    }\n  }\n\n  // Calculate thumbs values based on step size\n  private checkThumbsValues(thumbsValues: number[]): void {\n    thumbsValues.forEach((element: number, index: number) => {\n      let value: number = Math.floor(element * 10) / 10;\n\n      const minPossibleValue = this.state.min + index * this.state.step;\n\n      const lastStep =\n        Math.round(((this.state.max - this.state.min) % this.state.step) * 10) /\n        10;\n\n      let maxPossibleValue;\n      if (lastStep > 0) {\n        if (index === thumbsValues.length - 1) {\n          maxPossibleValue = this.state.max;\n        } else {\n          maxPossibleValue =\n            this.state.max -\n            (thumbsValues.length - index - 2) * this.state.step -\n            lastStep;\n        }\n      } else {\n        maxPossibleValue =\n          this.state.max - (thumbsValues.length - index - 1) * this.state.step;\n      }\n\n      if (value < minPossibleValue) {\n        value = minPossibleValue;\n      } else if (value >= maxPossibleValue) {\n        value = maxPossibleValue;\n      } else {\n        const valuesInterval = Math.round((value - this.state.min) * 10) / 10;\n        const integer = Math.floor(valuesInterval / this.state.step);\n\n        const getRemainderOfDivision = (interval: number, step: number) => {\n          return Math.abs(\n            Math.round((interval - integer * step) * 10000) / 10000,\n          );\n        };\n\n        const remainderOfDivision = getRemainderOfDivision(\n          valuesInterval,\n          this.state.step,\n        );\n\n        let currentValue;\n\n        if (remainderOfDivision > 0) {\n          currentValue = integer * this.state.step + this.state.min;\n          const lastStep =\n            Math.round(\n              ((this.state.max - this.state.min) % this.state.step) * 10,\n            ) / 10;\n          const beginningLastStep = this.state.max - lastStep;\n\n          if (value > beginningLastStep && value < this.state.max) {\n            const halfStep = lastStep / 2;\n            if (value > beginningLastStep + halfStep) {\n              currentValue = this.state.max;\n            } else {\n              currentValue = beginningLastStep;\n            }\n          }\n        } else {\n          currentValue = integer * this.state.step + this.state.min;\n        }\n\n        const stepOrZero =\n          Math.round(remainderOfDivision / this.state.step) * this.state.step;\n\n        value = Math.round((stepOrZero + currentValue) * 10) / 10;\n      }\n\n      if (value !== this.state.thumbsValues[index]) {\n        this.state.thumbsValues[index] = value;\n      }\n\n      this.notifyThumbsValuesChanged();\n    });\n  }\n\n  private notifyStateChanged(): void {\n    this.emitter.emit('model:state-changed', this.state);\n  }\n\n  private notifyThumbsValuesChanged(): void {\n    this.emitter.emit('model:thumbsValues-changed', this.state);\n  }\n}\nexport default Model;\n","/* функция CreateElement создает необходимый элемент с заданным классом */\nconst createElement = (teg: string, className: string): HTMLElement => {\n  const element: HTMLElement = document.createElement(teg);\n  element.className = className;\n  return element;\n};\nexport default createElement;\n","const utilities = {\n  /* the method calculates the current value of the thumb */\n  calculateValue(\n    currentValueAxis: number,\n    pointSize: number,\n    shiftToMinValue: number,\n  ): number {\n    const currentValue = (currentValueAxis + shiftToMinValue) / pointSize;\n\n    return currentValue;\n  },\n\n  calculateValueForClickOnScale(\n    currentValueAxis: number,\n    pointSize: number,\n    stepSlider: number,\n  ): number {\n    let currentValue: number = currentValueAxis / pointSize;\n    const minValue: number = Math.floor(currentValue / stepSlider) * stepSlider;\n    const halfStep = minValue + stepSlider / 2;\n\n    if (currentValue > halfStep) {\n      currentValue = minValue + stepSlider;\n    } else {\n      currentValue = minValue;\n    }\n\n    return currentValue;\n  },\n};\n\nexport default utilities;\n","import EventEmitter from '../EventEmitter';\nimport { IAdapter } from '../interfaces/IAdapter';\nimport { IModelState } from '../interfaces/iModelState';\nimport createElement from '../functions/createElement';\nimport utilities from './utilities/utilities';\n\nclass ProgressBar {\n  private slider: HTMLElement;\n\n  public progressBar!: HTMLElement;\n\n  private activeRange!: HTMLElement;\n\n  private emitter: EventEmitter;\n\n  public divisionsElements: HTMLElement[];\n\n  private valuesDivisions: number[];\n\n  private adapter!: IAdapter;\n\n  private step!: number;\n\n  private thumbsValues!: number[];\n\n  private min: number;\n\n  private max: number;\n\n  constructor(element: HTMLElement, emitter: EventEmitter) {\n    this.slider = element;\n    this.emitter = emitter;\n    this.divisionsElements = [];\n    this.valuesDivisions = [];\n    this.min = 0;\n    this.max = 0;\n  }\n\n  public renderProgressBar(state: IModelState, adapter: IAdapter): void {\n    this.adapter = adapter;\n    this.step = state.step;\n    this.thumbsValues = state.thumbsValues;\n    this.min = state.min;\n    this.max = state.max;\n\n    this.createProgressBar(state.orientation);\n\n    if (state.isScaleOfValues) {\n      this.renderDivisions(state);\n    }\n  }\n\n  /* function createProgressBar adds scale elements to the main html slider structure */\n  private createProgressBar(orientation: string): void {\n    const progressBar: HTMLElement = createElement(\n      'div',\n      'slider__progress-bar js-slider__progress-bar',\n    );\n\n    const activeRange: HTMLElement = createElement(\n      'span',\n      'slider__active-range js-slider__active-range',\n    );\n\n    if (orientation === 'vertical') {\n      progressBar.classList.add('slider__progress-bar_vertical');\n    }\n\n    this.progressBar = progressBar;\n    this.activeRange = activeRange;\n    progressBar.append(activeRange);\n    this.slider.append(progressBar);\n\n    this.listenProgressBarClick();\n  }\n\n  private listenProgressBarClick(): void {\n    this.progressBar.addEventListener(\n      'click',\n      this.handleProgressBarClick.bind(this),\n      true,\n    );\n  }\n\n  public updateActiveRange(\n    thumbsValues: number[],\n    min: number,\n    max: number,\n  ): void {\n    const firstThumb = thumbsValues[0];\n    const lastThumb = thumbsValues[thumbsValues.length - 1];\n\n    const firstThumbPosition = ((firstThumb - min) / (max - min)) * 100;\n    const lastThumbPosition = ((lastThumb - min) / (max - min)) * 100;\n\n    let margin = 0;\n    let lengthActiveRange;\n\n    if (thumbsValues.length === 1) {\n      lengthActiveRange = firstThumbPosition;\n    } else if (thumbsValues.length > 1) {\n      margin = firstThumbPosition;\n\n      lengthActiveRange = lastThumbPosition - firstThumbPosition;\n    }\n\n    this.activeRange.style[this.adapter.margin] = `${margin}%`;\n    this.activeRange.style[this.adapter.length] = `${lengthActiveRange}%`;\n  }\n\n  private renderDivisions(state: IModelState): void {\n    const { max, min, step, orientation } = state;\n\n    let stepForScaleValue;\n    const maximumNumberOfDivisions = 10;\n\n    let countSteps = (max - min) / step;\n\n    if (countSteps > maximumNumberOfDivisions) {\n      countSteps = maximumNumberOfDivisions;\n    }\n\n    stepForScaleValue =\n      Math.floor(step * Math.ceil(countSteps / step) * 100) / 10;\n\n    const fractionalPart = Math.ceil(stepForScaleValue) - stepForScaleValue;\n\n    if (fractionalPart >= 0.5) {\n      stepForScaleValue = Math.floor(stepForScaleValue) / 10;\n    } else {\n      stepForScaleValue = Math.ceil(stepForScaleValue) / 10;\n    }\n\n    const scaleValueContainer: HTMLElement = createElement(\n      'div',\n      'slider__scale-value-container js-slider__scale-value-container',\n    );\n    if (orientation === 'vertical') {\n      scaleValueContainer.classList.add(\n        'slider__scale-value-container_vertical',\n      );\n    }\n    const htmlFragment = this.createElementsDivisions(stepForScaleValue, state);\n    scaleValueContainer.append(htmlFragment);\n    this.slider.append(scaleValueContainer);\n\n    this.setDivisionsInPlaces();\n  }\n\n  private createElementsDivisions(\n    stepForScaleValue: number,\n    state: IModelState,\n  ): DocumentFragment {\n    const { max, min, step, orientation } = state;\n    const lastStep = max - min - ((max - min) / step) * step;\n\n    let numberOfDivisions: number =\n      Math.ceil((max - min) / stepForScaleValue) + 1;\n\n    if (lastStep > 0) {\n      numberOfDivisions += 1;\n    }\n\n    let currentValueSerif: number = min;\n\n    const fractionalPartStep =\n      stepForScaleValue - Math.floor(stepForScaleValue);\n\n    new Array(numberOfDivisions)\n      .fill(1)\n      .forEach((_element: number, index: number) => {\n        if (index === 0) {\n          this.valuesDivisions[index] = min;\n          currentValueSerif += stepForScaleValue;\n          currentValueSerif = Math.ceil(currentValueSerif * 10) / 10;\n        } else if (index === numberOfDivisions - 1) {\n          this.valuesDivisions[index] = max;\n        } else {\n          this.valuesDivisions[index] = currentValueSerif;\n          currentValueSerif += stepForScaleValue;\n\n          if (fractionalPartStep === 0) {\n            currentValueSerif = Math.ceil(currentValueSerif * 10) / 10;\n          } else {\n            let newValue = Math.floor(currentValueSerif * 100) / 10;\n\n            const fractionalValuePart = Math.ceil(newValue) - newValue;\n\n            if (fractionalValuePart >= 0.5) {\n              newValue = Math.floor(newValue) / 10;\n            } else {\n              newValue = Math.ceil(newValue) / 10;\n            }\n            currentValueSerif = newValue;\n          }\n        }\n      });\n\n    const htmlFragment = document.createDocumentFragment();\n    this.valuesDivisions.forEach(element => {\n      const scaleValue: HTMLElement = createElement(\n        'div',\n        'slider__scale-value js-slider__scale-value',\n      );\n\n      const valueWithNumber: HTMLElement = createElement(\n        'span',\n        'slider__scale-value-with-number js-slider__scale-value-with-number',\n      );\n\n      if (orientation === 'vertical') {\n        scaleValue.classList.add('slider__scale-value_vertical');\n        valueWithNumber.classList.add(\n          'slider__scale-value-with-number_vertical',\n        );\n      }\n      valueWithNumber.innerHTML = String(Math.floor(element * 10) / 10);\n      scaleValue.append(valueWithNumber);\n      htmlFragment.append(scaleValue);\n      this.divisionsElements.push(scaleValue);\n    });\n    this.listenScaleValueEvents();\n    return htmlFragment;\n  }\n\n  private setDivisionsInPlaces(): void {\n    this.divisionsElements.forEach((element, i) => {\n      const pointSize =\n        this.progressBar[this.adapter.offsetLength] / (this.max - this.min);\n\n      const shiftToMinValue = pointSize * this.min;\n\n      const serif = element;\n      let indent;\n\n      if (i === this.divisionsElements.length - 1) {\n        indent = pointSize * this.valuesDivisions[i] - shiftToMinValue - 1;\n      } else {\n        indent = pointSize * this.valuesDivisions[i] - shiftToMinValue;\n      }\n\n      const position = (indent * 100) / this.progressBar.clientWidth;\n\n      serif.style[this.adapter.margin] = `${position}%`;\n    });\n  }\n\n  private listenScaleValueEvents(): void {\n    this.divisionsElements.forEach((element, index) => {\n      element.addEventListener(\n        'click',\n        this.handleSerifScaleClick.bind(this, index, this.valuesDivisions),\n        true,\n      );\n    });\n  }\n\n  public findAndSetTheNearestThumb(currentValue: number): void {\n    const leftSpacing: number[] = [];\n    const rightSpacing: number[] = [];\n\n    this.thumbsValues.forEach((thumbValue: number) => {\n      const valueLeftSpacing = thumbValue - currentValue;\n      leftSpacing.push(Math.abs(valueLeftSpacing));\n\n      const valueRightSpacing = thumbValue + currentValue;\n      rightSpacing.push(Math.abs(valueRightSpacing));\n    });\n\n    let currentSpacingValue: number | null = null;\n    let currentThumbIndex: number | null = null;\n\n    const checkValueSpacing = (element: number, index: number) => {\n      if (currentSpacingValue === null) {\n        currentSpacingValue = element;\n      }\n      if (currentThumbIndex === null) {\n        currentThumbIndex = index;\n      }\n      if (element < currentSpacingValue) {\n        currentSpacingValue = element;\n        currentThumbIndex = index;\n      }\n    };\n    leftSpacing.forEach((element, index) => {\n      checkValueSpacing(element, index);\n    });\n    rightSpacing.forEach((element, index) => {\n      checkValueSpacing(element, index);\n    });\n\n    if (currentThumbIndex !== null) {\n      if (currentSpacingValue !== currentValue) {\n        this.emitter.emit('view:thumbValue-changed', {\n          value: currentValue,\n          index: currentThumbIndex,\n        });\n      }\n    }\n  }\n\n  private handleProgressBarClick(event: MouseEvent): void {\n    let clickLocationAxis = 0;\n\n    const startAxis = this.progressBar.getBoundingClientRect();\n    const offsetX = event.clientX - startAxis.x;\n\n    const pointSize =\n      this.progressBar[this.adapter.offsetLength] / (this.max - this.min);\n    const shiftToMinValue = pointSize * this.min;\n\n    clickLocationAxis = offsetX + shiftToMinValue;\n\n    const currentValue: number = utilities.calculateValueForClickOnScale(\n      clickLocationAxis,\n      pointSize,\n      this.step,\n    );\n\n    this.findAndSetTheNearestThumb(currentValue);\n  }\n\n  private handleSerifScaleClick(index: number, valuesSerifs: number[]): void {\n    this.findAndSetTheNearestThumb(valuesSerifs[index]);\n  }\n}\nexport default ProgressBar;\n","import EventEmitter from '../EventEmitter';\nimport createElement from '../functions/createElement';\nimport { IModelState } from '../interfaces/iModelState';\nimport { IAdapter } from '../interfaces/IAdapter';\nimport utilities from './utilities/utilities';\n\nclass Thumbs {\n  private slider: HTMLElement;\n\n  private emitter: EventEmitter;\n\n  private adapter!: IAdapter;\n\n  private thumbs: HTMLElement[];\n\n  private startMoveAxis: number;\n\n  private target: HTMLElement | null;\n\n  private indexActiveThumb: number | null;\n\n  private min: number;\n\n  private max: number;\n\n  constructor(element: HTMLElement, eventEmitter: EventEmitter) {\n    this.slider = element;\n    this.emitter = eventEmitter;\n    this.thumbs = [];\n    this.startMoveAxis = 0;\n    this.target = null;\n    this.indexActiveThumb = null;\n    this.min = 0;\n    this.max = 0;\n  }\n\n  public renderThumbs(state: IModelState, adapter: IAdapter): void {\n    this.adapter = adapter;\n    this.min = state.min;\n    this.max = state.max;\n\n    this.createThumbs(state.thumbsCount);\n    this.listenThumbsEvents();\n    this.setValuesThumbs(state.thumbsValues, state.min, state.max);\n  }\n\n  /* the CreateSlider function adds sliders to the parent of the slider */\n  private createThumbs(thumbsCount: number): void {\n    const htmlFragment = document.createDocumentFragment();\n    new Array(thumbsCount).fill(1).forEach(() => {\n      const thumb: HTMLElement = createElement(\n        'div',\n        'slider__thumb js-slider__thumb',\n      );\n\n      this.thumbs.push(thumb);\n      htmlFragment.append(thumb);\n    });\n    this.slider.append(htmlFragment);\n  }\n\n  /* hangs the 'mousedown' event handler for each created thumb */\n  private listenThumbsEvents(): void {\n    this.thumbs.forEach((element: HTMLElement, i: number) => {\n      element.addEventListener(\n        'mousedown',\n        this.handleThumbStart.bind(this, i),\n      );\n    });\n  }\n\n  /* places thumbs on the slider based on default values */\n  public setValuesThumbs(\n    thumbsValues: number[],\n    min: number,\n    max: number,\n  ): void {\n    this.thumbs.forEach((_element, i) => {\n      if (this.adapter?.direction !== undefined) {\n        const element = this.thumbs[i];\n\n        const percent = ((thumbsValues[i] - min) / (max - min)) * 100;\n\n        element.style[\n          this.adapter?.direction\n        ] = `calc((${percent}%) - (24px * ${percent / 100}))`;\n      }\n    });\n  }\n\n  private processStart(event: MouseEvent, index: number): void {\n    event.preventDefault();\n    this.indexActiveThumb = index;\n\n    this.target = this.thumbs[index];\n\n    const currentValueAxis = this.target[this.adapter?.offsetDirection];\n\n    this.startMoveAxis = event.pageX - currentValueAxis;\n\n    document.addEventListener('mousemove', this.handleThumbMove.bind(this));\n    document.addEventListener('mouseup', this.handleThumbStop.bind(this));\n  }\n\n  private processMove(event: MouseEvent): void {\n    if (this.indexActiveThumb !== null && this.target !== null) {\n      const currentValueAxis =\n        event[this.adapter?.pageAxis] - this.startMoveAxis;\n\n      const progressBar: HTMLElement | null = this.slider.querySelector(\n        '.slider__progress-bar',\n      );\n\n      if (progressBar !== null) {\n        const pointSize =\n          progressBar[this.adapter.offsetLength] / (this.max - this.min);\n        const shiftToMinValue = pointSize * this.min;\n\n        const value = utilities.calculateValue(\n          currentValueAxis,\n          pointSize,\n          shiftToMinValue,\n        );\n\n        this.emitter.emit('view:thumbValue-changed', {\n          value,\n          index: this.indexActiveThumb,\n        });\n      }\n    }\n  }\n\n  private processStop(): void {\n    this.target = null;\n    this.indexActiveThumb = null;\n\n    document.removeEventListener('mousemove', this.handleThumbMove.bind(this));\n    document.removeEventListener('mouseup', this.handleThumbStop.bind(this));\n  }\n\n  private handleThumbStart(index: number, event: MouseEvent): void {\n    this.processStart(event, index);\n  }\n\n  private handleThumbMove(event: MouseEvent): void {\n    this.processMove(event);\n  }\n\n  private handleThumbStop(): void {\n    this.processStop.call(this);\n  }\n}\nexport default Thumbs;\n","import createElement from '../functions/createElement';\nimport { IModelState } from '../interfaces/iModelState';\n\nclass Tooltips {\n  private slider: HTMLElement;\n\n  private tooltipsElements: HTMLElement[];\n\n  private textInTooltips!: HTMLElement[];\n\n  constructor(element: HTMLElement) {\n    this.slider = element;\n    this.tooltipsElements = [];\n    this.textInTooltips = [];\n  }\n\n  public renderTooltips(state: IModelState): void {\n    if (state.isTooltip) {\n      this.createTooltips(state.thumbsCount, state.orientation);\n      this.setTooltipsValues(state.thumbsValues);\n    }\n  }\n\n  /* createTooltips function adds tooltip elements to the main html slider structure */\n  private createTooltips(thumbsCount: number, orientation: string): void {\n    new Array(thumbsCount).fill(1).forEach((_element: number, i: number) => {\n      const tooltip: HTMLElement = createElement(\n        'div',\n        'slider__tooltip js-slider__tooltip',\n      );\n      const textInTooltips: HTMLElement = createElement(\n        'span',\n        'slider__tooltip-text js-slider__tooltip-text',\n      );\n      if (orientation === 'vertical') {\n        textInTooltips.classList.add('slider__tooltip-text_vertical');\n      }\n\n      tooltip.append(textInTooltips);\n      const thumbs = this.slider.querySelectorAll('.js-slider__thumb');\n      thumbs[thumbs.length - (thumbsCount - i)].append(tooltip);\n      this.tooltipsElements.push(tooltip);\n      this.textInTooltips.push(textInTooltips);\n    });\n  }\n\n  /* sets the default sliders for their respective tooltips */\n  public setTooltipsValues(tooltipsValues: number[]): void {\n    tooltipsValues.forEach((element: number, i: number) => {\n      this.textInTooltips[i].innerHTML = String(element);\n    });\n  }\n}\nexport default Tooltips;\n","import EventEmitter from '../EventEmitter';\nimport { IAdapter } from '../interfaces/IAdapter';\nimport { IModelState } from '../interfaces/iModelState';\nimport ProgressBar from './ProgressBar';\nimport Thumbs from './Thumbs';\nimport Tooltips from './Tooltips';\n\nclass View {\n  private slider: HTMLElement;\n\n  private emitter: EventEmitter;\n\n  private progressBar!: ProgressBar;\n\n  private thumbs!: Thumbs;\n\n  private tooltips!: Tooltips;\n\n  private adapter!: IAdapter;\n\n  constructor(slider: HTMLElement, eventEmitter: EventEmitter) {\n    this.slider = slider;\n    this.emitter = eventEmitter;\n\n    this.emitter.makeSubscribe('model:state-changed', (state: IModelState) => {\n      this.initialize(state);\n      this.render(state);\n    });\n\n    this.emitter.makeSubscribe(\n      'model:thumbsValues-changed',\n      (state: IModelState) => {\n        this.update(state);\n      },\n    );\n  }\n\n  private initialize(state: IModelState) {\n    this.slider.innerHTML = '';\n    this.setAdapter(state.orientation);\n\n    this.progressBar = new ProgressBar(this.slider, this.emitter);\n    this.thumbs = new Thumbs(this.slider, this.emitter);\n    this.tooltips = new Tooltips(this.slider);\n  }\n\n  private render(state: IModelState): void {\n    this.progressBar.renderProgressBar.call(\n      this.progressBar,\n      state,\n      this.adapter,\n    );\n\n    this.thumbs.renderThumbs.call(this.thumbs, state, this.adapter);\n    this.progressBar.updateActiveRange(\n      state.thumbsValues,\n      state.min,\n      state.max,\n    );\n    this.tooltips.renderTooltips.call(this.tooltips, state);\n  }\n\n  private update(state: IModelState): void {\n    this.thumbs.setValuesThumbs(state.thumbsValues, state.min, state.max);\n    this.tooltips.setTooltipsValues(state.thumbsValues);\n    this.progressBar.updateActiveRange(\n      state.thumbsValues,\n      state.min,\n      state.max,\n    );\n  }\n\n  private setAdapter(orientation: string): void {\n    if (orientation === 'horizontal') {\n      this.adapter = {\n        offsetDirection: 'offsetLeft',\n        offsetAxis: 'offsetX',\n        offsetLength: 'offsetWidth',\n        pageAxis: 'pageX',\n        currentAxis: 'currentX',\n        direction: 'left',\n        margin: 'marginLeft',\n        length: 'width',\n      };\n    } else if (orientation === 'vertical') {\n      this.adapter = {\n        offsetDirection: 'offsetTop',\n        offsetAxis: 'offsetY',\n        offsetLength: 'offsetHeight',\n        pageAxis: 'pageY',\n        currentAxis: 'currentY',\n        direction: 'top',\n        margin: 'marginTop',\n        length: 'height',\n      };\n    }\n  }\n}\nexport default View;\n","import { IModelState } from './interfaces/iModelState';\nimport Model from './Model/Model';\nimport View from './view/View';\nimport EventEmitter from './EventEmitter';\n\ninterface IData {\n  value: number;\n  index: number;\n}\n\nclass Controller {\n  public slider: HTMLElement;\n\n  public model: Model;\n\n  constructor(element: HTMLElement, eventEmitter: EventEmitter) {\n    this.slider = element;\n    this.slider.classList.add('slider');\n\n    new View(this.slider, eventEmitter);\n    this.model = new Model(eventEmitter);\n\n    eventEmitter.makeSubscribe('view:thumbValue-changed', (data: IData) => {\n      this.model.requestThumbValueChange(data.value, data.index);\n    });\n  }\n\n  public getState(): IModelState {\n    return this.model.state;\n  }\n\n  public updateState(state: IModelState): void {\n    this.model.updateState(state);\n  }\n}\nexport default Controller;\n","import { IModelState } from './interfaces/iModelState';\n\ninterface IData {\n  value: number;\n  index: number;\n}\ntype CallbackFunctionVariadic = (...args: any[]) => void;\ninterface StringArray {\n  [index: string]: CallbackFunctionVariadic[];\n}\nclass EventEmitter {\n  public handlersByEvent: StringArray;\n\n  constructor() {\n    this.handlersByEvent = {};\n  }\n\n  public makeSubscribe(\n    eventName: string,\n    fn: CallbackFunctionVariadic,\n  ): () => void {\n    if (!this.handlersByEvent[eventName]) {\n      this.handlersByEvent[eventName] = [];\n    }\n\n    this.handlersByEvent[eventName].push(fn);\n    return (): void => {\n      this.handlersByEvent[eventName] = this.handlersByEvent[eventName].filter(\n        eventFn => fn !== eventFn,\n      );\n    };\n  }\n\n  public emit(\n    eventName: string,\n    data: IModelState | IData | number | number[] | MouseEvent,\n    value?: number[],\n  ): void {\n    const handlers: CallbackFunctionVariadic[] = this.handlersByEvent[\n      eventName\n    ];\n    if (handlers) {\n      handlers.forEach(fn => {\n        fn.call(null, data, value);\n      });\n    }\n  }\n}\nexport default EventEmitter;\n","import Controller from './Controller';\nimport { IModelState } from './interfaces/iModelState';\nimport EventEmitter from './EventEmitter';\n\nclass Wrapper {\n  public slider: HTMLElement;\n\n  private emitter: EventEmitter;\n\n  private controller: Controller;\n\n  public getStateAction: () => void;\n\n  public updateAction: (state: IModelState) => void;\n\n  public modelChangesAction: (handler: (state: IModelState) => void) => void;\n\n  public thumbsChangesAction: (\n    handler: (thumbsValues: number[]) => void,\n  ) => void;\n\n  constructor(element: HTMLElement, props: IModelState) {\n    this.slider = element;\n\n    this.emitter = new EventEmitter();\n    this.controller = new Controller(this.slider, this.emitter);\n\n    this.getStateAction = this.getState.bind(this);\n    this.updateAction = this.update.bind(this);\n    this.modelChangesAction = this.subscribeToModelChanges.bind(this);\n    this.thumbsChangesAction = this.subscribeToThumbsChanges.bind(this);\n\n    this.update(props);\n  }\n\n  private getState(): IModelState {\n    return this.controller.getState();\n  }\n\n  private update(state: IModelState): void {\n    this.controller.updateState(state);\n  }\n\n  private subscribeToModelChanges(handler: (state: IModelState) => void): void {\n    this.emitter.makeSubscribe('model:state-changed', (state: IModelState) => {\n      handler(state);\n    });\n  }\n\n  private subscribeToThumbsChanges(\n    handler: (thumbsValues: number[]) => void,\n  ): void {\n    this.emitter.makeSubscribe(\n      'model:thumbsValues-changed',\n      (thumbsValues: number[]) => {\n        handler(thumbsValues);\n      },\n    );\n  }\n}\n\nexport default Wrapper;\n","import Wrapper from './Wrapper';\n\n(function callSlider($) {\n  const $jquery = $;\n  $jquery.fn.slider = function renderSlider(): globalThis.JQuery<HTMLElement> {\n    const element = (this[0] as unknown) as HTMLElement;\n    const data = this.data();\n    const settings = $.extend(\n      true,\n      {\n        min: 0,\n        max: 100,\n        thumbsValues: [20, 32, 44, 60],\n        orientation: 'horizontal',\n        thumbsCount: 4,\n        step: 2,\n        isTooltip: true,\n        isScaleOfValues: true,\n      },\n      data,\n    );\n    const wrapper = new Wrapper(element, settings);\n    this.data('getState', wrapper.getStateAction);\n    this.data('update', wrapper.updateAction);\n    this.data('subscribeToModelChanges', wrapper.modelChangesAction);\n    this.data('subscribeToThumbsChanges', wrapper.thumbsChangesAction);\n    return this;\n  };\n  $jquery.fn.extend($jquery.fn.slider);\n})(jQuery);\n","import ConfigurationPanel from '../components/configuration-panel/configuration-panel';\nimport '../../slider/slider';\n\nconst $elementsSlider = $('.js-slider-test');\n$elementsSlider.each((index, element) => {\n  new ConfigurationPanel(\n    $(element).slider().css({ backgroundColor: '#ffe9f4' }),\n    index,\n  );\n});\n"]}