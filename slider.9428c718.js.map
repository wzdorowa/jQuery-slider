{"version":3,"sources":["slider/Model.ts","slider/functions/createElement.ts","slider/view/drivers/driverHorizontal.ts","slider/view/drivers/driverVertical.ts","slider/view/utilities/utilities.ts","slider/view/Scale.ts","slider/view/Thumbs.ts","slider/view/Tooltips.ts","slider/view/View.ts","slider/EventEmitter.ts","slider/Controller.ts","slider/slider.ts"],"names":[],"mappings":"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","file":"slider.9428c718.js","sourceRoot":"../src","sourcesContent":["import { IModelState } from './interfaces/iModelState';\nimport EventEmitter from './EventEmitter';\n\nclass Model {\n  public state: IModelState;\n\n  private emitter: EventEmitter;\n\n  constructor(\n    eventEmitter: EventEmitter,\n    props = {\n      min: 0,\n      max: 100,\n      thumbsValues: [20, 32, 44, 60],\n      orientation: 'horizontal',\n      thumbsCount: 4,\n      step: 2,\n      isTooltip: true,\n      isScaleOfValues: true,\n    },\n  ) {\n    this.state = {\n      min: props.min,\n      max: props.max,\n      thumbsValues: props.thumbsValues,\n      orientation: props.orientation,\n      thumbsCount: props.thumbsCount,\n      step: props.step,\n      isTooltip: props.isTooltip,\n      isScaleOfValues: props.isScaleOfValues,\n    };\n\n    this.emitter = eventEmitter;\n    this.setNewValueMin(this.state.min);\n    // this.setNewValueMax(this.state.max);\n    this.setNewValueCount(this.state.thumbsCount);\n    this.setNewValueStep(this.state.step);\n    this.checkThumbsValues(this.state.thumbsValues);\n  }\n\n  // set new min value\n  public setNewValueMin(min: number): void {\n    let correctMinValue = min;\n    const isInteger = min - Math.floor(min) === 0;\n    if (!isInteger) {\n      correctMinValue -= min - Math.floor(min);\n    }\n\n    if (correctMinValue > this.state.thumbsValues[0]) {\n      this.state.thumbsValues[0] = this.state.min;\n      this.checkThumbsValues(this.state.thumbsValues);\n    }\n\n    if (this.state.min === min) {\n      return;\n    }\n\n    this.state.min = correctMinValue;\n    this.notifyStateChanged();\n  }\n\n  // set new value max\n  public setNewValueMax(max: number): void {\n    let correctMaxValue = max;\n    const isInteger = max - Math.floor(max) === 0;\n    if (!isInteger) {\n      correctMaxValue -= max - Math.floor(max);\n    }\n\n    if (\n      this.state.max <\n      this.state.thumbsValues[this.state.thumbsValues.length - 1]\n    ) {\n      this.state.thumbsValues[\n        this.state.thumbsValues.length - 1\n      ] = this.state.max;\n      this.checkThumbsValues(this.state.thumbsValues);\n    }\n    this.state.max = correctMaxValue;\n    this.notifyStateChanged();\n  }\n\n  // set a new number of thumbs\n  public setNewValueCount(thumbsCount: number): void {\n    let correctThumbsCount = thumbsCount;\n    const isInteger = thumbsCount - Math.floor(thumbsCount) === 0;\n    if (!isInteger) {\n      correctThumbsCount -= thumbsCount - Math.floor(thumbsCount);\n    }\n\n    if (correctThumbsCount <= 0) {\n      correctThumbsCount = 1;\n    }\n\n    const maximumCountOfThumbs = Math.floor(\n      (this.state.max - this.state.min) / this.state.step,\n    );\n\n    if (maximumCountOfThumbs < correctThumbsCount) {\n      correctThumbsCount = maximumCountOfThumbs;\n\n      if (correctThumbsCount < this.state.thumbsValues.length) {\n        this.state.thumbsValues.splice(\n          this.state.thumbsCount,\n          this.state.thumbsValues.length - this.state.thumbsCount,\n        );\n      }\n    }\n\n    // установить значения для новых ползунков\n    if (this.state.thumbsValues.length < correctThumbsCount) {\n      const missingQuantityThumbs =\n        correctThumbsCount - this.state.thumbsValues.length;\n\n      new Array(missingQuantityThumbs).fill(1).forEach(() => {\n        this.state.thumbsValues[this.state.thumbsValues.length] =\n          this.state.thumbsValues[this.state.thumbsValues.length - 1] +\n          this.state.step;\n      });\n    }\n\n    if (this.state.thumbsValues.length > correctThumbsCount) {\n      if (correctThumbsCount > 0) {\n        const excessThumbs =\n          this.state.thumbsValues.length - correctThumbsCount;\n        new Array(excessThumbs).fill(1).forEach(() => {\n          this.state.thumbsValues.splice(-1, 1);\n        });\n      }\n      if (correctThumbsCount <= 0) {\n        this.state.thumbsValues.splice(1, this.state.thumbsValues.length - 1);\n      }\n    }\n    this.state.thumbsCount = correctThumbsCount;\n  }\n\n  // set a new value for the thumb state\n  public setNewThumbValue(thumbValue: number, index: number): void {\n    if (this.state.thumbsValues[index] === thumbValue) {\n      return;\n    }\n\n    this.state.thumbsValues[index] = thumbValue;\n\n    for (let i = index; i < this.state.thumbsValues.length; i += 1) {\n      if (this.state.thumbsValues[i] >= this.state.thumbsValues[i + 1]) {\n        this.state.thumbsValues[i + 1] =\n          this.state.thumbsValues[i] + this.state.step;\n      }\n    }\n\n    for (let i = index; i > 0; i -= 1) {\n      if (this.state.thumbsValues[i] <= this.state.thumbsValues[i - 1]) {\n        this.state.thumbsValues[i - 1] =\n          this.state.thumbsValues[i] - this.state.step;\n      }\n    }\n    // this.notifyStateChanged();\n    this.checkThumbsValues(this.state.thumbsValues);\n  }\n\n  // set a new value for the step of moving the thumbs\n  public setNewValueStep(step: number): void {\n    this.state.step = step;\n\n    if (this.state.step <= 0) {\n      this.state.step = 1;\n    }\n    if (this.state.step > this.state.max / this.state.thumbsCount) {\n      this.state.step = this.state.max / this.state.thumbsCount;\n    }\n    this.checkThumbsValues(this.state.thumbsValues);\n  }\n\n  // set a new value for the tooltip field\n  public setNewValueTooltip(value: boolean): void {\n    if (value !== this.state.isTooltip) {\n      this.state.isTooltip = value;\n      this.notifyStateChanged();\n    }\n  }\n\n  // set a new value for the tooltip field\n  public setNewValueScaleOfValues(value: boolean): void {\n    if (value !== this.state.isScaleOfValues) {\n      this.state.isScaleOfValues = value;\n      this.notifyStateChanged();\n    }\n  }\n\n  // set new value for orientation field\n  public setNewValueOrientation(value: string): void {\n    if (value === 'horizontal') {\n      this.state.orientation = 'horizontal';\n    } else if (value === 'vertical') {\n      this.state.orientation = 'vertical';\n    }\n    this.notifyStateChanged();\n  }\n\n  // Calculate thumbs values based on step size\n  private checkThumbsValues(thumbsValues: number[]): void {\n    thumbsValues.forEach((element: number, index: number) => {\n      let value: number = Math.floor(element * 10) / 10;\n\n      const minPossibleValue = this.state.min + index * this.state.step;\n\n      const lastStep =\n        Math.round(((this.state.max - this.state.min) % this.state.step) * 10) /\n        10;\n\n      let maxPossibleValue;\n      if (lastStep > 0) {\n        if (index === thumbsValues.length - 1) {\n          maxPossibleValue = this.state.max;\n        } else {\n          maxPossibleValue =\n            this.state.max -\n            (thumbsValues.length - index - 1) * this.state.step +\n            lastStep;\n        }\n      } else {\n        maxPossibleValue =\n          this.state.max - (thumbsValues.length - index - 1) * this.state.step;\n      }\n\n      const valuesInterval = Math.round((value - this.state.min) * 10) / 10;\n      const integer = Math.floor(valuesInterval / this.state.step);\n\n      const getRemainderOfDivision = (interval: number, step: number) => {\n        return Math.abs(\n          Math.round((interval - integer * step) * 10000) / 10000,\n        );\n      };\n\n      const remainderOfDivision = getRemainderOfDivision(\n        valuesInterval,\n        this.state.step,\n      );\n\n      const currentValue = integer * this.state.step + this.state.min;\n\n      const stepOrZero =\n        Math.round(remainderOfDivision / this.state.step) * this.state.step;\n\n      value = Math.round((stepOrZero + currentValue) * 10) / 10;\n\n      if (value < minPossibleValue) {\n        value = minPossibleValue;\n        this.state.thumbsValues[index] = value;\n      } else {\n        this.state.thumbsValues[index] = value;\n      }\n\n      if (value >= maxPossibleValue) {\n        value = maxPossibleValue;\n      }\n\n      if (value !== this.state.thumbsValues[index]) {\n        this.state.thumbsValues[index] = value;\n      }\n\n      this.notifyStateChanged();\n    });\n  }\n\n  private notifyStateChanged(): void {\n    this.emitter.emit('model:state-changed', this.state);\n  }\n}\nexport default Model;\n","/* функция CreateElement создает необходимый элемент с заданным классом */\nconst createElement = (teg: string, className: string): HTMLElement => {\n  const element: HTMLElement = document.createElement(teg);\n  element.className = className;\n  return element;\n};\nexport default createElement;\n","import { IDriver } from '../../interfaces/iDriver';\nimport createElement from '../../functions/createElement';\n\nconst driverHorizontal: IDriver = {\n  getElementOffset(element: HTMLElement): number {\n    return element.offsetLeft;\n  },\n  getOffsetNextThumb(element: HTMLElement, stepWidth: number): number {\n    return this.getElementOffset(element) - stepWidth;\n  },\n  getOffsetPreviousThumb(element: HTMLElement, stepWidth: number): number {\n    return this.getElementOffset(element) + stepWidth;\n  },\n  createElementTooltipText(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__tooltip-text js-slider__tooltip-text',\n    );\n    return element;\n  },\n  createElementScale(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'div',\n      'slider__scale js-slider__scale',\n    );\n    return element;\n  },\n  createElementScaleValue(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'div',\n      'slider__scale-value js-slider__scale-value',\n    );\n    return element;\n  },\n  createElementScaleValueContainer(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'div',\n      'slider__scale-value-container js-slider__scale-value-container',\n    );\n    return element;\n  },\n  createElementScaleValueWithNumber(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__scale-value-with-number js-slider__scale-value-with-number',\n    );\n    return element;\n  },\n  createElementActiveRange(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__active-range js-slider__active-range',\n    );\n    return element;\n  },\n  searchElementsTooltipText(slider: HTMLElement): HTMLElement[] {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-tooltip-text'),\n    );\n    return $elements;\n  },\n  calculateCoefficientPoint(\n    slider: HTMLElement,\n    max: number,\n    min: number,\n  ): number {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__scale'),\n    );\n    const scale = $elements[0];\n    return scale.offsetWidth / (max - min);\n  },\n  searchElementScaleToDelete(slider: HTMLElement): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find(\n      '.js-slider__vertical-scale',\n    );\n    return $element;\n  },\n  searchElementActiveRangeToDelete(slider: HTMLElement): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find(\n      '.js-slider__vertical-active-range',\n    );\n    return $element;\n  },\n  searchElementScaleValueToDelete(slider: HTMLElement): HTMLElement[] {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__scale-value'),\n    );\n    return $elements;\n  },\n  searchElementScaleValueContainerToDelete(\n    slider: HTMLElement,\n  ): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find(\n      '.js-slider__vertical-scale-value-container',\n    );\n    return $element;\n  },\n  searchElementScaleValueBaseContainerToDelete(\n    slider: HTMLElement,\n  ): HTMLElement {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__scale-value-container'),\n    );\n    return $elements[0];\n  },\n  setInPlaceElement({\n    elements,\n    currentThumbIndex,\n    coefficientPoint,\n    elementsValues,\n    shiftToMinValue,\n  }: {\n    elements: HTMLElement[];\n    currentThumbIndex: number | null;\n    coefficientPoint: number;\n    elementsValues: number[];\n    shiftToMinValue: number;\n  }): void {\n    new Array(elements.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        if (i !== currentThumbIndex) {\n          const element = elements[i];\n          let indentLeft = '';\n          if (i === elements.length - 1) {\n            indentLeft = String(\n              coefficientPoint * elementsValues[i] - shiftToMinValue - 1,\n            );\n          } else {\n            indentLeft = String(\n              coefficientPoint * elementsValues[i] - shiftToMinValue,\n            );\n          }\n          element.style.marginTop = '0px';\n          element.style.marginLeft = `${indentLeft}px`;\n        }\n      });\n  },\n  setInPlaceThumb({\n    elements,\n    currentThumbIndex,\n    coefficientPoint,\n    thumbsValues,\n    shiftToMinValue,\n    slider,\n  }: {\n    elements: HTMLElement[];\n    currentThumbIndex: number | null;\n    coefficientPoint: number;\n    thumbsValues: number[];\n    shiftToMinValue: number;\n    slider: HTMLElement;\n  }): void {\n    new Array(elements.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        if (i !== currentThumbIndex) {\n          const element = elements[i];\n          const indentLeft = String(\n            coefficientPoint * thumbsValues[i] - shiftToMinValue,\n          );\n          element.style.top = '';\n          element.style.left = `${indentLeft}px`;\n        }\n      });\n    this.updateActiveRange(slider);\n  },\n  getCurrentValueAxisToProcessStart(target: HTMLElement): number {\n    return target.offsetLeft;\n  },\n  getStartValueAxisToProcessStart(\n    eventThumb: MouseEvent,\n    currentXorY: number,\n  ): number {\n    return eventThumb.pageX - currentXorY;\n  },\n  getMaxValueAxisToProcessStart(slider: HTMLElement): number {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__scale'),\n    );\n    const scale = $elements[0];\n    return scale.offsetWidth;\n  },\n  getCurrentValueAxisToProcessMove(\n    eventThumb: MouseEvent,\n    startXorY: number,\n  ): number {\n    return eventThumb.pageX - startXorY;\n  },\n  setIndentForTarget(\n    target: HTMLElement,\n    currentXorY: number,\n    slider: HTMLElement,\n  ): void {\n    const element = target;\n    const indentLeft = String(currentXorY);\n    element.style.left = `${indentLeft}px`;\n\n    this.updateActiveRange(slider);\n  },\n  setIndentForTargetToProcessStop({\n    target,\n    coefficientPoint,\n    currentValue,\n    shiftToMinValue,\n    slider,\n  }: {\n    target: HTMLElement;\n    coefficientPoint: number;\n    currentValue: number;\n    shiftToMinValue: number;\n    slider: HTMLElement;\n  }): void {\n    const element = target;\n    const indentLeft = String(\n      coefficientPoint * currentValue - shiftToMinValue,\n    );\n\n    element.style.left = `${indentLeft}px`;\n\n    this.updateActiveRange(slider);\n  },\n  updateActiveRange(slider: HTMLElement): void {\n    const $activeRangeElement: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__active-range'),\n    );\n    const range = $activeRangeElement[0];\n    const $allThumbs: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__thumb'),\n    );\n\n    range.style.marginTop = '';\n    range.style.height = '';\n\n    if ($allThumbs.length === 1) {\n      const widthActiveRange = String(\n        driverHorizontal.getElementOffset($allThumbs[0]),\n      );\n      range.style.marginLeft = `0px`;\n      range.style.width = `${widthActiveRange}px`;\n    } else if ($allThumbs.length > 1) {\n      const marginLeft = String(\n        driverHorizontal.getElementOffset($allThumbs[0]),\n      );\n      const widthActiveRange = String(\n        driverHorizontal.getElementOffset($allThumbs[$allThumbs.length - 1]) -\n          driverHorizontal.getElementOffset($allThumbs[0]),\n      );\n      range.style.marginLeft = `${marginLeft}px`;\n      range.style.width = `${widthActiveRange}px`;\n    }\n  },\n  calculateClickLocation(\n    event: MouseEvent,\n    target: HTMLElement,\n    shiftToMinValue: number,\n  ): number {\n    return event.offsetX + target.offsetLeft + shiftToMinValue;\n  },\n  calculateClickLocationOnScaleValue(\n    event: MouseEvent,\n    shiftToMinValue: number,\n    slider: HTMLElement,\n  ): number {\n    const scale = Array.from($(slider).find('.js-slider__scale'));\n    const startAxis = scale[0].getBoundingClientRect();\n\n    const offsetX = event.clientX - startAxis.x;\n\n    return offsetX + shiftToMinValue;\n  },\n  getOffsetFromClick(event: MouseEvent): number {\n    return event.offsetX;\n  },\n};\nexport default driverHorizontal;\n","import { IDriver } from '../../interfaces/iDriver';\nimport createElement from '../../functions/createElement';\n\nconst driverVertical: IDriver = {\n  getElementOffset(element: HTMLElement): number {\n    return element.offsetTop;\n  },\n  getOffsetNextThumb(element: HTMLElement, stepWidth: number): number {\n    return this.getElementOffset(element) - stepWidth;\n  },\n  getOffsetPreviousThumb(element: HTMLElement, stepWidth: number): number {\n    return this.getElementOffset(element) + stepWidth;\n  },\n  createElementTooltipText(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__vertical-tooltip-text js-slider__vertical-tooltip-text',\n    );\n    return element;\n  },\n  createElementScale(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'div',\n      'slider__vertical-scale js-slider__vertical-scale',\n    );\n    return element;\n  },\n  createElementScaleValue(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'div',\n      'slider__vertical-scale-value js-slider__vertical-scale-value',\n    );\n    return element;\n  },\n  createElementScaleValueContainer(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'div',\n      'slider__vertical-scale-value-container js-slider__vertical-scale-value-container',\n    );\n    return element;\n  },\n  createElementScaleValueWithNumber(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__vertical-scale-value-with-number js-slider__vertical-scale-value-with-number',\n    );\n    return element;\n  },\n  createElementActiveRange(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__vertical-active-range js-slider__vertical-active-range',\n    );\n    return element;\n  },\n  searchElementsTooltipText(slider: HTMLElement): HTMLElement[] {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__tooltip-text'),\n    );\n    return $elements;\n  },\n  searchElementScaleToDelete(slider: HTMLElement): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find('.js-slider__scale');\n    return $element;\n  },\n  searchElementActiveRangeToDelete(slider: HTMLElement): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find(\n      '.js-slider__active-range',\n    );\n    return $element;\n  },\n  searchElementScaleValueToDelete(slider: HTMLElement): HTMLElement[] {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-scale-value'),\n    );\n    return $elements;\n  },\n  searchElementScaleValueContainerToDelete(\n    slider: HTMLElement,\n  ): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find(\n      '.js-slider__scale-value-container',\n    );\n    return $element;\n  },\n  searchElementScaleValueBaseContainerToDelete(\n    slider: HTMLElement,\n  ): HTMLElement {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-scale-value-container'),\n    );\n    return $elements[0];\n  },\n  calculateCoefficientPoint(\n    slider: HTMLElement,\n    max: number,\n    min: number,\n  ): number {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-scale'),\n    );\n    const scale = $elements[0];\n\n    return scale.offsetHeight / (max - min);\n  },\n  setInPlaceElement({\n    elements,\n    currentThumbIndex,\n    coefficientPoint,\n    elementsValues,\n    shiftToMinValue,\n  }: {\n    elements: HTMLElement[];\n    currentThumbIndex: number | null;\n    coefficientPoint: number;\n    elementsValues: number[];\n    shiftToMinValue: number;\n  }): void {\n    new Array(elements.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        if (i !== currentThumbIndex) {\n          const element = elements[i];\n          let indentTop = '';\n          if (i === elements.length - 1) {\n            indentTop = String(\n              coefficientPoint * elementsValues[i] - shiftToMinValue - 1,\n            );\n          } else {\n            indentTop = String(\n              coefficientPoint * elementsValues[i] - shiftToMinValue,\n            );\n          }\n          element.style.marginLeft = '0px';\n          element.style.marginTop = `${indentTop}px`;\n        }\n      });\n  },\n  setInPlaceThumb({\n    elements,\n    currentThumbIndex,\n    coefficientPoint,\n    thumbsValues,\n    shiftToMinValue,\n    slider,\n  }: {\n    elements: HTMLElement[];\n    currentThumbIndex: number | null;\n    coefficientPoint: number;\n    thumbsValues: number[];\n    shiftToMinValue: number;\n    slider: HTMLElement;\n  }): void {\n    new Array(elements.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        if (i !== currentThumbIndex) {\n          const thumb = elements[i];\n          const indentTop = String(\n            coefficientPoint * thumbsValues[i] - shiftToMinValue,\n          );\n          thumb.style.left = '';\n          thumb.style.top = `${indentTop}px`;\n        }\n      });\n    this.updateActiveRange(slider);\n  },\n  getCurrentValueAxisToProcessStart(target: HTMLElement): number {\n    return target.offsetTop;\n  },\n  getStartValueAxisToProcessStart(\n    eventThumb: MouseEvent,\n    currentXorY: number,\n  ): number {\n    return eventThumb.pageY - currentXorY;\n  },\n  getMaxValueAxisToProcessStart(slider: HTMLElement): number {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-scale'),\n    );\n    const scale = $elements[0];\n    return scale.offsetHeight;\n  },\n  getCurrentValueAxisToProcessMove(\n    eventThumb: MouseEvent,\n    startXorY: number,\n  ): number {\n    return eventThumb.pageY - startXorY;\n  },\n  setIndentForTarget(\n    target: HTMLElement,\n    currentXorY: number,\n    slider: HTMLElement,\n  ): void {\n    const element = target;\n    const indentTop = String(currentXorY);\n    element.style.top = `${indentTop}px`;\n\n    this.updateActiveRange(slider);\n  },\n  setIndentForTargetToProcessStop({\n    target,\n    coefficientPoint,\n    currentValue,\n    shiftToMinValue,\n    slider,\n  }: {\n    target: HTMLElement;\n    coefficientPoint: number;\n    currentValue: number;\n    shiftToMinValue: number;\n    slider: HTMLElement;\n  }): void {\n    const element = target;\n    const indentTop = String(coefficientPoint * currentValue - shiftToMinValue);\n    element.style.top = `${indentTop}px`;\n\n    this.updateActiveRange(slider);\n  },\n  updateActiveRange(slider: HTMLElement): void {\n    const $activeRangeElement: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-active-range'),\n    );\n    const range = $activeRangeElement[0];\n    const $allThumbs: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__thumb'),\n    );\n\n    range.style.marginLeft = '';\n    range.style.width = '';\n\n    if ($allThumbs.length === 1) {\n      const heightActiveRange = String(\n        driverVertical.getElementOffset($allThumbs[0]),\n      );\n      range.style.marginTop = `0px`;\n      range.style.height = `${heightActiveRange}px`;\n    } else if ($allThumbs.length > 1) {\n      const marginTop = String(driverVertical.getElementOffset($allThumbs[0]));\n      const heightActiveRange = String(\n        driverVertical.getElementOffset($allThumbs[$allThumbs.length - 1]) -\n          driverVertical.getElementOffset($allThumbs[0]),\n      );\n      range.style.marginTop = `${marginTop}px`;\n      range.style.height = `${heightActiveRange}px`;\n    }\n  },\n  calculateClickLocation(event: MouseEvent, target: HTMLElement): number {\n    return event.offsetY + target.offsetTop;\n  },\n  calculateClickLocationOnScaleValue(\n    event: MouseEvent,\n    shiftToMinValue: number,\n    slider: HTMLElement,\n  ): number {\n    const scale = Array.from($(slider).find('.js-slider__vertical-scale'));\n    const startAxis = scale[0].getBoundingClientRect();\n\n    const offsetY = event.clientY - startAxis.y;\n    return offsetY + shiftToMinValue;\n  },\n  getOffsetFromClick(event: MouseEvent): number {\n    return event.offsetY;\n  },\n};\nexport default driverVertical;\n","const utilities = {\n  calculateShiftToMinValue(coefficientPoint: number, min: number): number {\n    const shiftToMinValue = coefficientPoint * min;\n    return shiftToMinValue;\n  },\n\n  /* the method calculates the current value of the thumb */\n  calculateValue(\n    currentValueAxis: number,\n    coefficientPoint: number,\n    shiftToMinValue: number,\n  ): number {\n    const currentValue: number =\n      (currentValueAxis + shiftToMinValue) / coefficientPoint;\n\n    return currentValue;\n  },\n\n  calculateValueForClickOnScale(\n    currentValueAxis: number,\n    coefficientPoint: number,\n    stepSlider: number,\n  ): number {\n    let currentValue: number = currentValueAxis / coefficientPoint;\n    const minValue: number = (currentValue / stepSlider) * stepSlider;\n    const halfStep = minValue + stepSlider / 2;\n\n    if (currentValue > halfStep) {\n      currentValue = minValue + stepSlider;\n    } else {\n      currentValue = minValue;\n    }\n\n    return currentValue;\n  },\n\n  calculateValueAxis(\n    value: number,\n    coefficientPoint: number,\n    shiftToMinValue: number,\n  ): number {\n    const currentValueAxis: number = value * coefficientPoint - shiftToMinValue;\n    return currentValueAxis;\n  },\n};\n\nexport default utilities;\n","import EventEmitter from '../EventEmitter';\nimport { IModelState } from '../interfaces/iModelState';\nimport { IDriver } from '../interfaces/iDriver';\nimport driverHorizontal from './drivers/driverHorizontal';\nimport driverVertical from './drivers/driverVertical';\nimport utilities from './utilities/utilities';\n\nclass Scale {\n  private slider: HTMLElement;\n\n  private scale: HTMLElement | null;\n\n  private emitter: EventEmitter;\n\n  private orientation: string | null;\n\n  private driver: IDriver | null;\n\n  private thumbsValues: number[];\n\n  private shiftToMinValue: number;\n\n  private coefficientPoint: number;\n\n  private maxValueSlider: number;\n\n  private minValueSlider: number;\n\n  private stepSlider: number;\n\n  public serifsElements: HTMLElement[];\n\n  private valuesSerifs: number[];\n\n  private isScaleOfValues: boolean;\n\n  private isCreatedScaleOfValue: boolean;\n\n  constructor(element: HTMLElement, emitter: EventEmitter) {\n    this.slider = element;\n    this.scale = null;\n    this.emitter = emitter;\n    this.orientation = null;\n    this.driver = null;\n    this.thumbsValues = [];\n    this.shiftToMinValue = 0;\n    this.coefficientPoint = 0;\n    this.maxValueSlider = 0;\n    this.minValueSlider = 0;\n    this.stepSlider = 0;\n    this.serifsElements = [];\n    this.valuesSerifs = [];\n    this.isScaleOfValues = true;\n    this.isCreatedScaleOfValue = false;\n  }\n\n  public initializeScale(state: IModelState): void {\n    if (this.orientation !== state.orientation) {\n      this.orientation = state.orientation;\n    }\n    if (state.orientation === 'horizontal') {\n      this.driver = driverHorizontal;\n    }\n    if (state.orientation === 'vertical') {\n      this.driver = driverVertical;\n    }\n    if (state.max !== this.maxValueSlider) {\n      this.maxValueSlider = state.max;\n    }\n    if (state.min !== this.minValueSlider) {\n      this.minValueSlider = state.min;\n    }\n    if (this.thumbsValues !== state.thumbsValues) {\n      this.thumbsValues = state.thumbsValues;\n    }\n    if (this.stepSlider !== state.step) {\n      this.stepSlider = state.step;\n    }\n    if (state.isScaleOfValues) {\n      this.isScaleOfValues = true;\n    } else if (!state.isScaleOfValues) {\n      this.isScaleOfValues = false;\n    }\n\n    this.createScale();\n  }\n\n  public setConfig(state: IModelState): void {\n    if (this.orientation !== state.orientation) {\n      if (state.orientation === 'horizontal') {\n        this.driver = driverHorizontal;\n      }\n      if (state.orientation === 'vertical') {\n        this.driver = driverVertical;\n      }\n      this.orientation = state.orientation;\n      this.changeOrientation();\n    }\n    if (this.isScaleOfValues !== state.isScaleOfValues) {\n      if (state.isScaleOfValues) {\n        this.isScaleOfValues = true;\n        this.renderSerifs();\n      } else if (!state.isScaleOfValues) {\n        this.isScaleOfValues = false;\n        this.renderSerifs();\n      }\n    }\n    if (state.max !== this.maxValueSlider) {\n      this.maxValueSlider = state.max;\n      this.renderSerifs();\n    }\n    if (state.min !== this.minValueSlider) {\n      this.minValueSlider = state.min;\n      this.renderSerifs();\n    }\n    if (this.stepSlider !== state.step) {\n      this.stepSlider = state.step;\n      this.renderSerifs();\n    }\n    this.driver?.updateActiveRange(this.slider);\n    this.thumbsValues = state.thumbsValues;\n  }\n\n  /* function createScale adds scale elements to the main html slider structure */\n  private createScale(): void {\n    if (this.driver !== null) {\n      const scale: HTMLElement = this.driver.createElementScale();\n      const activeRange: HTMLElement = this.driver.createElementActiveRange();\n\n      this.slider.append(scale);\n      this.scale = scale;\n      scale.append(activeRange);\n\n      if (this.isScaleOfValues) {\n        this.renderSerifs();\n      }\n    }\n    this.listenScaleClick();\n    this.listenSizeWindow();\n  }\n\n  private listenScaleClick(): void {\n    if (this.scale !== null) {\n      this.scale.addEventListener(\n        'click',\n        this.handleScaleClick.bind(this),\n        true,\n      );\n    }\n  }\n\n  private renderSerifs(): void {\n    if (this.isScaleOfValues) {\n      const max: number = this.maxValueSlider;\n      const min: number = this.minValueSlider;\n\n      if (this.isCreatedScaleOfValue) {\n        this.removeElementsScaleValueContainer();\n      }\n\n      if (this.driver !== null) {\n        let stepForScaleValue = this.stepSlider;\n\n        const countSteps = (max - min) / this.stepSlider;\n        if (countSteps >= 10) {\n          stepForScaleValue = this.stepSlider * 2;\n        }\n        if (countSteps >= 20) {\n          stepForScaleValue = this.stepSlider * 3;\n        }\n        if (countSteps >= 30) {\n          stepForScaleValue = this.stepSlider * 5;\n        }\n        if (countSteps >= 50) {\n          stepForScaleValue = this.stepSlider * 10;\n        }\n        stepForScaleValue = Math.floor(stepForScaleValue * 100) / 10;\n\n        const fractionalPart = Math.ceil(stepForScaleValue) - stepForScaleValue;\n\n        if (fractionalPart >= 0.5) {\n          stepForScaleValue = Math.floor(stepForScaleValue) / 10;\n        } else {\n          stepForScaleValue = Math.ceil(stepForScaleValue) / 10;\n        }\n\n        const scaleValueContainer = this.driver.createElementScaleValueContainer();\n        const htmlFragment = this.createElementsSerifs(stepForScaleValue);\n        scaleValueContainer.append(htmlFragment);\n        this.slider.append(scaleValueContainer);\n        this.isCreatedScaleOfValue = true;\n      }\n      this.setSefirsInPlaces();\n    } else if (!this.isScaleOfValues) {\n      this.hideScaleOfValues();\n    }\n  }\n\n  private createElementsSerifs(stepSerif: number): DocumentFragment {\n    const max: number = this.maxValueSlider;\n    const min: number = this.minValueSlider;\n\n    const lastStep =\n      max - min - ((max - min) / this.stepSlider) * this.stepSlider;\n\n    this.removeElementsSerifs();\n\n    let countSerifs: number = Math.ceil((max - min) / stepSerif) + 1;\n\n    let currentValueSerif: number = min;\n\n    if (lastStep > 0) {\n      countSerifs += 1;\n    }\n\n    const fractionalPartStep = stepSerif - Math.floor(stepSerif);\n\n    new Array(countSerifs)\n      .fill(1)\n      .forEach((_element: number, index: number) => {\n        if (index === 0) {\n          this.valuesSerifs[index] = min;\n          currentValueSerif += stepSerif;\n          currentValueSerif = Math.ceil(currentValueSerif * 10) / 10;\n        } else if (index === countSerifs - 1) {\n          this.valuesSerifs[index] = max;\n        } else {\n          this.valuesSerifs[index] = currentValueSerif;\n          currentValueSerif += stepSerif;\n\n          if (fractionalPartStep === 0) {\n            currentValueSerif = Math.ceil(currentValueSerif * 10) / 10;\n          } else {\n            let newValue = Math.floor(currentValueSerif * 100) / 10;\n\n            const fractionalValuePart = Math.ceil(newValue) - newValue;\n\n            if (fractionalValuePart >= 0.5) {\n              newValue = Math.floor(newValue) / 10;\n            } else {\n              newValue = Math.ceil(newValue) / 10;\n            }\n            currentValueSerif = newValue;\n          }\n        }\n      });\n\n    const htmlFragment = document.createDocumentFragment();\n    this.valuesSerifs.forEach(element => {\n      if (this.driver !== null) {\n        const scaleValue: HTMLElement = this.driver.createElementScaleValue();\n        const valueWithNumber: HTMLElement = this.driver.createElementScaleValueWithNumber();\n        valueWithNumber.innerHTML = String(Math.floor(element * 10) / 10);\n        scaleValue.append(valueWithNumber);\n        htmlFragment.append(scaleValue);\n        this.serifsElements.push(scaleValue);\n      }\n    });\n    this.listenScaleValueEvents();\n    return htmlFragment;\n  }\n\n  private setSefirsInPlaces(): void {\n    if (this.driver !== null) {\n      this.coefficientPoint = this.driver.calculateCoefficientPoint(\n        this.slider,\n        this.maxValueSlider,\n        this.minValueSlider,\n      );\n\n      this.shiftToMinValue = utilities.calculateShiftToMinValue(\n        this.coefficientPoint,\n        this.minValueSlider,\n      );\n\n      this.driver.setInPlaceElement({\n        elements: this.serifsElements,\n        currentThumbIndex: null,\n        coefficientPoint: this.coefficientPoint,\n        elementsValues: this.valuesSerifs,\n        shiftToMinValue: this.shiftToMinValue,\n      });\n    }\n  }\n\n  private removeElementsSerifs(): void {\n    this.valuesSerifs = [];\n    this.serifsElements = [];\n    if (this.driver !== null) {\n      const elements = this.driver.searchElementScaleValueToDelete(this.slider);\n      elements.forEach(element => {\n        element.remove();\n      });\n    }\n  }\n\n  private removeElementsScaleValueContainer(): void {\n    if (this.driver !== null) {\n      const element = this.driver.searchElementScaleValueBaseContainerToDelete(\n        this.slider,\n      );\n      element.remove();\n    }\n  }\n\n  private changeOrientation(): void {\n    if (this.driver !== null) {\n      const activeRangeToRemove: JQuery<HTMLElement> = this.driver.searchElementActiveRangeToDelete(\n        this.slider,\n      );\n      activeRangeToRemove.remove();\n      const scaleToDelete: JQuery<HTMLElement> = this.driver.searchElementScaleToDelete(\n        this.slider,\n      );\n      scaleToDelete.remove();\n      const scaleValueContainerToRemove: JQuery<HTMLElement> = this.driver.searchElementScaleValueContainerToDelete(\n        this.slider,\n      );\n      scaleValueContainerToRemove.remove();\n\n      this.isCreatedScaleOfValue = false;\n      this.createScale();\n    }\n  }\n\n  private listenScaleValueEvents(): void {\n    this.serifsElements.forEach((element, index) => {\n      element.addEventListener(\n        'click',\n        this.handleSerifScaleClick.bind(this, index, this.valuesSerifs),\n        true,\n      );\n    });\n  }\n\n  private handleScaleClick(event: MouseEvent): void {\n    this.emitter.emit('view:click-on-scale', event);\n  }\n\n  private handleSerifScaleClick(index: number, valuesSerifs: number[]): void {\n    this.emitter.emit('view:click-on-serif-scale', index, valuesSerifs);\n  }\n\n  private listenSizeWindow(): void {\n    window.addEventListener('resize', this.handleWindowResize.bind(this));\n  }\n\n  private handleWindowResize(): void {\n    this.setSefirsInPlaces();\n  }\n\n  /* hideTooltip method hides sliders tooltips */\n  private hideScaleOfValues(): void {\n    if (this.driver !== null) {\n      const $allScaleOfValues: HTMLElement = this.driver.searchElementScaleValueBaseContainerToDelete(\n        this.slider,\n      );\n      $allScaleOfValues.classList.add('slider__scale-value-container_hide');\n    }\n  }\n}\nexport default Scale;\n","import EventEmitter from '../EventEmitter';\nimport createElement from '../functions/createElement';\nimport { IModelState } from '../interfaces/iModelState';\nimport { IThumbsState } from '../interfaces/IThumbsState';\nimport { IDriver } from '../interfaces/iDriver';\nimport driverHorizontal from './drivers/driverHorizontal';\nimport driverVertical from './drivers/driverVertical';\nimport utilities from './utilities/utilities';\n\nclass Thumbs {\n  private slider: HTMLElement;\n\n  private emitter: EventEmitter;\n\n  private state: IThumbsState;\n\n  private driver: IDriver;\n\n  constructor(element: HTMLElement, eventEmitter: EventEmitter) {\n    this.slider = element;\n    this.emitter = eventEmitter;\n    this.driver = driverHorizontal;\n\n    this.state = {\n      thumbs: [],\n      coefficientPoint: 0,\n      shiftToMinValue: 0,\n      currentThumbIndex: null,\n      currentValue: 0,\n      currentValueAxis: 0,\n      thumbValueAxis: null,\n      startValueAxis: 0,\n      maxValueAxis: 0,\n      valueAxisFromStartMove: 0,\n      minValueSlider: 0,\n      maxValueSlider: 100,\n      stepSlider: 0,\n      thumbsCount: 1,\n      thumbsValues: [],\n      orientation: null,\n      target: null,\n      lastStep: 0,\n    };\n\n    this.emitter.makeSubscribe(\n      'view:update-thumbs-position',\n      (event: MouseEvent) => {\n        this.setThumbToNewPosition(event);\n      },\n    );\n    this.emitter.makeSubscribe(\n      'view:update-thumbs-position-on-serif-scale',\n      (index: number, valuesSerifs: []) => {\n        this.setThumbToPositionOnSerifScale(index, valuesSerifs);\n      },\n    );\n  }\n\n  public initializeThumbs(state: IModelState): void {\n    if (this.state.minValueSlider !== state.min) {\n      this.state.minValueSlider = state.min;\n    }\n    if (this.state.maxValueSlider !== state.max) {\n      this.state.maxValueSlider = state.max;\n    }\n    if (this.state.stepSlider !== state.step) {\n      this.state.stepSlider = state.step;\n    }\n    if (this.state.thumbsCount !== state.thumbsCount) {\n      this.state.thumbsCount = state.thumbsCount;\n    }\n    if (this.state.thumbsValues !== state.thumbsValues) {\n      this.state.thumbsValues = state.thumbsValues;\n    }\n    if (this.state.orientation !== state.orientation) {\n      this.state.orientation = state.orientation;\n    }\n    if (state.orientation === 'horizontal') {\n      this.driver = driverHorizontal;\n    }\n    if (state.orientation === 'vertical') {\n      this.driver = driverVertical;\n    }\n\n    this.state.coefficientPoint = this.driver.calculateCoefficientPoint(\n      this.slider,\n      this.state.maxValueSlider,\n      this.state.minValueSlider,\n    );\n    this.state.shiftToMinValue = utilities.calculateShiftToMinValue(\n      this.state.coefficientPoint,\n      this.state.minValueSlider,\n    );\n    this.createThumbs(this.state.thumbsCount);\n    this.setValuesThumbs();\n    this.listenThumbsEvents();\n    this.listenSizeWindow();\n  }\n\n  public setConfig(state: IModelState): void {\n    if (this.state.minValueSlider !== state.min) {\n      this.state.minValueSlider = state.min;\n      this.state.coefficientPoint = this.driver.calculateCoefficientPoint(\n        this.slider,\n        this.state.maxValueSlider,\n        this.state.minValueSlider,\n      );\n    }\n    if (this.state.maxValueSlider !== state.max) {\n      this.state.maxValueSlider = state.max;\n      this.state.coefficientPoint = this.driver.calculateCoefficientPoint(\n        this.slider,\n        this.state.maxValueSlider,\n        this.state.minValueSlider,\n      );\n    }\n    if (this.state.stepSlider !== state.step) {\n      this.state.stepSlider = state.step;\n    }\n    if (this.state.thumbsCount !== state.thumbsCount) {\n      this.state.thumbsCount = state.thumbsCount;\n      this.changeCountThumbs();\n    }\n    if (this.state.thumbsValues !== state.thumbsValues) {\n      this.state.thumbsValues = state.thumbsValues;\n    }\n    if (this.state.orientation !== state.orientation) {\n      if (state.orientation === 'horizontal') {\n        this.driver = driverHorizontal;\n        this.state.coefficientPoint = this.driver.calculateCoefficientPoint(\n          this.slider,\n          this.state.maxValueSlider,\n          this.state.minValueSlider,\n        );\n      }\n      if (state.orientation === 'vertical') {\n        this.driver = driverVertical;\n        this.state.coefficientPoint = this.driver.calculateCoefficientPoint(\n          this.slider,\n          this.state.maxValueSlider,\n          this.state.minValueSlider,\n        );\n      }\n      this.state.orientation = state.orientation;\n      this.state.shiftToMinValue = utilities.calculateShiftToMinValue(\n        this.state.coefficientPoint,\n        this.state.minValueSlider,\n      );\n      this.updateThumbsPosition();\n    }\n    this.state.shiftToMinValue = utilities.calculateShiftToMinValue(\n      this.state.coefficientPoint,\n      this.state.minValueSlider,\n    );\n    this.updateThumbsPosition();\n  }\n\n  /* the CreateSlider function adds sliders to the parent of the slider */\n  private createThumbs(thumbsCount: number): void {\n    const htmlFragment = document.createDocumentFragment();\n    new Array(thumbsCount).fill(1).forEach(() => {\n      const thumb: HTMLElement = createElement(\n        'div',\n        'slider__thumb js-slider__thumb',\n      );\n\n      htmlFragment.append(thumb);\n      this.state.thumbs.push(thumb);\n    });\n    this.slider.append(htmlFragment);\n  }\n\n  /* changes the number of sliders drawn on the scale */\n  private changeCountThumbs(): void {\n    if (this.state.thumbs.length < this.state.thumbsCount) {\n      const thumbsCount: number =\n        this.state.thumbsCount - this.state.thumbs.length;\n\n      this.createThumbs(thumbsCount);\n      this.listenNewThumbsEvents(thumbsCount);\n    }\n    if (this.state.thumbs.length > this.state.thumbsCount) {\n      const excessCount: number =\n        this.state.thumbs.length - this.state.thumbsCount;\n      const $allThumbs: HTMLElement[] = Array.from(\n        $(this.slider).find('.js-slider__thumb'),\n      );\n\n      new Array(excessCount).fill(1).forEach((_element: number, i: number) => {\n        this.state.thumbs.splice(-1, 1);\n        const newLength = $allThumbs.length - i;\n        $allThumbs[newLength - 1].remove();\n      });\n    }\n  }\n\n  private handleThumbMove(event: MouseEvent): void {\n    this.processMove.call(this, event);\n  }\n\n  private handleThumbStop(): void {\n    this.processStop.call(this);\n  }\n\n  /* hangs the 'mousedown' event handler for each created thumb */\n  private listenThumbsEvents(): void {\n    this.state.thumbs.forEach((element: HTMLElement, i: number) => {\n      element.addEventListener(\n        'mousedown',\n        this.handleThumbStart.bind(this, i),\n      );\n    });\n  }\n\n  private handleThumbStart(index: number, event: MouseEvent): void {\n    this.processStart(event, index);\n  }\n\n  /* hangs the 'mousedown' event handler for each added thumb */\n  private listenNewThumbsEvents(thumbsCount: number): void {\n    new Array(thumbsCount).fill(1).forEach((_element: number, i: number) => {\n      const index = this.state.thumbs.length - (thumbsCount - i);\n      this.state.thumbs[\n        this.state.thumbs.length - (thumbsCount - i)\n      ].addEventListener('mousedown', this.handleThumbStart.bind(this, index));\n    });\n  }\n\n  /* listens to the 'resize' event on the slider page */\n  private listenSizeWindow(): void {\n    window.addEventListener('resize', this.handleWindowResize.bind(this));\n  }\n\n  private handleWindowResize(): void {\n    this.updateThumbsPosition.call(this);\n  }\n\n  /* places thumbs on the slider based on default values */\n  private setValuesThumbs(): void {\n    if (this.driver !== null) {\n      this.driver.setInPlaceThumb({\n        elements: this.state.thumbs,\n        currentThumbIndex: this.state.currentThumbIndex,\n        coefficientPoint: this.state.coefficientPoint,\n        thumbsValues: this.state.thumbsValues,\n        shiftToMinValue: this.state.shiftToMinValue,\n        slider: this.slider,\n      });\n    }\n  }\n\n  private updateThumbsPosition(): void {\n    this.state.coefficientPoint = this.driver.calculateCoefficientPoint(\n      this.slider,\n      this.state.maxValueSlider,\n      this.state.minValueSlider,\n    );\n    this.state.shiftToMinValue = utilities.calculateShiftToMinValue(\n      this.state.coefficientPoint,\n      this.state.minValueSlider,\n    );\n\n    this.driver.setInPlaceThumb({\n      elements: this.state.thumbs,\n      currentThumbIndex: this.state.currentThumbIndex,\n      coefficientPoint: this.state.coefficientPoint,\n      thumbsValues: this.state.thumbsValues,\n      shiftToMinValue: this.state.shiftToMinValue,\n      slider: this.slider,\n    });\n  }\n\n  private updateThumbPositionOnScale(index: number): void {\n    this.state.currentValue = utilities.calculateValue(\n      this.state.currentValueAxis,\n      this.state.coefficientPoint,\n      this.state.shiftToMinValue,\n    );\n\n    if (this.state.stepSlider < 1) {\n      this.state.currentValue = Math.round(this.state.currentValue * 10) / 10;\n    } else {\n      this.state.currentValue = Math.round(this.state.currentValue);\n    }\n\n    if (this.state.thumbsValues[index] !== this.state.currentValue) {\n      this.emitter.emit('view:thumbValue-changed', {\n        value: this.state.currentValue,\n        index,\n      });\n    }\n  }\n\n  private setThumbToPositionOnSerifScale(\n    index: number,\n    valuesSerifs: number[],\n  ): void {\n    this.findAndSetTheNearestThumb(valuesSerifs[index]);\n  }\n\n  /* method for setting the closest slider to the clicked position on the slider scale */\n  private setThumbToNewPosition(event: MouseEvent): void {\n    event.preventDefault();\n\n    this.state.coefficientPoint = this.driver.calculateCoefficientPoint(\n      this.slider,\n      this.state.maxValueSlider,\n      this.state.minValueSlider,\n    );\n\n    this.state.shiftToMinValue = utilities.calculateShiftToMinValue(\n      this.state.coefficientPoint,\n      this.state.minValueSlider,\n    );\n\n    let clickLocationAxis = 0;\n\n    clickLocationAxis = this.driver.calculateClickLocationOnScaleValue(\n      event,\n      this.state.shiftToMinValue,\n      this.slider,\n    );\n\n    const currentValue: number = utilities.calculateValueForClickOnScale(\n      clickLocationAxis,\n      this.state.coefficientPoint,\n      this.state.stepSlider,\n    );\n\n    this.findAndSetTheNearestThumb(currentValue);\n  }\n\n  private findAndSetTheNearestThumb(currentValue: number) {\n    const leftSpacing: number[] = [];\n    const rightSpacing: number[] = [];\n\n    this.state.thumbsValues.forEach((thumbValue: number) => {\n      const valueLeftSpacing = thumbValue - currentValue;\n      leftSpacing.push(Math.abs(valueLeftSpacing));\n\n      const valueRightSpacing = thumbValue + currentValue;\n      rightSpacing.push(Math.abs(valueRightSpacing));\n    });\n\n    let currentSpacingValue: number | null = null;\n    let currentThumbIndex: number | null = null;\n\n    const checkValueSpacing = (element: number, index: number) => {\n      if (currentSpacingValue === null) {\n        currentSpacingValue = element;\n      }\n      if (currentThumbIndex === null) {\n        currentThumbIndex = index;\n      }\n      if (element < currentSpacingValue) {\n        currentSpacingValue = element;\n        currentThumbIndex = index;\n      }\n    };\n    leftSpacing.forEach((element, index) => {\n      checkValueSpacing(element, index);\n    });\n    rightSpacing.forEach((element, index) => {\n      checkValueSpacing(element, index);\n    });\n\n    if (currentThumbIndex !== null) {\n      if (currentSpacingValue !== this.state.currentValue) {\n        this.emitter.emit('view:thumbValue-changed', {\n          value: currentValue,\n          index: currentThumbIndex,\n        });\n      }\n    }\n  }\n\n  private processStart(event: MouseEvent, index: number): void {\n    this.state.currentThumbIndex = index;\n\n    event.preventDefault();\n\n    const elements: HTMLElement[] = this.state.thumbs;\n    this.state.target = elements[index];\n\n    if (this.driver !== null) {\n      this.state.currentValueAxis = this.driver.getCurrentValueAxisToProcessStart(\n        this.state.target,\n      );\n\n      const stepWidth: number =\n        this.state.stepSlider * this.state.coefficientPoint;\n\n      this.state.lastStep =\n        Math.round(\n          ((this.state.maxValueSlider - this.state.minValueSlider) %\n            this.state.stepSlider) *\n            10,\n        ) / 10;\n\n      this.state.startValueAxis = index * stepWidth;\n\n      this.state.valueAxisFromStartMove = this.driver.getStartValueAxisToProcessStart(\n        event,\n        this.state.currentValueAxis,\n      );\n      this.state.maxValueAxis = this.driver.getMaxValueAxisToProcessStart(\n        this.slider,\n      );\n\n      if (this.state.lastStep > 0) {\n        if (index < elements.length - 1) {\n          this.state.maxValueAxis =\n            this.state.maxValueAxis -\n            (elements.length - 1 - index) * stepWidth +\n            this.state.lastStep * this.state.coefficientPoint;\n        }\n      } else {\n        this.state.maxValueAxis -= (elements.length - 1 - index) * stepWidth;\n      }\n\n      this.state.thumbValueAxis = utilities.calculateValueAxis(\n        this.state.thumbsValues[index],\n        this.state.coefficientPoint,\n        this.state.shiftToMinValue,\n      );\n    }\n    this.state.currentValue = this.state.thumbsValues[index];\n\n    document.addEventListener('mousemove', this.handleThumbMove.bind(this));\n    document.addEventListener('mouseup', this.handleThumbStop.bind(this));\n  }\n\n  private processMove(event: MouseEvent): void {\n    const index = this.state.currentThumbIndex;\n\n    const isValid =\n      index !== null &&\n      this.state.thumbValueAxis !== null &&\n      this.state.target !== null &&\n      this.driver !== null;\n\n    if (isValid) {\n      if (this.state.target !== null) {\n        this.state.currentValueAxis = this.driver.getCurrentValueAxisToProcessMove(\n          event,\n          this.state.valueAxisFromStartMove,\n        );\n\n        if (this.state.currentValueAxis > this.state.maxValueAxis) {\n          this.state.currentValueAxis = this.state.maxValueAxis;\n        }\n\n        if (this.state.currentValueAxis < this.state.startValueAxis) {\n          this.state.currentValueAxis = this.state.startValueAxis;\n        }\n\n        if (this.state.stepSlider <= 1) {\n          this.driver.setIndentForTarget(\n            this.state.target,\n            this.state.currentValueAxis,\n            this.slider,\n          );\n          this.state.thumbValueAxis = this.state.currentValueAxis;\n          this.updateThumbPositionOnScale(index);\n        } else {\n          const stepWidth: number =\n            this.state.stepSlider * this.state.coefficientPoint;\n\n          if (this.state.thumbValueAxis !== null) {\n            const previousHalfStep = this.state.thumbValueAxis - stepWidth / 2;\n            const nextHalfStep = this.state.thumbValueAxis + stepWidth / 2;\n            const lastHalfStep =\n              this.state.maxValueAxis - this.state.lastStep / 2;\n\n            const previousThumbAxisValue =\n              this.state.thumbValueAxis - stepWidth;\n            const nextThumbAxisValue = this.state.thumbValueAxis + stepWidth;\n\n            if (this.state.currentValueAxis < previousHalfStep) {\n              this.driver.setIndentForTarget(\n                this.state.target,\n                previousThumbAxisValue,\n                this.slider,\n              );\n              this.state.currentValueAxis = previousThumbAxisValue;\n              this.state.thumbValueAxis = previousThumbAxisValue;\n              this.updateThumbPositionOnScale(index);\n            } else if (this.state.currentValueAxis > nextHalfStep) {\n              this.driver.setIndentForTarget(\n                this.state.target,\n                nextThumbAxisValue,\n                this.slider,\n              );\n              this.state.currentValueAxis = nextThumbAxisValue;\n              this.state.thumbValueAxis = nextThumbAxisValue;\n              this.updateThumbPositionOnScale(index);\n            } else if (this.state.currentValueAxis > lastHalfStep) {\n              this.driver.setIndentForTarget(\n                this.state.target,\n                this.state.maxValueAxis,\n                this.slider,\n              );\n              this.state.currentValueAxis = this.state.maxValueAxis;\n              this.state.thumbValueAxis = this.state.maxValueAxis;\n              this.updateThumbPositionOnScale(index);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private processStop(): void {\n    if (this.driver !== null) {\n      if (this.state.target !== null) {\n        if (this.state.currentValue !== null) {\n          this.driver.setIndentForTargetToProcessStop({\n            target: this.state.target,\n            coefficientPoint: this.state.coefficientPoint,\n            currentValue: this.state.currentValue,\n            shiftToMinValue: this.state.shiftToMinValue,\n            slider: this.slider,\n          });\n        }\n      }\n    }\n\n    document.removeEventListener('mousemove', this.handleThumbMove.bind(this));\n    document.removeEventListener('mouseup', this.handleThumbStop.bind(this));\n\n    this.state.currentValue = null;\n    this.state.currentThumbIndex = null;\n  }\n}\nexport default Thumbs;\n","import createElement from '../functions/createElement';\nimport { IModelState } from '../interfaces/iModelState';\nimport { IDriver } from '../interfaces/iDriver';\nimport driverHorizontal from './drivers/driverHorizontal';\nimport driverVertical from './drivers/driverVertical';\n\nclass Tooltips {\n  private slider: HTMLElement;\n\n  private tooltipsElements: HTMLElement[];\n\n  private textInTooltips!: HTMLElement[];\n\n  private tooltipsValues: number[];\n\n  private thumbsCount: number;\n\n  private orientation: string | null;\n\n  private driver: IDriver | null;\n\n  private isTooltip: boolean | null;\n\n  constructor(element: HTMLElement) {\n    this.slider = element;\n    this.tooltipsElements = [];\n    this.textInTooltips = [];\n    this.tooltipsValues = [];\n    this.thumbsCount = 0;\n    this.orientation = null;\n    this.driver = null;\n    this.isTooltip = null;\n  }\n\n  public initializeTooltips(state: IModelState): void {\n    if (this.thumbsCount !== state.thumbsCount) {\n      this.thumbsCount = state.thumbsCount;\n    }\n    if (this.tooltipsValues !== state.thumbsValues) {\n      this.tooltipsValues = state.thumbsValues;\n    }\n    if (this.orientation !== state.orientation) {\n      this.orientation = state.orientation;\n    }\n    if (state.orientation === 'horizontal') {\n      this.driver = driverHorizontal;\n    } else if (state.orientation === 'vertical') {\n      this.driver = driverVertical;\n    }\n\n    this.createTooltips(this.thumbsCount);\n    this.setTooltipsValues();\n\n    if (state.isTooltip) {\n      this.isTooltip = true;\n      this.showTooltip();\n    } else if (!state.isTooltip) {\n      this.isTooltip = false;\n      this.hideTooltip();\n    }\n  }\n\n  public setConfig(state: IModelState): void {\n    if (this.thumbsCount !== state.thumbsCount) {\n      this.thumbsCount = state.thumbsCount;\n      this.changeCountTooltips(state.isTooltip);\n    }\n    if (this.tooltipsValues !== state.thumbsValues) {\n      this.tooltipsValues = state.thumbsValues;\n    }\n    if (this.isTooltip !== state.isTooltip) {\n      if (state.isTooltip) {\n        this.isTooltip = true;\n        this.showTooltip();\n      } else if (!state.isTooltip) {\n        this.isTooltip = false;\n        this.hideTooltip();\n      }\n    }\n    if (this.orientation !== state.orientation) {\n      if (state.orientation === 'horizontal') {\n        this.driver = driverHorizontal;\n      }\n      if (state.orientation === 'vertical') {\n        this.driver = driverVertical;\n      }\n      this.orientation = state.orientation;\n      this.changeOrientation();\n      this.setTooltipsValues();\n    }\n    this.setTooltipsValues();\n  }\n\n  /* createTooltips function adds tooltip elements to the main html slider structure */\n  private createTooltips(thumbsCount: number): void {\n    new Array(thumbsCount).fill(1).forEach((_element: number, i: number) => {\n      if (this.driver !== null) {\n        const tooltip: HTMLElement = createElement(\n          'div',\n          'slider__tooltip js-slider__tooltip',\n        );\n        const textInTooltips: HTMLElement = this.driver.createElementTooltipText();\n\n        tooltip.append(textInTooltips);\n        const thumbs = this.slider.querySelectorAll('.js-slider__thumb');\n        thumbs[thumbs.length - (thumbsCount - i)].append(tooltip);\n        this.tooltipsElements.push(tooltip);\n        this.textInTooltips.push(textInTooltips);\n      }\n    });\n  }\n\n  /* sets the default sliders for their respective tooltips */\n  private setTooltipsValues(): void {\n    this.tooltipsValues.forEach((element: number, i: number) => {\n      this.textInTooltips[i].innerHTML = String(element);\n    });\n  }\n\n  /* changes the number of rendered tooltips */\n  private changeCountTooltips(isTooltip: boolean): void {\n    if (this.tooltipsElements.length < this.thumbsCount) {\n      const thumbsCount: number =\n        this.thumbsCount - this.tooltipsElements.length;\n      this.createTooltips(thumbsCount);\n      if (!isTooltip) {\n        this.hideTooltip();\n      }\n    }\n    if (this.tooltipsElements.length > this.thumbsCount) {\n      const excessCount: number =\n        this.tooltipsElements.length - this.thumbsCount;\n\n      new Array(excessCount).fill(1).forEach(() => {\n        this.tooltipsElements.splice(-1, 1);\n        this.textInTooltips.splice(-1, 1);\n      });\n    }\n    if (this.tooltipsValues.length > this.thumbsCount) {\n      const excessCount: number = this.tooltipsValues.length - this.thumbsCount;\n\n      new Array(excessCount).fill(1).forEach(() => {\n        this.tooltipsValues.splice(-1, 1);\n      });\n    }\n  }\n\n  /* redraws tooltips when orientation changes */\n  private changeOrientation(): void {\n    if (this.driver !== null) {\n      const $tooltips: HTMLElement[] = Array.from(\n        $(this.slider).find('.js-slider__tooltip'),\n      );\n      this.textInTooltips = [];\n      const textInTooltips: HTMLElement[] = this.driver.searchElementsTooltipText(\n        this.slider,\n      );\n      textInTooltips.forEach((element: HTMLElement) => {\n        element.remove();\n      });\n      $tooltips.forEach((element: HTMLElement) => {\n        if (this.driver !== null) {\n          const tooltipText: HTMLElement = this.driver.createElementTooltipText();\n          element.append(tooltipText);\n          this.textInTooltips.push(tooltipText);\n        }\n      });\n    }\n  }\n\n  /* hideTooltip method hides sliders tooltips */\n  private hideTooltip(): void {\n    const $allTooltips: HTMLElement[] = Array.from(\n      $(this.slider).find('.js-slider__tooltip'),\n    );\n\n    $allTooltips.forEach((element: HTMLElement): void => {\n      element.classList.add('slider__tooltip-hide');\n    });\n  }\n\n  /* showTooltip method shows sliders tooltips */\n  private showTooltip(): void {\n    const $allTooltips: HTMLElement[] = Array.from(\n      $(this.slider).find('.js-slider__tooltip'),\n    );\n    $allTooltips.forEach((element: HTMLElement): void => {\n      element.classList.remove('slider__tooltip-hide');\n    });\n  }\n}\nexport default Tooltips;\n","import EventEmitter from '../EventEmitter';\nimport { IModelState } from '../interfaces/iModelState';\nimport Scale from './Scale';\nimport Thumbs from './Thumbs';\nimport Tooltips from './Tooltips';\n\nclass View {\n  private slider: HTMLElement;\n\n  private isCreatedSlider: boolean;\n\n  private emitter: EventEmitter;\n\n  private scale!: Scale;\n\n  private thumbs!: Thumbs;\n\n  private tooltips!: Tooltips;\n\n  constructor(slider: HTMLElement, eventEmitter: EventEmitter) {\n    this.slider = slider;\n    this.isCreatedSlider = false;\n    this.emitter = eventEmitter;\n    this.scale = new Scale(this.slider, this.emitter);\n    this.thumbs = new Thumbs(this.slider, this.emitter);\n    this.tooltips = new Tooltips(this.slider);\n    this.emitter.makeSubscribe('model:state-changed', (state: IModelState) => {\n      this.initialize(state);\n      this.rerender(state);\n    });\n    this.emitter.makeSubscribe('view:click-on-scale', (event: MouseEvent) => {\n      this.emitter.emit('view:update-thumbs-position', event);\n    });\n    this.emitter.makeSubscribe(\n      'view:click-on-serif-scale',\n      (index: number, valuesSerifs: number[]) => {\n        this.emitter.emit(\n          'view:update-thumbs-position-on-serif-scale',\n          index,\n          valuesSerifs,\n        );\n      },\n    );\n  }\n\n  private initialize(state: IModelState): void {\n    if (!this.isCreatedSlider) {\n      this.scale.initializeScale.call(this.scale, state);\n      this.thumbs.initializeThumbs.call(this.thumbs, state);\n      this.tooltips.initializeTooltips.call(this.tooltips, state);\n\n      this.isCreatedSlider = true;\n    }\n  }\n\n  private rerender(state: IModelState): void {\n    this.scale.setConfig.call(this.scale, state);\n    this.thumbs.setConfig.call(this.thumbs, state);\n    this.tooltips.setConfig.call(this.tooltips, state);\n  }\n}\nexport default View;\n","import { IModelState } from './interfaces/iModelState';\n\ninterface IData {\n  value: number;\n  index: number;\n}\ntype CallbackFunctionVariadic = (...args: any[]) => void;\ninterface StringArray {\n  [index: string]: CallbackFunctionVariadic[];\n}\nclass EventEmitter {\n  public handlersByEvent: StringArray;\n\n  constructor() {\n    this.handlersByEvent = {};\n  }\n\n  public makeSubscribe(\n    eventName: string,\n    fn: CallbackFunctionVariadic,\n  ): () => void {\n    if (!this.handlersByEvent[eventName]) {\n      this.handlersByEvent[eventName] = [];\n    }\n\n    this.handlersByEvent[eventName].push(fn);\n    return (): void => {\n      this.handlersByEvent[eventName] = this.handlersByEvent[eventName].filter(\n        eventFn => fn !== eventFn,\n      );\n    };\n  }\n\n  public emit(\n    eventName: string,\n    data: IModelState | IData | number | number[] | MouseEvent,\n    value?: number[],\n  ): void {\n    const handlers: CallbackFunctionVariadic[] = this.handlersByEvent[\n      eventName\n    ];\n    if (handlers) {\n      handlers.forEach(fn => {\n        fn.call(null, data, value);\n      });\n    }\n  }\n}\nexport default EventEmitter;\n","import { IHTMLElement } from './interfaces/iHTMLElement';\nimport { IModelState } from './interfaces/iModelState';\nimport Model from './Model';\nimport View from './view/View';\nimport EventEmitter from './EventEmitter';\n\ninterface IData {\n  value: number;\n  index: number;\n}\n\nclass Controller {\n  public slider: IHTMLElement;\n\n  public model: Model;\n\n  constructor(element: IHTMLElement, props: IModelState) {\n    this.slider = element;\n    this.slider.classList.add('slider');\n\n    const eventEmitter = new EventEmitter();\n    new View(this.slider, eventEmitter);\n    this.model = new Model(eventEmitter, props);\n\n    this.attachPublicMethods(this.model, eventEmitter);\n\n    eventEmitter.makeSubscribe('view:thumbValue-changed', (data: IData) => {\n      this.model.setNewThumbValue(data.value, data.index);\n    });\n  }\n\n  private attachPublicMethods(model: Model, eventEmitter: EventEmitter) {\n    this.slider.getState = (): IModelState => {\n      const modelState: IModelState = { ...model.state };\n      return modelState;\n    };\n    this.slider.setNewValueMin = (min: number): void => {\n      model.setNewValueMin(min);\n    };\n    this.slider.setNewValueMax = (max: number): void => {\n      model.setNewValueMax(max);\n    };\n    this.slider.setNewValueCount = (count: number): void => {\n      model.setNewValueCount(count);\n    };\n    this.slider.setNewThumbValue = (\n      touchValue: number,\n      index: number,\n    ): void => {\n      model.setNewThumbValue(touchValue, index);\n    };\n    this.slider.setNewValueStep = (step: number): void => {\n      model.setNewValueStep(step);\n    };\n    this.slider.setNewValueOrientation = (value: string): void => {\n      model.setNewValueOrientation(value);\n    };\n    this.slider.setNewValueTooltip = (value: boolean): void => {\n      model.setNewValueTooltip(value);\n    };\n    this.slider.setNewValueScaleOfValues = (value: boolean): void => {\n      model.setNewValueScaleOfValues(value);\n    };\n    this.slider.subscribeToStateModel = (\n      handler: (state: IModelState) => void,\n      isCreatedInput: boolean,\n      countInputs: () => Element[],\n      changeCountInputs: (state: IModelState) => void,\n      setValueToInputFromModelState: (state: IModelState) => void,\n      setValueToStepFromModelState: (state: IModelState) => void,\n      setValueToMinInputFromModelState: (state: IModelState) => void,\n      setValueMaxInputFromModelState: (state: IModelState) => void,\n      setValueCountThumbsFromModelState: (state: IModelState) => void,\n    ): void => {\n      eventEmitter.makeSubscribe(\n        'model:state-changed',\n        (state: IModelState): void => {\n          let isCreatedElement = isCreatedInput;\n\n          if (!isCreatedElement) {\n            handler(state);\n            isCreatedElement = true;\n          }\n          const arrayCountInputs = countInputs();\n\n          if (arrayCountInputs.length !== state.thumbsValues.length) {\n            changeCountInputs(state);\n          }\n          setValueToInputFromModelState(state);\n          setValueToStepFromModelState(state);\n          setValueToMinInputFromModelState(state);\n          setValueMaxInputFromModelState(state);\n          setValueCountThumbsFromModelState(state);\n        },\n      );\n    };\n  }\n}\nexport default Controller;\n","import Controller from './Controller';\nimport { IHTMLElement } from './interfaces/iHTMLElement';\n\n(function callSlider($) {\n  const $jquery = $;\n  $jquery.fn.slider = function renderSlider(): globalThis.JQuery<HTMLElement> {\n    const element = (this[0] as unknown) as IHTMLElement;\n    const data = this.data();\n    const settings = $.extend(\n      true,\n      {\n        min: 0,\n        max: 100,\n        thumbsValues: [20, 32, 44, 60],\n        orientation: 'horizontal',\n        thumbsCount: 4,\n        step: 2,\n        isTooltip: true,\n        isScaleOfValues: true,\n      },\n      data,\n    );\n    this.data('controller', new Controller(element, settings));\n    return this;\n  };\n  $jquery.fn.extend($jquery.fn.slider);\n})(jQuery);\n"]}