{"version":3,"sources":["demo/components/configuration-panel/configuration-panel.ts","slider/Model.ts","slider/functions/createElement.ts","slider/view/drivers/driverHorizontal.ts","slider/view/drivers/driverVertical.ts","slider/view/Scale.ts","slider/view/Thumbs.ts","slider/view/Tooltips.ts","slider/view/View.ts","slider/EventEmitter.ts","slider/Controller.ts","slider/slider.ts","demo/page/demo.ts"],"names":[],"mappings":"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","file":"demo.154f93ca.js","sourceRoot":"../src","sourcesContent":["import { IModelState } from '../../../slider/interfaces/iModelState';\nimport { IHTMLElement } from '../../../slider/interfaces/iHTMLElement';\n\nclass ConfigurationPanel {\n  public isCreatedInput: boolean;\n\n  public slider: IHTMLElement;\n\n  public sliderIndex: number;\n\n  public elements: {\n    panel: HTMLElement | null;\n    minValue: HTMLInputElement | null;\n    maxValue: HTMLInputElement | null;\n    countSliderThumbs: HTMLInputElement[] | null;\n    inputsSliderThumbs: HTMLInputElement[] | null;\n    stepSize: HTMLInputElement[] | null;\n    orientationSlider: HTMLElement[] | null;\n    checkboxContainer: HTMLInputElement[] | null;\n    checkboxInputTooltip: HTMLInputElement[] | null;\n    checkboxInputScaleOfValues: HTMLInputElement[] | null;\n    forms: HTMLElement[] | null;\n  };\n\n  public state: IModelState;\n\n  constructor(element: JQuery<HTMLElement>, index: number) {\n    this.slider = (element[0] as unknown) as IHTMLElement;\n    this.isCreatedInput = false;\n    this.sliderIndex = index;\n    this.elements = {\n      panel: null,\n      minValue: null,\n      maxValue: null,\n      countSliderThumbs: null,\n      inputsSliderThumbs: null,\n      stepSize: null,\n      orientationSlider: null,\n      checkboxContainer: null,\n      checkboxInputTooltip: null,\n      checkboxInputScaleOfValues: null,\n      forms: null,\n    };\n    this.state = this.slider.getState();\n\n    this.initialize();\n\n    this.listenMinValue();\n    this.listenMaxValue();\n    this.listenThumbsCount();\n    this.listenStepSize();\n    this.listenInputsSliderThumbs();\n    this.listenOrientationSlider();\n    this.listenCheckboxContainer();\n    this.listenForm();\n\n    this.slider.subscribeToStateModel(\n      this.createInput,\n      this.isCreatedInput,\n      this.getCountInputs.bind(this),\n      this.changeCountInputs.bind(this),\n      this.setValueToInputFromModelState.bind(this),\n      this.setValueToStepFromModelState.bind(this),\n      this.setValueToMinInputFromModelState.bind(this),\n      this.setValueMaxInputFromModelState.bind(this),\n    );\n  }\n\n  initialize(): void {\n    this.getState();\n    this.createInput(this.state);\n    this.setValueToOrientationFromModelState(this.state);\n    this.setValueToStepFromModelState(this.state);\n    this.setValueToMinInputFromModelState(this.state);\n    this.setValueMaxInputFromModelState(this.state);\n    this.setValueToCheckboxTooltipFromModelState(this.state);\n    this.setValueToCheckboxScaleOfValuesFromModelState(this.state);\n    this.findElements();\n  }\n\n  getState(): void {\n    this.state = this.slider.getState();\n  }\n\n  createElement(tag: string, className: string): IHTMLElement {\n    const htmlElement: IHTMLElement = document.createElement(\n      tag,\n    ) as IHTMLElement;\n    htmlElement.className = className;\n    return htmlElement;\n  }\n\n  createInput(state: IModelState): void {\n    const thumbsCurrentValuesList: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration__thumbs-current-value-list'),\n    );\n\n    const fragmentCurrentValueList = document.createDocumentFragment();\n\n    new Array(state.thumbsCount)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        const currentValueItem: HTMLElement = this.createElement(\n          'li',\n          'configuration__thumbs-item js-configuration__thumbs-item',\n        );\n        const currentValueInput: HTMLElement = this.createElement(\n          'input',\n          'configuration__thumbs-value js-configuration__thumbs-value',\n        );\n        currentValueInput.setAttribute('type', 'number');\n        currentValueInput.setAttribute('value', String(state.thumbsValues[i]));\n\n        currentValueItem.append(currentValueInput);\n        fragmentCurrentValueList.append(currentValueItem);\n      });\n    thumbsCurrentValuesList[this.sliderIndex].append(fragmentCurrentValueList);\n    if (!this.isCreatedInput) {\n      this.isCreatedInput = true;\n    }\n  }\n\n  setNewValueToNewInputs(state: IModelState): void {\n    const thumbsCurrentValuesList: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration__thumbs-current-value-list'),\n    );\n\n    const $allThumbs: HTMLInputElement[] = Array.from(\n      $(thumbsCurrentValuesList[this.sliderIndex]).find(\n        '.js-configuration__thumbs-value',\n      ),\n    ) as HTMLInputElement[];\n    const indexNewInput: number = $allThumbs.length - 1;\n    $allThumbs[indexNewInput].value = String(state.thumbsValues[indexNewInput]);\n  }\n\n  changeCountInputs(state: IModelState): void {\n    const thumbsCurrentValuesList: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration__thumbs-current-value-list'),\n    );\n    const $countInputs: HTMLElement[] = Array.from(\n      $(thumbsCurrentValuesList[this.sliderIndex]).find(\n        '.js-configuration__thumbs-item',\n      ),\n    );\n\n    if ($countInputs.length < state.thumbsCount) {\n      const missingCount: number = state.thumbsCount - $countInputs.length;\n\n      const fragmentCurrentValueList = document.createDocumentFragment();\n      new Array(missingCount).fill(1).forEach((_element: number, i: number) => {\n        const currentValueItem: HTMLElement = this.createElement(\n          'li',\n          'configuration__thumbs-item js-configuration__thumbs-item',\n        );\n        const currentValueInput: HTMLElement = this.createElement(\n          'input',\n          'configuration__thumbs-value js-configuration__thumbs-value',\n        );\n        currentValueInput.setAttribute('type', 'number');\n        currentValueInput.setAttribute('value', String(state.thumbsValues[i]));\n\n        currentValueItem.append(currentValueInput);\n        fragmentCurrentValueList.append(currentValueItem);\n\n        this.setNewValueToNewInputs(state);\n      });\n      thumbsCurrentValuesList[this.sliderIndex].append(\n        fragmentCurrentValueList,\n      );\n    }\n    if ($countInputs.length > state.thumbsCount) {\n      const excessCount: number = $countInputs.length - state.thumbsCount;\n\n      const $allCurrentValuesInputs: HTMLElement[] = Array.from(\n        $(thumbsCurrentValuesList[this.sliderIndex]).find(\n          '.js-configuration__thumbs-item',\n        ),\n      );\n      new Array(excessCount).fill(1).forEach(() => {\n        $allCurrentValuesInputs[$allCurrentValuesInputs.length - 1].remove();\n        $allCurrentValuesInputs.splice(-1, 1);\n      });\n    }\n  }\n\n  setValueToOrientationFromModelState(state: IModelState): void {\n    const configurationPanel: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n\n    const $buttonsOrientation: HTMLInputElement[] = Array.from(\n      $(configurationPanel[this.sliderIndex]).find('.js-radio-button__content'),\n    ) as HTMLInputElement[];\n\n    if (state.orientation === 'horizontal') {\n      $buttonsOrientation[0].checked = true;\n    }\n    if (state.orientation === 'vertical') {\n      $buttonsOrientation[1].checked = true;\n    }\n  }\n\n  setValueToMinInputFromModelState(state: IModelState): void {\n    const configurationPanel: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n\n    const $minMaxInputs: HTMLInputElement[] = Array.from(\n      $(configurationPanel[this.sliderIndex]).find(\n        '.js-input__value_for-min-max',\n      ),\n    ) as HTMLInputElement[];\n    const minInput: HTMLInputElement = $minMaxInputs[0];\n    minInput.value = String(state.min);\n  }\n\n  setValueMaxInputFromModelState(state: IModelState): void {\n    const configurationPanel: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n\n    const $minMaxInputs: HTMLInputElement[] = Array.from(\n      $(configurationPanel[this.sliderIndex]).find(\n        '.js-input__value_for-min-max',\n      ),\n    ) as HTMLInputElement[];\n    const maxInput: HTMLInputElement = $minMaxInputs[1];\n    maxInput.value = String(state.max);\n  }\n\n  setValueToInputFromModelState(state: IModelState): void {\n    const thumbsCurrentValuesList: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration__thumbs-current-value-list'),\n    );\n\n    const $allThumbs: HTMLInputElement[] = Array.from(\n      $(thumbsCurrentValuesList[this.sliderIndex]).find(\n        '.js-configuration__thumbs-value',\n      ),\n    ) as HTMLInputElement[];\n\n    new Array(state.thumbsValues.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        $allThumbs[i].value = String(state.thumbsValues[i]);\n      });\n  }\n\n  setValueToStepFromModelState(state: IModelState): void {\n    const configurationPanel: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n\n    const $stepSizes: HTMLInputElement[] = Array.from(\n      $(configurationPanel[this.sliderIndex]).find(\n        '.js-input__value_for-step-size',\n      ),\n    ) as HTMLInputElement[];\n\n    const stepSize = $stepSizes[0];\n    stepSize.value = String(state.step);\n  }\n\n  setValueToCheckboxTooltipFromModelState(state: IModelState): void {\n    const configurationPanel: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n\n    const $checkboxTooltip: HTMLInputElement[] = Array.from(\n      $(configurationPanel[this.sliderIndex]).find(\n        '.js-checkbox-button__tooltip',\n      ),\n    ) as HTMLInputElement[];\n\n    if (!state.isTooltip) {\n      $checkboxTooltip[0].checked = false;\n    }\n    if (state.isTooltip) {\n      $checkboxTooltip[0].checked = true;\n    }\n  }\n\n  setValueToCheckboxScaleOfValuesFromModelState(state: IModelState): void {\n    const configurationPanel: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n\n    const $checkboxScaleOfValues: HTMLInputElement[] = Array.from(\n      $(configurationPanel[this.sliderIndex]).find(\n        '.js-checkbox-button__scale-of-values',\n      ),\n    ) as HTMLInputElement[];\n\n    if (!state.isScaleOfValues) {\n      $checkboxScaleOfValues[0].checked = false;\n    }\n    if (state.isScaleOfValues) {\n      $checkboxScaleOfValues[0].checked = true;\n    }\n  }\n\n  getCountInputs(): HTMLElement[] {\n    const configurationPanel: HTMLDivElement[] = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n\n    const $countInputs: HTMLElement[] = Array.from(\n      $(configurationPanel[this.sliderIndex]).find(\n        '.js-configuration__thumbs-value',\n      ),\n    );\n    return $countInputs;\n  }\n\n  findElements(): void {\n    const configurationPanels = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n\n    this.elements.panel = configurationPanels[this.sliderIndex] as HTMLElement;\n\n    const $minMaxValues: HTMLInputElement[] = Array.from(\n      $(this.elements.panel).find('.js-input__value_for-min-max'),\n    ) as HTMLInputElement[];\n\n    [this.elements.minValue, this.elements.maxValue] = $minMaxValues;\n\n    this.elements.countSliderThumbs = Array.from(\n      $(this.elements.panel).find('.js-input__value_for-count-thumb'),\n    ) as HTMLInputElement[];\n\n    this.elements.inputsSliderThumbs = Array.from(\n      $(this.elements.panel).find('.js-configuration__thumbs-value'),\n    ) as HTMLInputElement[];\n\n    this.elements.stepSize = Array.from(\n      $(this.elements.panel).find('.js-input__value_for-step-size'),\n    ) as HTMLInputElement[];\n\n    this.elements.orientationSlider = Array.from(\n      $(this.elements.panel).find('.js-radio-button'),\n    );\n\n    this.elements.checkboxContainer = Array.from(\n      $(this.elements.panel).find('.js-checkbox-button'),\n    ) as HTMLInputElement[];\n    this.elements.checkboxInputTooltip = Array.from(\n      $(this.elements.panel).find('.js-checkbox-button__tooltip'),\n    ) as HTMLInputElement[];\n    this.elements.checkboxInputScaleOfValues = Array.from(\n      $(this.elements.panel).find('.js-checkbox-button__scale-of-values'),\n    ) as HTMLInputElement[];\n\n    this.elements.forms = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    ) as HTMLElement[];\n  }\n\n  setValueOfInputsSliderThumbs(): void {\n    this.findElements();\n    if (this.elements.inputsSliderThumbs !== null) {\n      new Array(this.elements.inputsSliderThumbs.length)\n        .fill(1)\n        .forEach((_element: number, i: number) => {\n          if (this.elements.inputsSliderThumbs !== null) {\n            const thumbsValue = Number(\n              this.elements.inputsSliderThumbs[i].value,\n            );\n            this.slider.setNewValueThumbsValues(thumbsValue, i);\n          }\n        });\n    }\n  }\n\n  listenMinValue(): void {\n    if (this.elements.minValue !== null) {\n      this.elements.minValue.addEventListener(\n        'blur',\n        this.handleMinValueBlur.bind(this),\n      );\n    }\n  }\n\n  listenMaxValue(): void {\n    if (this.elements.maxValue !== null) {\n      this.elements.maxValue.addEventListener(\n        'blur',\n        this.handleMaxValueBlur.bind(this),\n      );\n    }\n  }\n\n  listenThumbsCount(): void {\n    if (this.elements.countSliderThumbs !== null) {\n      this.elements.countSliderThumbs[0].addEventListener(\n        'blur',\n        this.handleCountSliderThumbsBlur.bind(this),\n      );\n    }\n  }\n\n  listenStepSize(): void {\n    if (this.elements.stepSize !== null) {\n      this.elements.stepSize[0].addEventListener(\n        'blur',\n        this.handleStepSizeBlur.bind(this),\n      );\n    }\n  }\n\n  listenInputsSliderThumbs(): void {\n    if (this.elements.inputsSliderThumbs !== null) {\n      new Array(this.elements.inputsSliderThumbs.length)\n        .fill(1)\n        .forEach((_element: number, i: number) => {\n          if (this.elements.inputsSliderThumbs !== null) {\n            const handleInputsSliderThumbsBlur = () => {\n              if (this.elements.inputsSliderThumbs !== null) {\n                const thumbsValue = Number(\n                  this.elements.inputsSliderThumbs[i].value,\n                );\n                this.slider.setNewValueThumbsValues(thumbsValue, i);\n              }\n            };\n\n            this.elements.inputsSliderThumbs[i].addEventListener(\n              'blur',\n              handleInputsSliderThumbsBlur.bind(this),\n            );\n          }\n        });\n    }\n  }\n\n  listenOrientationSlider(): void {\n    if (this.elements.orientationSlider !== null) {\n      new Array(this.elements.orientationSlider.length)\n        .fill(1)\n        .forEach((_element: number, i: number) => {\n          const handleOrientationSliderClick = () => {\n            let orientation = '';\n            if (i === 0) {\n              orientation = 'horizontal';\n            }\n            if (i === 1) {\n              orientation = 'vertical';\n            }\n            this.slider.setNewValueOrientation(orientation);\n          };\n          if (this.elements.orientationSlider !== null) {\n            this.elements.orientationSlider[i].addEventListener(\n              'click',\n              handleOrientationSliderClick.bind(this),\n            );\n          }\n        });\n    }\n  }\n\n  listenCheckboxContainer(): void {\n    if (this.elements.checkboxContainer !== null) {\n      this.elements.checkboxContainer[0].addEventListener(\n        'click',\n        this.handleCheckboxTooltipClick.bind(this),\n      );\n      this.elements.checkboxContainer[1].addEventListener(\n        'click',\n        this.handleCheckboxScaleOfValuesClick.bind(this),\n      );\n    }\n  }\n\n  listenForm(): void {\n    if (this.elements.forms !== null) {\n      this.elements.forms.forEach((elementForm: HTMLElement) => {\n        elementForm.addEventListener(\n          'submit',\n          this.handleElementFormSubmit.bind(this),\n        );\n      });\n    }\n  }\n\n  handleMinValueBlur(): void {\n    if (this.elements.minValue !== null) {\n      const min = Number(this.elements.minValue.value);\n      this.slider.setNewValueMin(min);\n    }\n  }\n\n  handleMaxValueBlur(): void {\n    if (this.elements.maxValue !== null) {\n      const max = Number(this.elements.maxValue.value);\n      this.slider.setNewValueMax(max);\n    }\n  }\n\n  handleCountSliderThumbsBlur(): void {\n    if (this.elements.countSliderThumbs !== null) {\n      const count = Number(this.elements.countSliderThumbs[0].value);\n      this.slider.setNewValueCount(count);\n    }\n  }\n\n  handleStepSizeBlur(): void {\n    if (this.elements.stepSize !== null) {\n      const step = Number(this.elements.stepSize[0].value);\n      this.slider.setNewValueStep(step);\n    }\n  }\n\n  handleCheckboxTooltipClick(): void {\n    if (this.elements.checkboxInputTooltip !== null) {\n      let isChecked = true;\n      if (this.elements.checkboxInputTooltip[0].checked) {\n        isChecked = true;\n      }\n      if (!this.elements.checkboxInputTooltip[0].checked) {\n        isChecked = false;\n      }\n      this.slider.setNewValueTooltip(isChecked);\n    }\n  }\n\n  handleCheckboxScaleOfValuesClick(): void {\n    if (this.elements.checkboxInputScaleOfValues !== null) {\n      let isChecked = true;\n      if (this.elements.checkboxInputScaleOfValues[0].checked) {\n        isChecked = true;\n      }\n      if (!this.elements.checkboxInputScaleOfValues[0].checked) {\n        isChecked = false;\n      }\n      this.slider.setNewValueScaleOfValues(isChecked);\n    }\n  }\n\n  handleElementFormSubmit: (event: Event) => void = (event): void => {\n    const currentEvent: Event = event;\n    currentEvent.preventDefault();\n\n    if (this.elements.minValue !== null) {\n      const min = Number(this.elements.minValue.value);\n      this.slider.setNewValueMin(min);\n    }\n\n    if (this.elements.maxValue !== null) {\n      const max = Number(this.elements.maxValue.value);\n      this.slider.setNewValueMax(max);\n    }\n\n    if (this.elements.countSliderThumbs !== null) {\n      const count = Number(this.elements.countSliderThumbs[0].value);\n      this.slider.setNewValueCount(count);\n    }\n\n    this.setValueOfInputsSliderThumbs();\n\n    if (this.elements.stepSize !== null) {\n      const step = Number(this.elements.stepSize[0].value);\n      this.slider.setNewValueStep(step);\n    }\n  };\n}\nexport default ConfigurationPanel;\n","import { IModelState } from './interfaces/iModelState';\nimport EventEmitter from './EventEmitter';\n\nclass Model {\n  public state: IModelState;\n\n  private emitter: EventEmitter;\n\n  constructor(\n    eventEmitter: EventEmitter,\n    props = {\n      min: 0,\n      max: 100,\n      thumbsValues: [20, 32, 44, 60],\n      orientation: 'horizontal',\n      thumbsCount: 4,\n      step: 2,\n      isTooltip: true,\n      isScaleOfValues: true,\n    },\n  ) {\n    this.state = {\n      min: props.min,\n      max: props.max,\n      thumbsValues: props.thumbsValues,\n      orientation: props.orientation,\n      thumbsCount: props.thumbsCount,\n      step: props.step,\n      isTooltip: props.isTooltip,\n      isScaleOfValues: props.isScaleOfValues,\n    };\n\n    this.emitter = eventEmitter;\n    this.normolizeState();\n    // this.notifyStateChanged();\n  }\n\n  // set new min value\n  public setNewValueMin(min: number): void {\n    if (this.state.min === min) {\n      return;\n    }\n    this.state.min = min;\n    this.normolizeState();\n  }\n\n  // set new value max\n  public setNewValueMax(max: number): void {\n    if (this.state.max === max) {\n      return;\n    }\n    this.state.max = max;\n    this.normolizeState();\n  }\n\n  // set a new number of thumbs\n  public setNewValueCount(thumbsCount: number): void {\n    if (this.state.thumbsCount === thumbsCount) {\n      return;\n    }\n    console.log('this.state.thumbsCount', this.state.thumbsCount);\n    console.log('thumbsCount', thumbsCount);\n\n    // установить значения для новых ползунков\n    if (this.state.thumbsCount !== thumbsCount) {\n      if (this.state.thumbsCount < thumbsCount) {\n        const missingQuantityThumbs = thumbsCount - this.state.thumbsCount;\n\n        new Array(missingQuantityThumbs).fill(1).forEach(() => {\n          this.state.thumbsValues[this.state.thumbsValues.length] =\n            this.state.thumbsValues[this.state.thumbsValues.length - 1] +\n            this.state.step;\n        });\n\n        this.state.thumbsCount = thumbsCount;\n      }\n      if (this.state.thumbsCount > thumbsCount) {\n        const excessThumbs = this.state.thumbsCount - thumbsCount;\n        new Array(excessThumbs).fill(1).forEach(() => {\n          this.state.thumbsValues.splice(-1, 1);\n        });\n        this.state.thumbsCount = thumbsCount;\n      }\n    }\n    this.normolizeState();\n  }\n\n  // set a new value for the thumb state\n  public setNewValueThumbsValues(thumbValue: number, index: number): void {\n    if (this.state.thumbsValues[index] === thumbValue) {\n      return;\n    }\n    this.state.thumbsValues[index] = thumbValue;\n    this.normolizeState();\n  }\n\n  // set a new value for the step of moving the thumbs\n  public setNewValueStep(step: number): void {\n    if (this.state.step === step) {\n      return;\n    }\n    this.state.step = step;\n    this.normolizeState();\n  }\n\n  // set a new value for the tooltip field\n  public setNewValueTooltip(value: boolean): void {\n    if (value !== this.state.isTooltip) {\n      this.state.isTooltip = value;\n      this.notifyStateChanged();\n    }\n  }\n\n  // set a new value for the tooltip field\n  public setNewValueScaleOfValues(value: boolean): void {\n    if (value !== this.state.isScaleOfValues) {\n      this.state.isScaleOfValues = value;\n      this.notifyStateChanged();\n    }\n  }\n\n  // set new value for orientation field\n  public setNewValueOrientation(value: string): void {\n    if (value === 'horizontal') {\n      this.state.orientation = 'horizontal';\n    } else if (value === 'vertical') {\n      this.state.orientation = 'vertical';\n    }\n    this.notifyStateChanged();\n  }\n\n  public overwriteCurrentThumbsValues(thumbsValues: number[]): void {\n    this.state.thumbsValues = thumbsValues;\n    this.normolizeState();\n  }\n\n  private normolizeState(): void {\n    if (\n      this.state.max - this.state.min <\n      this.state.step * this.state.thumbsCount\n    ) {\n      this.state.max =\n        this.state.min + this.state.step * this.state.thumbsCount;\n    }\n    const minimumPossibleValue =\n      Math.floor(this.state.min / this.state.step) * this.state.step;\n    const maximumPossibleValue =\n      Math.floor(this.state.max / this.state.step) * this.state.step;\n    const maximumCountOfThumbs = Math.floor(\n      (this.state.max - this.state.min) / this.state.step,\n    );\n\n    if (this.state.thumbsCount <= 0) {\n      this.state.thumbsCount = 1;\n    }\n    if (this.state.thumbsCount < this.state.thumbsValues.length) {\n      this.state.thumbsValues.splice(\n        this.state.thumbsCount,\n        this.state.thumbsValues.length - this.state.thumbsCount,\n      );\n      // this.checkThumbsValues(this.state.thumbsValues);\n    }\n    if (maximumCountOfThumbs < this.state.thumbsCount) {\n      this.state.thumbsCount = maximumCountOfThumbs;\n\n      if (this.state.thumbsCount < this.state.thumbsValues.length) {\n        this.state.thumbsValues.splice(\n          this.state.thumbsCount,\n          this.state.thumbsValues.length - this.state.thumbsCount,\n        );\n        this.checkThumbsValues(this.state.thumbsValues);\n      }\n    }\n    if (this.state.min !== minimumPossibleValue) {\n      this.state.min = minimumPossibleValue;\n    }\n    if (this.state.min > this.state.thumbsValues[0]) {\n      this.state.thumbsValues[0] = this.state.min;\n    }\n    if (this.state.max !== maximumPossibleValue) {\n      this.state.max = maximumPossibleValue;\n    }\n    if (\n      this.state.max <\n      this.state.thumbsValues[this.state.thumbsValues.length - 1]\n    ) {\n      this.state.thumbsValues[\n        this.state.thumbsValues.length - 1\n      ] = this.state.max;\n    }\n    if (this.state.step <= 0) {\n      this.state.step = 1;\n    }\n    if (this.state.step > this.state.max / this.state.thumbsCount) {\n      this.state.step = this.state.max / this.state.thumbsCount;\n    }\n    this.checkThumbsValues(this.state.thumbsValues);\n  }\n\n  // Calculate thumbs values based on step size\n  private checkThumbsValues(thumbsValues: number[]): void {\n    thumbsValues.forEach((element: number, i: number) => {\n      const value: number = element;\n      const remainderOfTheDivision: number = value % this.state.step;\n      const newValue: number = value - remainderOfTheDivision;\n      const maxPossibleValue: number =\n        this.state.max -\n        (this.state.max % this.state.step) -\n        (this.state.thumbsValues.length - 1 - i) * this.state.step;\n      const minPossibleValue: number =\n        this.state.min -\n        (this.state.min % this.state.step) +\n        i * this.state.step;\n\n      if (newValue !== this.state.thumbsValues[i]) {\n        this.state.thumbsValues[i] = newValue;\n      }\n      if (newValue >= maxPossibleValue) {\n        this.state.thumbsValues[i] = maxPossibleValue;\n      }\n      if (newValue <= minPossibleValue) {\n        this.state.thumbsValues[i] = minPossibleValue;\n      }\n\n      const isGreaterThanNextValue: boolean =\n        i !== this.state.thumbsValues[this.state.thumbsValues.length - 1] &&\n        element >= this.state.thumbsValues[i + 1];\n\n      const isLessThanPreviousValue: boolean =\n        newValue <= this.state.thumbsValues[i - 1];\n\n      if (isGreaterThanNextValue) {\n        this.state.thumbsValues[i + 1] =\n          this.state.thumbsValues[i] + this.state.step;\n        if (\n          this.state.thumbsValues[i + 1] >\n          maxPossibleValue + this.state.step\n        ) {\n          this.state.thumbsValues[i + 1] = maxPossibleValue + this.state.step;\n          this.state.thumbsValues[i] = maxPossibleValue;\n        }\n      }\n      if (isLessThanPreviousValue) {\n        this.state.thumbsValues[i] =\n          this.state.thumbsValues[i - 1] + this.state.step;\n      }\n\n      this.notifyStateChanged();\n    });\n  }\n\n  private notifyStateChanged(): void {\n    this.emitter.emit('model:state-changed', this.state);\n  }\n}\nexport default Model;\n","/* функция CreateElement создает необходимый элемент с заданным классом */\nconst createElement = (teg: string, className: string): HTMLElement => {\n  const element: HTMLElement = document.createElement(teg);\n  element.className = className;\n  return element;\n};\nexport default createElement;\n","import { IDriver } from '../../interfaces/iDriver';\nimport createElement from '../../functions/createElement';\n\nconst driverHorizontal: IDriver = {\n  getElementOffset(element: HTMLElement): number {\n    return element.offsetLeft;\n  },\n  getOffsetNextThumb(element: HTMLElement, stepWidth: number): number {\n    return this.getElementOffset(element) - stepWidth;\n  },\n  getOffsetPreviousThumb(element: HTMLElement, stepWidth: number): number {\n    return this.getElementOffset(element) + stepWidth;\n  },\n  createElementTooltipText(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__tooltip-text js-slider__tooltip-text',\n    );\n    return element;\n  },\n  createElementScale(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'div',\n      'slider__scale js-slider__scale',\n    );\n    return element;\n  },\n  createElementScaleValue(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'div',\n      'slider__scale-value js-slider__scale-value',\n    );\n    return element;\n  },\n  createElementScaleValueContainer(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'div',\n      'slider__scale-value-container js-slider__scale-value-container',\n    );\n    return element;\n  },\n  createElementScaleValueWithNumber(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__scale-value-with-number js-slider__scale-value-with-number',\n    );\n    return element;\n  },\n  createElementActiveRange(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__active-range js-slider__active-range',\n    );\n    return element;\n  },\n  searchElementsTooltipText(slider: HTMLElement): HTMLElement[] {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-tooltip-text'),\n    );\n    return $elements;\n  },\n  calculateCoefficientPoint(\n    slider: HTMLElement,\n    max: number,\n    min: number,\n  ): number {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__scale'),\n    );\n    const scale = $elements[0];\n    return scale.offsetWidth / (max - min);\n  },\n  searchElementScaleToDelete(slider: HTMLElement): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find(\n      '.js-slider__vertical-scale',\n    );\n    return $element;\n  },\n  searchElementActiveRangeToDelete(slider: HTMLElement): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find(\n      '.js-slider__vertical-active-range',\n    );\n    return $element;\n  },\n  searchElementScaleValueToDelete(slider: HTMLElement): HTMLElement[] {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__scale-value'),\n    );\n    return $elements;\n  },\n  searchElementScaleValueContainerToDelete(\n    slider: HTMLElement,\n  ): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find(\n      '.js-slider__vertical-scale-value-container',\n    );\n    return $element;\n  },\n  searchElementScaleValueBaseContainerToDelete(\n    slider: HTMLElement,\n  ): HTMLElement {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__scale-value-container'),\n    );\n    return $elements[0];\n  },\n  setInPlaceElement({\n    elements,\n    currentThumbIndex,\n    coefficientPoint,\n    elementsValues,\n    shiftToMinValue,\n  }: {\n    elements: HTMLElement[];\n    currentThumbIndex: number | null;\n    coefficientPoint: number;\n    elementsValues: number[];\n    shiftToMinValue: number;\n  }): void {\n    new Array(elements.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        if (i !== currentThumbIndex) {\n          const element = elements[i];\n          let indentLeft = '';\n          if (i === elements.length - 1) {\n            indentLeft = String(\n              Math.ceil(coefficientPoint * elementsValues[i]) -\n                shiftToMinValue -\n                1,\n            );\n          } else {\n            indentLeft = String(\n              Math.ceil(coefficientPoint * elementsValues[i]) - shiftToMinValue,\n            );\n          }\n          element.style.marginTop = '0px';\n          element.style.marginLeft = `${indentLeft}px`;\n        }\n      });\n  },\n  setInPlaceThumb({\n    elements,\n    currentThumbIndex,\n    coefficientPoint,\n    thumbsValues,\n    shiftToMinValue,\n    slider,\n  }: {\n    elements: HTMLElement[];\n    currentThumbIndex: number | null;\n    coefficientPoint: number;\n    thumbsValues: number[];\n    shiftToMinValue: number;\n    slider: HTMLElement;\n  }): void {\n    new Array(elements.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        if (i !== currentThumbIndex) {\n          const element = elements[i];\n          const indentLeft = String(\n            Math.ceil(coefficientPoint * thumbsValues[i]) - shiftToMinValue,\n          );\n          element.style.top = '';\n          element.style.left = `${indentLeft}px`;\n        }\n      });\n    this.updateActiveRange(slider);\n  },\n  getCurrentValueAxisToProcessStart(target: HTMLElement): number {\n    return target.offsetLeft;\n  },\n  getStartValueAxisToProcessStart(\n    eventThumb: MouseEvent,\n    currentXorY: number,\n  ): number {\n    return eventThumb.pageX - currentXorY;\n  },\n  getMaxValueAxisToProcessStart(slider: HTMLElement): number {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__scale'),\n    );\n    const scale = $elements[0];\n    return scale.offsetWidth;\n  },\n  getCurrentValueAxisToProcessMove(\n    eventThumb: MouseEvent,\n    startXorY: number,\n  ): number {\n    return eventThumb.pageX - startXorY;\n  },\n  setIndentForTarget(\n    target: HTMLElement,\n    currentXorY: number,\n    slider: HTMLElement,\n  ): void {\n    const element = target;\n    const indentLeft = String(currentXorY);\n    element.style.left = `${indentLeft}px`;\n\n    this.updateActiveRange(slider);\n  },\n  setIndentForTargetToProcessStop({\n    target,\n    coefficientPoint,\n    currentValue,\n    shiftToMinValue,\n    slider,\n  }: {\n    target: HTMLElement;\n    coefficientPoint: number;\n    currentValue: number;\n    shiftToMinValue: number;\n    slider: HTMLElement;\n  }): void {\n    const element = target;\n    const indentLeft = String(\n      Math.ceil(coefficientPoint * currentValue) - shiftToMinValue,\n    );\n\n    element.style.left = `${indentLeft}px`;\n\n    this.updateActiveRange(slider);\n  },\n  updateActiveRange(slider: HTMLElement): void {\n    const $activeRangeElement: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__active-range'),\n    );\n    const range = $activeRangeElement[0];\n    const $allThumbs: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__thumb'),\n    );\n\n    range.style.marginTop = '';\n    range.style.height = '';\n\n    if ($allThumbs.length === 1) {\n      const widthActiveRange = String(\n        driverHorizontal.getElementOffset($allThumbs[0]),\n      );\n      range.style.marginLeft = `0px`;\n      range.style.width = `${widthActiveRange}px`;\n    } else if ($allThumbs.length > 1) {\n      const marginLeft = String(\n        driverHorizontal.getElementOffset($allThumbs[0]),\n      );\n      const widthActiveRange = String(\n        driverHorizontal.getElementOffset($allThumbs[$allThumbs.length - 1]) -\n          driverHorizontal.getElementOffset($allThumbs[0]),\n      );\n      range.style.marginLeft = `${marginLeft}px`;\n      range.style.width = `${widthActiveRange}px`;\n    }\n  },\n  calculateClickLocation(\n    event: MouseEvent,\n    target: HTMLElement,\n    shiftToMinValue: number,\n  ): number {\n    return event.offsetX + target.offsetLeft + shiftToMinValue;\n  },\n  calculateClickLocationOnScaleValue(\n    event: MouseEvent,\n    shiftToMinValue: number,\n    slider: HTMLElement,\n  ): number {\n    const scale = Array.from($(slider).find('.js-slider__scale'));\n    const startAxis = scale[0].getBoundingClientRect();\n\n    const offsetX = event.pageX - startAxis.x;\n    return offsetX + shiftToMinValue;\n  },\n  getOffsetFromClick(event: MouseEvent): number {\n    return event.offsetX;\n  },\n};\nexport default driverHorizontal;\n","import { IDriver } from '../../interfaces/iDriver';\nimport createElement from '../../functions/createElement';\n\nconst driverVertical: IDriver = {\n  getElementOffset(element: HTMLElement): number {\n    return element.offsetTop;\n  },\n  getOffsetNextThumb(element: HTMLElement, stepWidth: number): number {\n    return this.getElementOffset(element) - stepWidth;\n  },\n  getOffsetPreviousThumb(element: HTMLElement, stepWidth: number): number {\n    return this.getElementOffset(element) + stepWidth;\n  },\n  createElementTooltipText(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__vertical-tooltip-text js-slider__vertical-tooltip-text',\n    );\n    return element;\n  },\n  createElementScale(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'div',\n      'slider__vertical-scale js-slider__vertical-scale',\n    );\n    return element;\n  },\n  createElementScaleValue(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'div',\n      'slider__vertical-scale-value js-slider__vertical-scale-value',\n    );\n    return element;\n  },\n  createElementScaleValueContainer(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'div',\n      'slider__vertical-scale-value-container js-slider__vertical-scale-value-container',\n    );\n    return element;\n  },\n  createElementScaleValueWithNumber(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__vertical-scale-value-with-number js-slider__vertical-scale-value-with-number',\n    );\n    return element;\n  },\n  createElementActiveRange(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__vertical-active-range js-slider__vertical-active-range',\n    );\n    return element;\n  },\n  searchElementsTooltipText(slider: HTMLElement): HTMLElement[] {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__tooltip-text'),\n    );\n    return $elements;\n  },\n  searchElementScaleToDelete(slider: HTMLElement): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find('.js-slider__scale');\n    return $element;\n  },\n  searchElementActiveRangeToDelete(slider: HTMLElement): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find(\n      '.js-slider__active-range',\n    );\n    return $element;\n  },\n  searchElementScaleValueToDelete(slider: HTMLElement): HTMLElement[] {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-scale-value'),\n    );\n    return $elements;\n  },\n  searchElementScaleValueContainerToDelete(\n    slider: HTMLElement,\n  ): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find(\n      '.js-slider__scale-value-container',\n    );\n    return $element;\n  },\n  searchElementScaleValueBaseContainerToDelete(\n    slider: HTMLElement,\n  ): HTMLElement {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-scale-value-container'),\n    );\n    return $elements[0];\n  },\n  calculateCoefficientPoint(\n    slider: HTMLElement,\n    max: number,\n    min: number,\n  ): number {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-scale'),\n    );\n    const scale = $elements[0];\n    return scale.offsetHeight / (max - min);\n  },\n  setInPlaceElement({\n    elements,\n    currentThumbIndex,\n    coefficientPoint,\n    elementsValues,\n    shiftToMinValue,\n  }: {\n    elements: HTMLElement[];\n    currentThumbIndex: number | null;\n    coefficientPoint: number;\n    elementsValues: number[];\n    shiftToMinValue: number;\n  }): void {\n    new Array(elements.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        if (i !== currentThumbIndex) {\n          const element = elements[i];\n          let indentTop = '';\n          if (i === elements.length - 1) {\n            indentTop = String(\n              Math.ceil(coefficientPoint * elementsValues[i]) -\n                shiftToMinValue -\n                1,\n            );\n          } else {\n            indentTop = String(\n              Math.ceil(coefficientPoint * elementsValues[i]) - shiftToMinValue,\n            );\n          }\n          element.style.marginLeft = '0px';\n          element.style.marginTop = `${indentTop}px`;\n        }\n      });\n  },\n  setInPlaceThumb({\n    elements,\n    currentThumbIndex,\n    coefficientPoint,\n    thumbsValues,\n    shiftToMinValue,\n    slider,\n  }: {\n    elements: HTMLElement[];\n    currentThumbIndex: number | null;\n    coefficientPoint: number;\n    thumbsValues: number[];\n    shiftToMinValue: number;\n    slider: HTMLElement;\n  }): void {\n    new Array(elements.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        if (i !== currentThumbIndex) {\n          const thumb = elements[i];\n          const indentTop = String(\n            Math.ceil(coefficientPoint * thumbsValues[i]) - shiftToMinValue,\n          );\n          thumb.style.left = '';\n          thumb.style.top = `${indentTop}px`;\n        }\n      });\n    this.updateActiveRange(slider);\n  },\n  getCurrentValueAxisToProcessStart(target: HTMLElement): number {\n    return target.offsetTop;\n  },\n  getStartValueAxisToProcessStart(\n    eventThumb: MouseEvent,\n    currentXorY: number,\n  ): number {\n    return eventThumb.pageY - currentXorY;\n  },\n  getMaxValueAxisToProcessStart(slider: HTMLElement): number {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-scale'),\n    );\n    const scale = $elements[0];\n    return scale.offsetHeight;\n  },\n  getCurrentValueAxisToProcessMove(\n    eventThumb: MouseEvent,\n    startXorY: number,\n  ): number {\n    return eventThumb.pageY - startXorY;\n  },\n  setIndentForTarget(\n    target: HTMLElement,\n    currentXorY: number,\n    slider: HTMLElement,\n  ): void {\n    const element = target;\n    const indentTop = String(currentXorY);\n    element.style.top = `${indentTop}px`;\n\n    this.updateActiveRange(slider);\n  },\n  setIndentForTargetToProcessStop({\n    target,\n    coefficientPoint,\n    currentValue,\n    shiftToMinValue,\n    slider,\n  }: {\n    target: HTMLElement;\n    coefficientPoint: number;\n    currentValue: number;\n    shiftToMinValue: number;\n    slider: HTMLElement;\n  }): void {\n    const element = target;\n    const indentTop = String(\n      Math.ceil(coefficientPoint * currentValue) - shiftToMinValue,\n    );\n    element.style.top = `${indentTop}px`;\n\n    this.updateActiveRange(slider);\n  },\n  updateActiveRange(slider: HTMLElement): void {\n    const $activeRangeElement: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-active-range'),\n    );\n    const range = $activeRangeElement[0];\n    const $allThumbs: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__thumb'),\n    );\n\n    range.style.marginLeft = '';\n    range.style.width = '';\n\n    if ($allThumbs.length === 1) {\n      const heightActiveRange = String(\n        driverVertical.getElementOffset($allThumbs[0]),\n      );\n      range.style.marginTop = `0px`;\n      range.style.height = `${heightActiveRange}px`;\n    } else if ($allThumbs.length > 1) {\n      const marginTop = String(driverVertical.getElementOffset($allThumbs[0]));\n      const heightActiveRange = String(\n        driverVertical.getElementOffset($allThumbs[$allThumbs.length - 1]) -\n          driverVertical.getElementOffset($allThumbs[0]),\n      );\n      range.style.marginTop = `${marginTop}px`;\n      range.style.height = `${heightActiveRange}px`;\n    }\n  },\n  calculateClickLocation(event: MouseEvent, target: HTMLElement): number {\n    return event.offsetY + target.offsetTop;\n  },\n  calculateClickLocationOnScaleValue(\n    event: MouseEvent,\n    shiftToMinValue: number,\n    slider: HTMLElement,\n  ): number {\n    const scale = Array.from($(slider).find('.js-slider__vertical-scale'));\n    const startAxis = scale[0].getBoundingClientRect();\n\n    const offsetY = event.pageY - startAxis.y;\n    return offsetY + shiftToMinValue;\n  },\n  getOffsetFromClick(event: MouseEvent): number {\n    return event.offsetY;\n  },\n};\nexport default driverVertical;\n","import EventEmitter from '../EventEmitter';\nimport { IModelState } from '../interfaces/iModelState';\nimport { IDriver } from '../interfaces/iDriver';\nimport driverHorizontal from './drivers/driverHorizontal';\nimport driverVertical from './drivers/driverVertical';\n\nclass Scale {\n  private slider: HTMLElement;\n\n  private emitter: EventEmitter;\n\n  private orientation: string | null;\n\n  private driver: IDriver | null;\n\n  private thumbsValues: number[];\n\n  private shiftToMinValue: number;\n\n  private coefficientPoint: number;\n\n  private maxValueSlider: number;\n\n  private minValueSlider: number;\n\n  private stepSlider: number;\n\n  private serifsElements: HTMLElement[];\n\n  private valuesSerifs: number[];\n\n  private isScaleOfValues: boolean;\n\n  private isCreatedScaleOfValue: boolean;\n\n  constructor(element: HTMLElement, emitter: EventEmitter) {\n    this.slider = element;\n    this.emitter = emitter;\n    this.orientation = null;\n    this.driver = null;\n    this.thumbsValues = [];\n    this.shiftToMinValue = 0;\n    this.coefficientPoint = 0;\n    this.maxValueSlider = 0;\n    this.minValueSlider = 0;\n    this.stepSlider = 0;\n    this.serifsElements = [];\n    this.valuesSerifs = [];\n    this.isScaleOfValues = true;\n    this.isCreatedScaleOfValue = false;\n  }\n\n  public initializeScale(state: IModelState): void {\n    if (this.orientation !== state.orientation) {\n      this.orientation = state.orientation;\n    }\n    if (state.orientation === 'horizontal') {\n      this.driver = driverHorizontal;\n    }\n    if (state.orientation === 'vertical') {\n      this.driver = driverVertical;\n    }\n    if (state.max !== this.maxValueSlider) {\n      this.maxValueSlider = state.max;\n    }\n    if (state.min !== this.minValueSlider) {\n      this.minValueSlider = state.min;\n    }\n    if (this.thumbsValues !== state.thumbsValues) {\n      this.thumbsValues = state.thumbsValues;\n    }\n    if (this.stepSlider !== state.step) {\n      this.stepSlider = state.step;\n    }\n    if (state.isScaleOfValues) {\n      this.isScaleOfValues = true;\n    } else if (!state.isScaleOfValues) {\n      this.isScaleOfValues = false;\n    }\n\n    this.createScale();\n  }\n\n  public setConfig(state: IModelState): void {\n    if (this.orientation !== state.orientation) {\n      if (state.orientation === 'horizontal') {\n        this.driver = driverHorizontal;\n      }\n      if (state.orientation === 'vertical') {\n        this.driver = driverVertical;\n      }\n      this.orientation = state.orientation;\n      this.changeOrientation();\n    }\n    if (this.isScaleOfValues !== state.isScaleOfValues) {\n      if (state.isScaleOfValues) {\n        this.isScaleOfValues = true;\n        this.renderSerifs();\n      } else if (!state.isScaleOfValues) {\n        this.isScaleOfValues = false;\n        this.renderSerifs();\n      }\n    }\n    if (state.max !== this.maxValueSlider) {\n      this.maxValueSlider = state.max;\n      this.renderSerifs();\n    }\n    if (state.min !== this.minValueSlider) {\n      this.minValueSlider = state.min;\n      this.renderSerifs();\n    }\n    if (this.stepSlider !== state.step) {\n      this.stepSlider = state.step;\n      this.renderSerifs();\n    }\n    this.driver?.updateActiveRange(this.slider);\n    this.thumbsValues = state.thumbsValues;\n  }\n\n  /* function createScale adds scale elements to the main html slider structure */\n  private createScale(): void {\n    if (this.driver !== null) {\n      const scale: HTMLElement = this.driver.createElementScale();\n      const activeRange: HTMLElement = this.driver.createElementActiveRange();\n\n      this.slider.append(scale);\n      scale.append(activeRange);\n\n      if (this.isScaleOfValues) {\n        this.renderSerifs();\n      }\n    }\n    this.listenSizeWindow();\n  }\n\n  private renderSerifs(): void {\n    if (this.isScaleOfValues) {\n      const max: number = this.maxValueSlider;\n      const min: number = this.minValueSlider;\n\n      if (this.isCreatedScaleOfValue) {\n        this.removeElementsScaleValueContainer();\n      }\n\n      if (this.driver !== null) {\n        let stepForScaleValue = this.stepSlider;\n\n        if (max - min <= 20) {\n          if (max - min > 10) {\n            if (this.stepSlider === 1) {\n              stepForScaleValue = this.stepSlider * 2;\n            }\n          }\n        } else if (max - min > 20) {\n          if (this.stepSlider === 1) {\n            stepForScaleValue = this.stepSlider * 5;\n          } else if (this.stepSlider === 2) {\n            stepForScaleValue = this.stepSlider * 2;\n          }\n          if (max - min > 50) {\n            if (this.stepSlider < 3) {\n              stepForScaleValue = this.stepSlider * 5;\n            } else if (this.stepSlider === 3) {\n              stepForScaleValue = this.stepSlider * 3;\n            } else if (this.stepSlider > 3) {\n              stepForScaleValue = this.stepSlider * 2;\n            }\n          }\n        }\n        const scaleValueContainer = this.driver.createElementScaleValueContainer();\n        const htmlFragment = this.createElementsSefifs(stepForScaleValue);\n        scaleValueContainer.append(htmlFragment);\n        this.slider.append(scaleValueContainer);\n        this.isCreatedScaleOfValue = true;\n      }\n      this.setSefirsInPlaces();\n    } else if (!this.isScaleOfValues) {\n      this.hideScaleOfValues();\n    }\n  }\n\n  private createElementsSefifs(stepSerif: number): DocumentFragment {\n    const max: number = this.maxValueSlider;\n    const min: number = this.minValueSlider;\n\n    this.removeElementsSerifs();\n\n    const countSerifs: number = Math.floor((max - min) / stepSerif + 1);\n\n    let currentValueSerif: number = Math.ceil(min / stepSerif) * stepSerif;\n    new Array(countSerifs)\n      .fill(1)\n      .forEach((_element: number, index: number) => {\n        this.valuesSerifs[index] = currentValueSerif;\n        currentValueSerif += stepSerif;\n      });\n    if (\n      this.valuesSerifs[this.valuesSerifs.length - 1] !== this.maxValueSlider\n    ) {\n      this.valuesSerifs[this.valuesSerifs.length - 1] = this.maxValueSlider;\n    }\n\n    const htmlFragment = document.createDocumentFragment();\n    this.valuesSerifs.forEach(element => {\n      if (this.driver !== null) {\n        const scaleValue: HTMLElement = this.driver.createElementScaleValue();\n        const valueWithNumber: HTMLElement = this.driver.createElementScaleValueWithNumber();\n        valueWithNumber.innerHTML = String(element);\n        scaleValue.append(valueWithNumber);\n        htmlFragment.append(scaleValue);\n        this.serifsElements.push(scaleValue);\n      }\n    });\n    this.listenScaleValueEvents();\n    return htmlFragment;\n  }\n\n  private setSefirsInPlaces(): void {\n    if (this.driver !== null) {\n      this.calculateShiftToMinValue();\n      this.driver.setInPlaceElement({\n        elements: this.serifsElements,\n        currentThumbIndex: null,\n        coefficientPoint: this.coefficientPoint,\n        elementsValues: this.valuesSerifs,\n        shiftToMinValue: this.shiftToMinValue,\n      });\n    }\n  }\n\n  private removeElementsSerifs(): void {\n    this.valuesSerifs = [];\n    this.serifsElements = [];\n    if (this.driver !== null) {\n      const elements = this.driver.searchElementScaleValueToDelete(this.slider);\n      elements.forEach(element => {\n        element.remove();\n      });\n    }\n  }\n\n  private removeElementsScaleValueContainer(): void {\n    if (this.driver !== null) {\n      const element = this.driver.searchElementScaleValueBaseContainerToDelete(\n        this.slider,\n      );\n      element.remove();\n    }\n  }\n\n  private calculateCoefficientPoint(): void {\n    if (this.driver !== null) {\n      this.coefficientPoint = this.driver.calculateCoefficientPoint(\n        this.slider,\n        this.maxValueSlider,\n        this.minValueSlider,\n      );\n    }\n  }\n\n  private calculateShiftToMinValue(): void {\n    this.calculateCoefficientPoint();\n    this.shiftToMinValue = Math.ceil(\n      this.coefficientPoint * this.minValueSlider,\n    );\n  }\n\n  private changeOrientation(): void {\n    if (this.driver !== null) {\n      const activeRangeToRemove: JQuery<HTMLElement> = this.driver.searchElementActiveRangeToDelete(\n        this.slider,\n      );\n      activeRangeToRemove.remove();\n      const scaleToDelete: JQuery<HTMLElement> = this.driver.searchElementScaleToDelete(\n        this.slider,\n      );\n      scaleToDelete.remove();\n      const scaleValueContainerToRemove: JQuery<HTMLElement> = this.driver.searchElementScaleValueContainerToDelete(\n        this.slider,\n      );\n      scaleValueContainerToRemove.remove();\n\n      this.isCreatedScaleOfValue = false;\n      this.createScale();\n    }\n  }\n\n  private listenScaleValueEvents(): void {\n    this.serifsElements.forEach(element => {\n      element.addEventListener('click', this.handleScaleClick.bind(this), true);\n    });\n  }\n\n  private handleScaleClick(event: MouseEvent): void {\n    this.emitter.emit('view:click-on-scale', event);\n  }\n\n  private listenSizeWindow(): void {\n    window.addEventListener('resize', this.handleWindowResize.bind(this));\n  }\n\n  private handleWindowResize(): void {\n    this.setSefirsInPlaces();\n  }\n\n  /* hideTooltip method hides sliders tooltips */\n  private hideScaleOfValues(): void {\n    if (this.driver !== null) {\n      const $allScaleOfValues: HTMLElement = this.driver.searchElementScaleValueBaseContainerToDelete(\n        this.slider,\n      );\n      $allScaleOfValues.classList.add('slider__scale-value-container_hide');\n    }\n  }\n}\nexport default Scale;\n","import EventEmitter from '../EventEmitter';\nimport createElement from '../functions/createElement';\nimport { IModelState } from '../interfaces/iModelState';\nimport { IThumbsState } from '../interfaces/IThumbsState';\nimport { IDriver } from '../interfaces/iDriver';\nimport driverHorizontal from './drivers/driverHorizontal';\nimport driverVertical from './drivers/driverVertical';\n// import { event } from 'jquery';\n\nclass Thumbs {\n  private slider: HTMLElement;\n\n  private emitter: EventEmitter;\n\n  private state: IThumbsState;\n\n  private driver: IDriver | null;\n\n  constructor(element: HTMLElement, eventEmitter: EventEmitter) {\n    this.slider = element;\n    this.emitter = eventEmitter;\n    this.driver = null;\n\n    this.state = {\n      thumbs: [],\n      coefficientPoint: 0,\n      shiftToMinValue: 0,\n      currentThumbIndex: null,\n      currentValue: 0,\n      currentValueAxis: 0,\n      thumbValueAxis: null,\n      startValueAxis: 0,\n      stopValueAxis: 0,\n      valueAxisFromStartMove: 0,\n      minValueSlider: 0,\n      maxValueSlider: 100,\n      stepSlider: 0,\n      thumbsCount: 1,\n      thumbsValues: [],\n      orientation: null,\n      target: null,\n    };\n\n    this.emitter.makeSubscribe(\n      'view:update-thumbs-position',\n      (event: MouseEvent) => {\n        this.setThumbToNewPosition(event);\n      },\n    );\n  }\n\n  public initializeThumbs(state: IModelState): void {\n    if (this.state.minValueSlider !== state.min) {\n      this.state.minValueSlider = state.min;\n    }\n    if (this.state.maxValueSlider !== state.max) {\n      this.state.maxValueSlider = state.max;\n    }\n    if (this.state.stepSlider !== state.step) {\n      this.state.stepSlider = state.step;\n    }\n    if (this.state.thumbsCount !== state.thumbsCount) {\n      this.state.thumbsCount = state.thumbsCount;\n    }\n    if (this.state.thumbsValues !== state.thumbsValues) {\n      this.state.thumbsValues = state.thumbsValues;\n    }\n    if (this.state.orientation !== state.orientation) {\n      this.state.orientation = state.orientation;\n    }\n    if (state.orientation === 'horizontal') {\n      this.driver = driverHorizontal;\n    }\n    if (state.orientation === 'vertical') {\n      this.driver = driverVertical;\n    }\n\n    this.createThumbs(this.state.thumbsCount);\n    this.setValuesThumbs();\n    this.listenThumbsEvents();\n    this.listenSizeWindow();\n  }\n\n  public setConfig(state: IModelState): void {\n    if (this.state.minValueSlider !== state.min) {\n      this.state.minValueSlider = state.min;\n    }\n    if (this.state.maxValueSlider !== state.max) {\n      this.state.maxValueSlider = state.max;\n    }\n    if (this.state.stepSlider !== state.step) {\n      this.state.stepSlider = state.step;\n    }\n    if (this.state.thumbsCount !== state.thumbsCount) {\n      this.state.thumbsCount = state.thumbsCount;\n      this.changeCountThumbs();\n    }\n    if (this.state.thumbsValues !== state.thumbsValues) {\n      this.state.thumbsValues = state.thumbsValues;\n    }\n    if (this.state.orientation !== state.orientation) {\n      if (state.orientation === 'horizontal') {\n        this.driver = driverHorizontal;\n      }\n      if (state.orientation === 'vertical') {\n        this.driver = driverVertical;\n      }\n      this.state.orientation = state.orientation;\n      this.updateThumbsPosition();\n    }\n    this.updateThumbsPosition();\n  }\n\n  /* the CreateSlider function adds sliders to the parent of the slider */\n  private createThumbs(thumbsCount: number): void {\n    const htmlFragment = document.createDocumentFragment();\n    new Array(thumbsCount).fill(1).forEach(() => {\n      const thumb: HTMLElement = createElement(\n        'div',\n        'slider__thumb js-slider__thumb',\n      );\n\n      htmlFragment.append(thumb);\n      this.state.thumbs.push(thumb);\n    });\n    this.slider.append(htmlFragment);\n  }\n\n  /* changes the number of sliders drawn on the scale */\n  private changeCountThumbs(): void {\n    if (this.state.thumbs.length < this.state.thumbsCount) {\n      const thumbsCount: number =\n        this.state.thumbsCount - this.state.thumbs.length;\n\n      this.createThumbs(thumbsCount);\n      this.listenNewThumbsEvents(thumbsCount);\n    }\n    if (this.state.thumbs.length > this.state.thumbsCount) {\n      const excessCount: number =\n        this.state.thumbs.length - this.state.thumbsCount;\n      const $allThumbs: HTMLElement[] = Array.from(\n        $(this.slider).find('.js-slider__thumb'),\n      );\n\n      new Array(excessCount).fill(1).forEach((_element: number, i: number) => {\n        // this.state.thumbsValues.splice(-1, 1);\n        this.state.thumbs.splice(-1, 1);\n        const newLength = $allThumbs.length - i;\n        $allThumbs[newLength - 1].remove();\n      });\n    }\n  }\n\n  private handleThumbMove(event: MouseEvent): void {\n    this.processMove.call(this, event);\n  }\n\n  private handleThumbStop(): void {\n    this.processStop.call(this);\n  }\n\n  /* hangs the 'mousedown' event handler for each created thumb */\n  private listenThumbsEvents(): void {\n    this.state.thumbs.forEach((element: HTMLElement, i: number) => {\n      element.addEventListener(\n        'mousedown',\n        this.handleThumbStart.bind(this, i),\n      );\n    });\n  }\n\n  private handleThumbStart(index: number, event: MouseEvent): void {\n    this.processStart(event, index);\n  }\n\n  /* hangs the 'mousedown' event handler for each added thumb */\n  private listenNewThumbsEvents(thumbsCount: number): void {\n    new Array(thumbsCount).fill(1).forEach((_element: number, i: number) => {\n      const index = this.state.thumbs.length - (thumbsCount - i);\n      this.state.thumbs[\n        this.state.thumbs.length - (thumbsCount - i)\n      ].addEventListener('mousedown', this.handleThumbStart.bind(this, index));\n    });\n  }\n\n  /* listens to the 'resize' event on the slider page */\n  private listenSizeWindow(): void {\n    window.addEventListener('resize', this.handleWindowResize.bind(this));\n  }\n\n  private handleWindowResize(): void {\n    this.updateThumbsPosition.call(this);\n  }\n\n  /* places thumbs on the slider based on default values */\n  private setValuesThumbs(): void {\n    if (this.driver !== null) {\n      this.calculateCoefficientPoint();\n      this.calculateShiftToMinValue();\n      this.driver.setInPlaceThumb({\n        elements: this.state.thumbs,\n        currentThumbIndex: this.state.currentThumbIndex,\n        coefficientPoint: this.state.coefficientPoint,\n        thumbsValues: this.state.thumbsValues,\n        shiftToMinValue: this.state.shiftToMinValue,\n        slider: this.slider,\n      });\n    }\n  }\n\n  /* the method calculates the current value of the thumb */\n  private calculateValue(currentValueAxis: number): number {\n    this.calculateCoefficientPoint();\n    let currentValue: number =\n      Math.ceil(currentValueAxis / this.state.coefficientPoint) +\n      this.state.minValueSlider;\n\n    const intermediateValue: number = Math.floor(\n      currentValue / this.state.stepSlider,\n    );\n    currentValue = this.state.stepSlider * intermediateValue;\n\n    return currentValue;\n  }\n\n  private calculateValueAxis(value: number): number {\n    this.calculateShiftToMinValue();\n    this.calculateCoefficientPoint();\n\n    const intermediateValue: number = value / this.state.stepSlider;\n    const currentValue: number = intermediateValue * this.state.stepSlider;\n    const currentValueAxis: number =\n      Math.ceil(currentValue * this.state.coefficientPoint) -\n      this.state.shiftToMinValue;\n\n    return currentValueAxis;\n  }\n\n  /* the method calculates the value of the position of the thumb on the scale */\n  private calculateValueOfPlaceOnScale(i: number): void {\n    this.state.currentValue = this.calculateValue(this.state.currentValueAxis);\n\n    if (this.state.thumbsValues[i] !== this.state.currentValue) {\n      this.emitter.emit('view:thumbsValues-changed', {\n        value: this.state.currentValue,\n        index: i,\n      });\n    }\n  }\n\n  /* calculates the potential value of the thumb at the point of click on the scale */\n  private calculateValueOfPlaceClickOnScale(currentValueAxis: number): number {\n    const currentValue: number = this.calculateValue(currentValueAxis);\n    this.calculateShiftToMinValue();\n\n    return currentValue;\n  }\n\n  private calculateShiftToMinValue(): void {\n    this.calculateCoefficientPoint();\n    this.state.shiftToMinValue = Math.ceil(\n      this.state.coefficientPoint * this.state.minValueSlider,\n    );\n  }\n\n  private calculateCoefficientPoint(): void {\n    if (this.driver !== null) {\n      this.state.coefficientPoint = this.driver.calculateCoefficientPoint(\n        this.slider,\n        this.state.maxValueSlider,\n        this.state.minValueSlider,\n      );\n    }\n  }\n\n  private updateThumbsPosition(): void {\n    this.calculateCoefficientPoint();\n    this.calculateShiftToMinValue();\n\n    if (this.driver !== null) {\n      this.driver.setInPlaceThumb({\n        elements: this.state.thumbs,\n        currentThumbIndex: this.state.currentThumbIndex,\n        coefficientPoint: this.state.coefficientPoint,\n        thumbsValues: this.state.thumbsValues,\n        shiftToMinValue: this.state.shiftToMinValue,\n        slider: this.slider,\n      });\n    }\n  }\n\n  private updateThumbPositionOnScale(index: number): void {\n    this.calculateValueOfPlaceOnScale(index);\n  }\n\n  /* method for setting the closest slider to the clicked position on the slider scale */\n  private setThumbToNewPosition(event: MouseEvent): void {\n    event.preventDefault();\n    if (this.driver !== null) {\n      this.calculateShiftToMinValue();\n      const target: HTMLDivElement = event.target as HTMLDivElement;\n      const targetClassList = target.classList;\n\n      let clickLocationAxis = 0;\n      if (targetClassList.contains('js-slider__scale')) {\n        clickLocationAxis = this.driver.calculateClickLocation(\n          event,\n          target,\n          this.state.shiftToMinValue,\n        );\n      } else if (targetClassList.contains('js-slider__vertical-scale')) {\n        clickLocationAxis = this.driver.calculateClickLocation(\n          event,\n          target,\n          this.state.shiftToMinValue,\n        );\n      } else if (targetClassList.contains('js-slider__scale-value')) {\n        clickLocationAxis = this.driver.calculateClickLocationOnScaleValue(\n          event,\n          this.state.shiftToMinValue,\n          this.slider,\n        );\n      } else if (targetClassList.contains('js-slider__vertical-scale-value')) {\n        clickLocationAxis = this.driver.calculateClickLocationOnScaleValue(\n          event,\n          this.state.shiftToMinValue,\n          this.slider,\n        );\n      } else if (\n        targetClassList.contains('js-slider__scale-value-with-number')\n      ) {\n        clickLocationAxis = this.driver.calculateClickLocationOnScaleValue(\n          event,\n          this.state.shiftToMinValue,\n          this.slider,\n        );\n      } else if (\n        targetClassList.contains('js-slider__vertical-scale-value-with-number')\n      ) {\n        clickLocationAxis = this.driver.calculateClickLocationOnScaleValue(\n          event,\n          this.state.shiftToMinValue,\n          this.slider,\n        );\n      }\n      const currentValue: number = this.calculateValueOfPlaceClickOnScale(\n        clickLocationAxis,\n      );\n\n      const leftSpacing: number[] = [];\n      const rightSpacing: number[] = [];\n\n      this.state.thumbsValues.forEach((thumbValue: number) => {\n        const valueLeftSpacing = thumbValue - currentValue;\n        leftSpacing.push(Math.abs(valueLeftSpacing));\n\n        const valueRightSpacing = thumbValue + currentValue;\n        rightSpacing.push(Math.abs(valueRightSpacing));\n      });\n\n      let currentSpacingValue: number | null = null;\n      let currentThumbIndex: number | null = null;\n\n      const checkValueSpacing = (element: number, index: number) => {\n        if (currentSpacingValue === null) {\n          currentSpacingValue = element;\n        }\n        if (currentThumbIndex === null) {\n          currentThumbIndex = index;\n        }\n        if (element < currentSpacingValue) {\n          currentSpacingValue = element;\n          currentThumbIndex = index;\n        }\n      };\n      leftSpacing.forEach((element, index) => {\n        checkValueSpacing(element, index);\n      });\n      rightSpacing.forEach((element, index) => {\n        checkValueSpacing(element, index);\n      });\n\n      if (currentThumbIndex !== null) {\n        if (currentSpacingValue !== this.state.currentValue) {\n          this.emitter.emit('view:thumbsValues-changed', {\n            value: currentValue,\n            index: currentThumbIndex,\n          });\n        }\n      }\n    }\n  }\n\n  private processStart(event: MouseEvent, index: number): void {\n    this.state.currentThumbIndex = index;\n\n    event.preventDefault();\n\n    const elements: HTMLElement[] = this.state.thumbs;\n    this.state.target = elements[index];\n\n    if (this.driver !== null) {\n      this.state.currentValueAxis = this.driver.getCurrentValueAxisToProcessStart(\n        this.state.target,\n      );\n      this.state.startValueAxis = this.state.minValueSlider;\n      this.state.valueAxisFromStartMove = this.driver.getStartValueAxisToProcessStart(\n        event,\n        this.state.currentValueAxis,\n      );\n      this.state.stopValueAxis = this.driver.getMaxValueAxisToProcessStart(\n        this.slider,\n      );\n      this.state.thumbValueAxis = this.calculateValueAxis(\n        this.state.thumbsValues[index],\n      );\n    }\n    this.state.currentValue = this.state.thumbsValues[index];\n\n    document.addEventListener('mousemove', this.handleThumbMove.bind(this));\n    document.addEventListener('mouseup', this.handleThumbStop.bind(this));\n  }\n\n  private processMove(event: MouseEvent): void {\n    const elements: HTMLElement[] = this.state.thumbs;\n    const index = this.state.currentThumbIndex;\n\n    if (index !== null) {\n      if (this.state.thumbValueAxis !== null) {\n        if (this.state.target !== null) {\n          const isFirstThumb: boolean = index === 0;\n          const isIntermediateThumb: boolean =\n            index > 0 && index < elements.length - 1;\n          const isLastThumb: boolean =\n            index === elements.length - 1 && index !== 0;\n          const isOneThumb: boolean = elements.length === 1;\n          const isMultipleThumbs: boolean = elements.length !== 1;\n\n          if (this.driver !== null) {\n            this.calculateCoefficientPoint();\n            const stepWidth: number = Math.ceil(\n              this.state.stepSlider * this.state.coefficientPoint,\n            );\n            this.state.currentValueAxis = this.driver.getCurrentValueAxisToProcessMove(\n              event,\n              this.state.valueAxisFromStartMove,\n            );\n            const nextStepValueAxis: number = this.calculateValueAxis(\n              this.state.thumbsValues[index] + this.state.stepSlider,\n            );\n            const previousStepValueAxis: number = this.calculateValueAxis(\n              this.state.thumbsValues[index] - this.state.stepSlider,\n            );\n\n            if (isFirstThumb) {\n              if (isOneThumb) {\n                if (this.state.currentValueAxis > this.state.stopValueAxis) {\n                  this.setIndentForTarget(this.state.stopValueAxis, index);\n                } else if (\n                  this.state.currentValueAxis < this.state.startValueAxis\n                ) {\n                  this.setIndentForTarget(this.state.startValueAxis, index);\n                } else if (this.state.stepSlider === 1) {\n                  this.setIndentForTarget(this.state.currentValueAxis, index);\n                } else {\n                  this.checkPreviousOrNextValueThumb(\n                    previousStepValueAxis,\n                    nextStepValueAxis,\n                    index,\n                  );\n                }\n              }\n              if (isMultipleThumbs) {\n                const offsetNextThumb: number = this.driver.getOffsetNextThumb(\n                  elements[index + 1],\n                  stepWidth,\n                );\n                if (this.state.currentValueAxis > offsetNextThumb) {\n                  this.setIndentForTarget(offsetNextThumb, index);\n                } else if (\n                  this.state.currentValueAxis < this.state.startValueAxis\n                ) {\n                  this.setIndentForTarget(this.state.startValueAxis, index);\n                } else if (this.state.stepSlider === 1) {\n                  this.setIndentForTarget(this.state.currentValueAxis, index);\n                } else {\n                  this.checkPreviousOrNextValueThumb(\n                    previousStepValueAxis,\n                    nextStepValueAxis,\n                    index,\n                  );\n                }\n              }\n            }\n            if (isIntermediateThumb) {\n              const offsetNextThumb: number = this.driver.getOffsetNextThumb(\n                elements[index + 1],\n                stepWidth,\n              );\n              const offsetPreviousThumb: number = this.driver.getOffsetPreviousThumb(\n                elements[index - 1],\n                stepWidth,\n              );\n\n              if (this.state.currentValueAxis > offsetNextThumb) {\n                this.setIndentForTarget(offsetNextThumb, index);\n              } else if (this.state.currentValueAxis < offsetPreviousThumb) {\n                this.setIndentForTarget(offsetPreviousThumb, index);\n              } else if (this.state.stepSlider === 1) {\n                this.setIndentForTarget(this.state.currentValueAxis, index);\n              } else {\n                this.checkPreviousOrNextValueThumb(\n                  previousStepValueAxis,\n                  nextStepValueAxis,\n                  index,\n                );\n              }\n            }\n            if (isLastThumb) {\n              const offsetPreviousThumb: number = this.driver.getOffsetPreviousThumb(\n                elements[index - 1],\n                stepWidth,\n              );\n\n              if (this.state.currentValueAxis < offsetPreviousThumb) {\n                this.setIndentForTarget(offsetPreviousThumb, index);\n              } else if (\n                this.state.currentValueAxis > this.state.stopValueAxis\n              ) {\n                this.setIndentForTarget(this.state.stopValueAxis, index);\n              } else if (this.state.stepSlider === 1) {\n                this.setIndentForTarget(this.state.currentValueAxis, index);\n              } else {\n                this.checkPreviousOrNextValueThumb(\n                  previousStepValueAxis,\n                  nextStepValueAxis,\n                  index,\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private setIndentForTarget(valueAxis: number, index: number): void {\n    if (this.driver !== null) {\n      if (this.state.target !== null) {\n        this.driver.setIndentForTarget(\n          this.state.target,\n          valueAxis,\n          this.slider,\n        );\n      }\n    }\n    this.state.currentValueAxis = valueAxis;\n    this.state.thumbValueAxis = valueAxis;\n    this.updateThumbPositionOnScale(index);\n  }\n\n  private checkPreviousOrNextValueThumb(\n    previousValueAxis: number,\n    nextValueAxis: number,\n    index: number,\n  ): void {\n    if (this.driver !== null) {\n      if (this.state.target !== null) {\n        if (this.state.currentValueAxis > nextValueAxis) {\n          this.driver.setIndentForTarget(\n            this.state.target,\n            nextValueAxis,\n            this.slider,\n          );\n          this.state.thumbValueAxis = nextValueAxis;\n          this.state.currentValueAxis = nextValueAxis;\n          this.updateThumbPositionOnScale(index);\n        }\n        if (this.state.currentValueAxis < previousValueAxis) {\n          this.driver.setIndentForTarget(\n            this.state.target,\n            previousValueAxis,\n            this.slider,\n          );\n          this.state.currentValueAxis = previousValueAxis;\n          this.state.thumbValueAxis = previousValueAxis;\n          this.updateThumbPositionOnScale(index);\n        }\n      }\n    }\n  }\n\n  private processStop(): void {\n    if (this.driver !== null) {\n      if (this.state.target !== null) {\n        if (this.state.currentValue !== null) {\n          this.calculateCoefficientPoint();\n          this.calculateShiftToMinValue();\n          this.driver.setIndentForTargetToProcessStop({\n            target: this.state.target,\n            coefficientPoint: this.state.coefficientPoint,\n            currentValue: this.state.currentValue,\n            shiftToMinValue: this.state.shiftToMinValue,\n            slider: this.slider,\n          });\n        }\n      }\n    }\n\n    document.removeEventListener('mousemove', this.handleThumbMove.bind(this));\n    document.removeEventListener('mouseup', this.handleThumbStop.bind(this));\n\n    this.state.currentValue = null;\n    this.state.currentThumbIndex = null;\n  }\n}\nexport default Thumbs;\n","import createElement from '../functions/createElement';\nimport { IModelState } from '../interfaces/iModelState';\nimport { IDriver } from '../interfaces/iDriver';\nimport driverHorizontal from './drivers/driverHorizontal';\nimport driverVertical from './drivers/driverVertical';\n\nclass Tooltips {\n  private slider: HTMLElement;\n\n  private tooltipsElements: HTMLElement[];\n\n  private textInTooltips!: HTMLElement[];\n\n  private tooltipsValues: number[];\n\n  private thumbsCount: number;\n\n  private orientation: string | null;\n\n  private driver: IDriver | null;\n\n  private isTooltip: boolean | null;\n\n  constructor(element: HTMLElement) {\n    this.slider = element;\n    this.tooltipsElements = [];\n    this.textInTooltips = [];\n    this.tooltipsValues = [];\n    this.thumbsCount = 0;\n    this.orientation = null;\n    this.driver = null;\n    this.isTooltip = null;\n  }\n\n  public initializeTooltips(state: IModelState): void {\n    if (this.thumbsCount !== state.thumbsCount) {\n      this.thumbsCount = state.thumbsCount;\n    }\n    if (this.tooltipsValues !== state.thumbsValues) {\n      this.tooltipsValues = state.thumbsValues;\n    }\n    if (this.orientation !== state.orientation) {\n      this.orientation = state.orientation;\n    }\n    if (state.orientation === 'horizontal') {\n      this.driver = driverHorizontal;\n    } else if (state.orientation === 'vertical') {\n      this.driver = driverVertical;\n    }\n\n    this.createTooltips(this.thumbsCount);\n    this.setTooltipsValues();\n\n    if (state.isTooltip) {\n      this.isTooltip = true;\n      this.showTooltip();\n    } else if (!state.isTooltip) {\n      this.isTooltip = false;\n      this.hideTooltip();\n    }\n  }\n\n  public setConfig(state: IModelState): void {\n    if (this.tooltipsValues !== state.thumbsValues) {\n      this.tooltipsValues = state.thumbsValues;\n    }\n    if (this.thumbsCount !== state.thumbsCount) {\n      this.thumbsCount = state.thumbsCount;\n      this.changeCountTooltips();\n    }\n    if (this.isTooltip !== state.isTooltip) {\n      if (state.isTooltip) {\n        this.isTooltip = true;\n        this.showTooltip();\n      } else if (!state.isTooltip) {\n        this.isTooltip = false;\n        this.hideTooltip();\n      }\n    }\n    if (this.orientation !== state.orientation) {\n      if (state.orientation === 'horizontal') {\n        this.driver = driverHorizontal;\n      }\n      if (state.orientation === 'vertical') {\n        this.driver = driverVertical;\n      }\n      this.orientation = state.orientation;\n      this.changeOrientation();\n      this.setTooltipsValues();\n    }\n    this.setTooltipsValues();\n  }\n\n  /* createTooltips function adds tooltip elements to the main html slider structure */\n  private createTooltips(thumbsCount: number): void {\n    new Array(thumbsCount).fill(1).forEach((_element: number, i: number) => {\n      if (this.driver !== null) {\n        const tooltip: HTMLElement = createElement(\n          'div',\n          'slider__tooltip js-slider__tooltip',\n        );\n        const textInTooltips: HTMLElement = this.driver.createElementTooltipText();\n\n        tooltip.append(textInTooltips);\n        const thumbs = this.slider.querySelectorAll('.js-slider__thumb');\n        thumbs[thumbs.length - (thumbsCount - i)].append(tooltip);\n        this.tooltipsElements.push(tooltip);\n        this.textInTooltips.push(textInTooltips);\n      }\n    });\n  }\n\n  /* sets the default sliders for their respective tooltips */\n  private setTooltipsValues(): void {\n    this.tooltipsValues.forEach((element: number, i: number) => {\n      this.textInTooltips[i].innerHTML = String(element);\n    });\n  }\n\n  /* changes the number of rendered tooltips */\n  private changeCountTooltips(): void {\n    if (this.tooltipsElements.length < this.thumbsCount) {\n      const thumbsCount: number =\n        this.thumbsCount - this.tooltipsElements.length;\n      this.createTooltips(thumbsCount);\n    }\n    if (this.tooltipsElements.length > this.thumbsCount) {\n      const excessCount: number =\n        this.tooltipsElements.length - this.thumbsCount;\n\n      new Array(excessCount).fill(1).forEach(() => {\n        this.tooltipsElements.splice(-1, 1);\n        this.textInTooltips.splice(-1, 1);\n      });\n    }\n  }\n\n  /* redraws tooltips when orientation changes */\n  private changeOrientation(): void {\n    if (this.driver !== null) {\n      const $tooltips: HTMLElement[] = Array.from(\n        $(this.slider).find('.js-slider__tooltip'),\n      );\n      this.textInTooltips = [];\n      const textInTooltips: HTMLElement[] = this.driver.searchElementsTooltipText(\n        this.slider,\n      );\n      textInTooltips.forEach((element: HTMLElement) => {\n        element.remove();\n      });\n      $tooltips.forEach((element: HTMLElement) => {\n        if (this.driver !== null) {\n          const tooltipText: HTMLElement = this.driver.createElementTooltipText();\n          element.append(tooltipText);\n          this.textInTooltips.push(tooltipText);\n        }\n      });\n    }\n  }\n\n  /* hideTooltip method hides sliders tooltips */\n  private hideTooltip(): void {\n    const $allTooltips: HTMLElement[] = Array.from(\n      $(this.slider).find('.js-slider__tooltip'),\n    );\n\n    $allTooltips.forEach((element: HTMLElement): void => {\n      element.classList.add('slider__tooltip-hide');\n    });\n  }\n\n  /* showTooltip method shows sliders tooltips */\n  private showTooltip(): void {\n    const $allTooltips: HTMLElement[] = Array.from(\n      $(this.slider).find('.js-slider__tooltip'),\n    );\n    $allTooltips.forEach((element: HTMLElement): void => {\n      element.classList.remove('slider__tooltip-hide');\n    });\n  }\n}\nexport default Tooltips;\n","import EventEmitter from '../EventEmitter';\nimport { IModelState } from '../interfaces/iModelState';\nimport Scale from './Scale';\nimport Thumbs from './Thumbs';\nimport Tooltips from './Tooltips';\n\nclass View {\n  private slider: HTMLElement;\n\n  private isCreatedSlider: boolean;\n\n  private emitter: EventEmitter;\n\n  private scale!: Scale;\n\n  private thumbs!: Thumbs;\n\n  private tooltips!: Tooltips;\n\n  constructor(slider: HTMLElement, eventEmitter: EventEmitter) {\n    this.slider = slider;\n    this.isCreatedSlider = false;\n    this.emitter = eventEmitter;\n    this.scale = new Scale(this.slider, this.emitter);\n    this.thumbs = new Thumbs(this.slider, this.emitter);\n    this.tooltips = new Tooltips(this.slider);\n    this.emitter.makeSubscribe('model:state-changed', (state: IModelState) => {\n      this.initialize(state);\n      this.rerender(state);\n    });\n    this.emitter.makeSubscribe('view:click-on-scale', (event: MouseEvent) => {\n      this.emitter.emit('view:update-thumbs-position', event);\n    });\n  }\n\n  private initialize(state: IModelState): void {\n    if (!this.isCreatedSlider) {\n      this.scale.initializeScale.call(this.scale, state);\n      this.thumbs.initializeThumbs.call(this.thumbs, state);\n      this.tooltips.initializeTooltips.call(this.tooltips, state);\n\n      this.isCreatedSlider = true;\n    }\n  }\n\n  private rerender(state: IModelState): void {\n    this.scale.setConfig.call(this.scale, state);\n    this.thumbs.setConfig.call(this.thumbs, state);\n    this.tooltips.setConfig.call(this.tooltips, state);\n  }\n}\nexport default View;\n","import { IModelState } from './interfaces/iModelState';\n\ninterface IData {\n  value: number;\n  index: number;\n}\ntype CallbackFunctionVariadic = (...args: any[]) => void;\ninterface StringArray {\n  [index: string]: CallbackFunctionVariadic[];\n}\nclass EventEmitter {\n  public handlersByEvent: StringArray;\n\n  constructor() {\n    this.handlersByEvent = {};\n  }\n\n  public makeSubscribe(\n    eventName: string,\n    fn: CallbackFunctionVariadic,\n  ): () => void {\n    if (!this.handlersByEvent[eventName]) {\n      this.handlersByEvent[eventName] = [];\n    }\n\n    this.handlersByEvent[eventName].push(fn);\n    return (): void => {\n      this.handlersByEvent[eventName] = this.handlersByEvent[eventName].filter(\n        eventFn => fn !== eventFn,\n      );\n    };\n  }\n\n  public emit(\n    eventName: string,\n    data: IModelState | IData | number[] | MouseEvent,\n  ): void {\n    const handlers: CallbackFunctionVariadic[] = this.handlersByEvent[\n      eventName\n    ];\n    if (handlers) {\n      handlers.forEach(fn => {\n        fn.call(null, data);\n      });\n    }\n  }\n}\nexport default EventEmitter;\n","import { IHTMLElement } from './interfaces/iHTMLElement';\nimport { IModelState } from './interfaces/iModelState';\nimport Model from './Model';\nimport View from './view/View';\nimport EventEmitter from './EventEmitter';\n\ninterface IData {\n  value: number;\n  index: number;\n}\n\nclass Controller {\n  public slider: IHTMLElement;\n\n  public model: Model;\n\n  constructor(element: IHTMLElement, props: IModelState) {\n    this.slider = element;\n    this.slider.classList.add('slider');\n\n    const eventEmitter = new EventEmitter();\n    new View(this.slider, eventEmitter);\n    this.model = new Model(eventEmitter, props);\n\n    this.attachPublicMethods(this.model, eventEmitter);\n\n    eventEmitter.makeSubscribe(\n      'view:countThumbs-changed',\n      (thumbsValues: number[]) => {\n        this.model.overwriteCurrentThumbsValues(thumbsValues);\n      },\n    );\n\n    eventEmitter.makeSubscribe('view:thumbsValues-changed', (data: IData) => {\n      this.model.setNewValueThumbsValues(data.value, data.index);\n    });\n  }\n\n  // public getState(): IModelState {\n  //   const modelState: IModelState = { ...this.model.state };\n  //   return modelState;\n  // }\n\n  private attachPublicMethods(model: Model, eventEmitter: EventEmitter) {\n    this.slider.getState = (): IModelState => {\n      const modelState: IModelState = { ...model.state };\n      return modelState;\n    };\n    this.slider.setNewValueMin = (min: number): void => {\n      model.setNewValueMin(min);\n    };\n    this.slider.setNewValueMax = (max: number): void => {\n      model.setNewValueMax(max);\n    };\n    this.slider.setNewValueCount = (count: number): void => {\n      model.setNewValueCount(count);\n      console.log('после смены значения', model.state);\n    };\n    this.slider.setNewValueThumbsValues = (\n      touchValue: number,\n      index: number,\n    ): void => {\n      model.setNewValueThumbsValues(touchValue, index);\n    };\n    this.slider.setNewValueStep = (step: number): void => {\n      model.setNewValueStep(step);\n    };\n    this.slider.setNewValueOrientation = (value: string): void => {\n      model.setNewValueOrientation(value);\n    };\n    this.slider.setNewValueTooltip = (value: boolean): void => {\n      model.setNewValueTooltip(value);\n    };\n    this.slider.setNewValueScaleOfValues = (value: boolean): void => {\n      model.setNewValueScaleOfValues(value);\n    };\n    this.slider.subscribeToStateModel = (\n      handler: (state: IModelState) => void,\n      isCreatedInput: boolean,\n      countInputs: () => Element[],\n      changeCountInputs: (state: IModelState) => void,\n      setValueToInputFromModelState: (state: IModelState) => void,\n      setValueToStepFromModelState: (state: IModelState) => void,\n      setValueToMinInputFromModelState: (state: IModelState) => void,\n      setValueMaxInputFromModelState: (state: IModelState) => void,\n    ): void => {\n      eventEmitter.makeSubscribe(\n        'model:state-changed',\n        (state: IModelState): void => {\n          console.log('model.state', state);\n\n          let isCreatedElement = isCreatedInput;\n          console.log('isCreatedElement', isCreatedElement);\n\n          if (!isCreatedElement) {\n            handler(state);\n            isCreatedElement = true;\n          }\n          const arrayCountInputs = countInputs();\n          console.log('arrayCountInputs', arrayCountInputs);\n\n          if (arrayCountInputs.length !== state.thumbsValues.length) {\n            changeCountInputs(state);\n          }\n          setValueToInputFromModelState(state);\n          setValueToStepFromModelState(state);\n          setValueToMinInputFromModelState(state);\n          setValueMaxInputFromModelState(state);\n        },\n      );\n    };\n  }\n}\nexport default Controller;\n","import Controller from './Controller';\nimport { IHTMLElement } from './interfaces/iHTMLElement';\n\n(function callSlider($) {\n  const $jquery = $;\n  ($jquery.fn as any).slider = function renderSliders(\n    method?: {} | string,\n    ...arg: any\n  ) {\n    const methods = {\n      setOption($slider: JQuery<HTMLElement>, options: {} | undefined) {\n        const element = ($slider[0] as unknown) as IHTMLElement;\n\n        const settings = $.extend(\n          true,\n          {\n            min: 0,\n            max: 100,\n            thumbsValues: [20, 32, 44, 60],\n            orientation: 'horizontal',\n            thumbsCount: 4,\n            step: 2,\n            isTooltip: true,\n            isScaleOfValues: true,\n          },\n          options,\n        );\n\n        $slider.data('controller', new Controller(element, settings));\n\n        return $slider;\n      },\n      // getState($slider: JQuery<HTMLElement>) {\n      //   const data = $slider.data('controller').getState();\n      //   console.log('data', data);\n\n      //   return $slider;\n      // },\n    };\n\n    const isMethod = typeof method === 'object' || !method;\n\n    if (typeof method === 'string') {\n      return (methods as any)[method].call(this, this, ...arg);\n    }\n    if (isMethod) {\n      return methods.setOption(this, method);\n    }\n  };\n})(jQuery);\n","import ConfigurationPanel from '../components/configuration-panel/configuration-panel';\nimport '../../slider/slider';\n\nconst firstSetOfOptions = {\n  min: 20,\n  max: 80,\n  thumbsValues: [20, 32, 44, 60],\n  orientation: 'horizontal',\n  thumbsCount: 4,\n  step: 2,\n  isTooltip: true,\n  isScaleOfValues: true,\n};\n\nconst secondSetOfOptions = {\n  min: 0,\n  max: 100,\n  thumbsValues: [20, 35, 45, 60],\n  orientation: 'vertical',\n  thumbsCount: 3,\n  step: 5,\n  isTooltip: false,\n  isScaleOfValues: true,\n};\n\nconst thirdSetOfOptions = {\n  min: 0,\n  max: 100,\n  thumbsValues: [21, 33, 60, 72],\n  orientation: 'horizontal',\n  thumbsCount: 4,\n  step: 3,\n  isTooltip: true,\n  isScaleOfValues: false,\n};\n\nconst options = [firstSetOfOptions, secondSetOfOptions, thirdSetOfOptions];\n\nconst $elementsSlider = $('.js-slider-test');\n$elementsSlider.each((index, element) => {\n  new ConfigurationPanel(\n    $(element).slider(options[index]),\n    index,\n  );\n});\n"]}