{"version":3,"sources":["demo/components/configuration-panel/utilities.ts","demo/components/configuration-panel/configuration-panel.ts"],"names":[],"mappings":"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","file":"configuration-panel.0cc93753.js","sourceRoot":"../src","sourcesContent":["import { IHTMLElement } from '../../../slider/interfaces/iHTMLElement';\n\nconst utilities = {\n  createElement(tag: string, className: string): IHTMLElement {\n    const htmlElement: IHTMLElement = document.createElement(\n      tag,\n    ) as IHTMLElement;\n    htmlElement.className = className;\n    return htmlElement;\n  },\n};\n\nexport default utilities;\n","import { IModelState } from '../../../slider/interfaces/iModelState';\nimport utilities from './utilities';\n\nclass ConfigurationPanel {\n  public connection: PlainObject<any>;\n\n  public sliderIndex: number;\n\n  public elements: {\n    panel: HTMLElement | null;\n    minValue: HTMLInputElement | null;\n    maxValue: HTMLInputElement | null;\n    countSliderThumbs: HTMLInputElement[] | null;\n    inputsSliderThumbs: HTMLInputElement[] | null;\n    stepSize: HTMLInputElement[] | null;\n    orientationButtons: HTMLInputElement[] | null;\n    checkboxContainer: HTMLInputElement[] | null;\n    checkboxInputTooltip: HTMLInputElement[] | null;\n    checkboxInputScaleOfValues: HTMLInputElement[] | null;\n    forms: HTMLElement[] | null;\n  };\n\n  constructor(element: JQuery<HTMLElement>, index: number) {\n    this.connection = element.data();\n    this.sliderIndex = index;\n\n    this.elements = {\n      panel: null,\n      minValue: null,\n      maxValue: null,\n      countSliderThumbs: null,\n      inputsSliderThumbs: null,\n      stepSize: null,\n      orientationButtons: null,\n      checkboxContainer: null,\n      checkboxInputTooltip: null,\n      checkboxInputScaleOfValues: null,\n      forms: null,\n    };\n\n    this.connection.subscribeToModelChanges((state: IModelState) => {\n      this.render(state);\n    });\n\n    this.connection.subscribeToThumbsChanges((thumbsValues: number[]) => {\n      this.updateThumbsValues(thumbsValues);\n    });\n\n    this.findElements();\n    this.bindEventListeners();\n    this.render(this.connection.getState());\n  }\n\n  render(state: IModelState): void {\n    this.createInput(state);\n    this.setValuesFromState(state);\n  }\n\n  updateThumbsValues(thumbsValues: number[]): void {\n    this.elements.inputsSliderThumbs?.forEach((element, i) => {\n      const thumb = element;\n      thumb.value = String(thumbsValues[i]);\n    });\n  }\n\n  findElements(): void {\n    const configurationPanels = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n\n    this.elements.panel = configurationPanels[this.sliderIndex] as HTMLElement;\n\n    const $minMaxContainer = $('.js-field__min-max');\n    const $minMaxValues: HTMLInputElement[] = Array.from(\n      $($minMaxContainer[this.sliderIndex]).find('.js-input__value'),\n    ) as HTMLInputElement[];\n    [this.elements.minValue, this.elements.maxValue] = $minMaxValues;\n\n    const $countThumbsContainer = $('.js-configuration__field-count-thumb');\n    this.elements.countSliderThumbs = Array.from(\n      $($countThumbsContainer[this.sliderIndex]).find('.js-input__value'),\n    ) as HTMLInputElement[];\n\n    const $thumbsValuesContainer = $('.js-field__thumbs-values');\n    this.elements.inputsSliderThumbs = Array.from(\n      $thumbsValuesContainer[this.sliderIndex].querySelectorAll(\n        '.js-configuration__thumb-value',\n      ),\n    );\n\n    const $stepSizeContainer = $('.js-configuration__field-step-size');\n    this.elements.stepSize = Array.from(\n      $($stepSizeContainer[this.sliderIndex]).find('.js-input__value'),\n    ) as HTMLInputElement[];\n\n    this.elements.orientationButtons = Array.from(\n      $(this.elements.panel).find('.js-radio-button__content'),\n    ) as HTMLInputElement[];\n\n    this.elements.checkboxContainer = Array.from(\n      $(this.elements.panel).find('.js-checkbox-button'),\n    ) as HTMLInputElement[];\n    this.elements.checkboxInputTooltip = Array.from(\n      $(this.elements.panel).find('.js-checkbox-button__tooltip'),\n    ) as HTMLInputElement[];\n    this.elements.checkboxInputScaleOfValues = Array.from(\n      $(this.elements.panel).find('.js-checkbox-button__scale-of-values'),\n    ) as HTMLInputElement[];\n\n    this.elements.forms = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    ) as HTMLElement[];\n  }\n\n  setValuesFromState(state: IModelState): void {\n    if (this.elements.orientationButtons !== null) {\n      if (state.orientation === 'horizontal') {\n        this.elements.orientationButtons[0].checked = true;\n      }\n      if (state.orientation === 'vertical') {\n        this.elements.orientationButtons[1].checked = true;\n      }\n    }\n\n    if (this.elements.minValue !== null) {\n      this.elements.minValue.value = String(state.min);\n    }\n    if (this.elements.maxValue !== null) {\n      this.elements.maxValue.value = String(state.max);\n    }\n\n    if (this.elements.countSliderThumbs !== null) {\n      this.elements.countSliderThumbs[0].value = String(state.thumbsCount);\n    }\n\n    if (this.elements.stepSize !== null) {\n      this.elements.stepSize[0].value = String(state.step);\n    }\n\n    if (this.elements.checkboxInputTooltip !== null) {\n      if (!state.isTooltip) {\n        this.elements.checkboxInputTooltip[0].checked = false;\n      } else {\n        this.elements.checkboxInputTooltip[0].checked = true;\n      }\n    }\n\n    if (this.elements.checkboxInputScaleOfValues !== null) {\n      if (!state.isScaleOfValues) {\n        this.elements.checkboxInputScaleOfValues[0].checked = false;\n      }\n      if (state.isScaleOfValues) {\n        this.elements.checkboxInputScaleOfValues[0].checked = true;\n      }\n    }\n  }\n\n  createInput(state: IModelState): void {\n    const thumbsCurrentValuesList: HTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration__thumbs-current-value-list'),\n    );\n\n    thumbsCurrentValuesList[this.sliderIndex].innerHTML = '';\n\n    const fragmentCurrentValueList = document.createDocumentFragment();\n\n    new Array(state.thumbsCount)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        const currentValueItem: HTMLElement = utilities.createElement(\n          'li',\n          'configuration__thumbs-item js-configuration__thumbs-item',\n        );\n        const currentValueInput: HTMLElement = utilities.createElement(\n          'input',\n          'configuration__thumbs-value js-configuration__thumb-value',\n        );\n        currentValueInput.setAttribute('type', 'number');\n        currentValueInput.setAttribute('step', 'any');\n        currentValueInput.setAttribute('value', String(state.thumbsValues[i]));\n\n        currentValueItem.append(currentValueInput);\n        fragmentCurrentValueList.append(currentValueItem);\n      });\n    thumbsCurrentValuesList[this.sliderIndex].append(fragmentCurrentValueList);\n\n    this.elements.inputsSliderThumbs = Array.from(\n      thumbsCurrentValuesList[this.sliderIndex].querySelectorAll(\n        '.js-configuration__thumb-value',\n      ),\n    );\n    this.listenInputsSliderThumbs();\n  }\n\n  bindEventListeners(): void {\n    this.listenMinValue();\n    this.listenMaxValue();\n    this.listenThumbsCount();\n    this.listenStepSize();\n    this.listenOrientationSlider();\n    this.listenCheckboxContainer();\n    this.listenForm();\n  }\n\n  listenMinValue(): void {\n    this.elements.minValue?.addEventListener(\n      'blur',\n      this.handleElementClickOrBlur.bind(this),\n    );\n  }\n\n  listenMaxValue(): void {\n    this.elements.maxValue?.addEventListener(\n      'blur',\n      this.handleElementClickOrBlur.bind(this),\n    );\n  }\n\n  listenThumbsCount(): void {\n    if (this.elements.countSliderThumbs !== null) {\n      this.elements.countSliderThumbs[0].addEventListener(\n        'blur',\n        this.handleElementClickOrBlur.bind(this),\n      );\n    }\n  }\n\n  listenStepSize(): void {\n    if (this.elements.stepSize !== null) {\n      this.elements.stepSize[0].addEventListener(\n        'blur',\n        this.handleElementClickOrBlur.bind(this),\n      );\n    }\n  }\n\n  listenInputsSliderThumbs(): void {\n    this.elements.inputsSliderThumbs?.forEach(element => {\n      element.addEventListener(\n        'blur',\n        this.handleElementClickOrBlur.bind(this),\n      );\n    });\n  }\n\n  listenOrientationSlider(): void {\n    this.elements.orientationButtons?.forEach(element => {\n      element.addEventListener(\n        'click',\n        this.handleElementClickOrBlur.bind(this),\n      );\n    });\n  }\n\n  listenCheckboxContainer(): void {\n    this.elements.checkboxContainer?.forEach(element => {\n      element.addEventListener(\n        'click',\n        this.handleElementClickOrBlur.bind(this),\n      );\n    });\n  }\n\n  listenForm(): void {\n    if (this.elements.forms !== null) {\n      this.elements.forms.forEach((elementForm: HTMLElement) => {\n        elementForm.addEventListener(\n          'submit',\n          this.handleElementFormSubmit.bind(this),\n        );\n      });\n    }\n  }\n\n  handleElementClickOrBlur(): void {\n    const state = this.getValuesFromAllInputs();\n    this.connection.update(state);\n  }\n\n  handleElementFormSubmit: (event: Event) => void = (event): void => {\n    const currentEvent: Event = event;\n    currentEvent.preventDefault();\n\n    const state = this.getValuesFromAllInputs();\n    this.connection.update(state);\n  };\n\n  getValuesFromAllInputs(): IModelState {\n    const state: IModelState = {\n      min: Number(this.elements.minValue?.value),\n      max: Number(this.elements.maxValue?.value),\n      step: 0,\n      thumbsCount: 0,\n      thumbsValues: [],\n      isScaleOfValues: true,\n      isTooltip: true,\n      orientation: 'horizontal',\n    };\n\n    if (this.elements.stepSize !== null) {\n      state.step = Number(this.elements.stepSize[0].value);\n    }\n\n    if (this.elements.countSliderThumbs !== null) {\n      state.thumbsCount = Number(this.elements.countSliderThumbs[0].value);\n    }\n\n    this.elements.inputsSliderThumbs?.forEach((element, i) => {\n      state.thumbsValues[i] = Number(element.value);\n    });\n\n    if (this.elements.checkboxInputScaleOfValues !== null) {\n      if (!this.elements.checkboxInputScaleOfValues[0].checked) {\n        state.isScaleOfValues = false;\n      }\n    }\n\n    if (this.elements.checkboxInputTooltip !== null) {\n      if (!this.elements.checkboxInputTooltip[0].checked) {\n        state.isTooltip = false;\n      }\n    }\n\n    if (this.elements.orientationButtons !== null) {\n      if (this.elements.orientationButtons[1].checked === true) {\n        state.orientation = 'vertical';\n      }\n    }\n\n    return state;\n  }\n}\nexport default ConfigurationPanel;\n"]}