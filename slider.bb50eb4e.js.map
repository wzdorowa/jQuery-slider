{"version":3,"sources":["../../slider/model.ts","../../slider/functions/createElement.ts","../../slider/view/drivers/driverHorizontal.ts","../../slider/view/drivers/driverVertical.ts","../../slider/view/scale.ts","../../slider/view/thumbs.ts","../../slider/view/tooltips.ts","../../slider/view/view.ts","../../slider/eventEmitter.ts","../../slider/controller.ts","../../slider/slider.ts"],"names":[],"mappings":"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","file":"slider.bb50eb4e.js","sourceRoot":"../src/pages/demo","sourcesContent":["import { IModelState } from './interfaces/iModelState';\nimport EventEmitter from './eventEmitter';\n\nclass Model {\n  public state: IModelState;\n\n  private emitter: EventEmitter;\n\n  constructor(eventEmitter: EventEmitter) {\n    this.state = {\n      min: 0,\n      max: 100,\n      thumbsValues: [20, 32, 44, 60],\n      orientation: 'horizontal',\n      amount: 4,\n      step: 2,\n      isTooltip: true,\n    };\n\n    this.emitter = eventEmitter;\n    this.notifyStateChanged();\n\n    this.emitter.makeSubscribe('model:state-changed', (state: IModelState) => {\n      this.checkMinValueInArrayThumbsValues(state);\n      this.checkMaxValueInArrayThumbsValues(state);\n      this.checkThumbsValues(state);\n      this.checkThumbsValuesForOverlap();\n    });\n  }\n\n  // set new min value\n  public setNewValueMin(min: number): void {\n    if (this.state.min === min) {\n      return;\n    }\n    this.state.min = min;\n    this.notifyStateChanged();\n  }\n\n  // set new value max\n  public setNewValueMax(max: number): void {\n    if (this.state.max === max) {\n      return;\n    }\n    this.state.max = max;\n    this.notifyStateChanged();\n  }\n\n  // set a new number of thumbs\n  public setNewValueAmount(amount: number): void {\n    if (this.state.amount === amount) {\n      return;\n    }\n    if (amount <= 0) {\n      this.state.amount = 1;\n    } else if (amount >= 10) {\n      this.state.amount = 10;\n    } else {\n      this.state.amount = amount;\n    }\n    this.notifyStateChanged();\n  }\n\n  // set a new value for the thumb state\n  public setNewValueThumbsValues(thumbValue: number, index: number): void {\n    if (this.state.thumbsValues[index] === thumbValue) {\n      return;\n    }\n    this.state.thumbsValues[index] = thumbValue;\n    this.notifyStateChanged();\n  }\n\n  // set a new value for the step of moving the thumbs\n  public setNewValueStep(step: number): void {\n    if (this.state.step === step) {\n      return;\n    }\n    if (step <= 0) {\n      this.state.step = 1;\n    } else if (step >= this.state.max / this.state.thumbsValues.length - 1) {\n      this.state.step = this.state.max / this.state.thumbsValues.length - 1;\n    } else {\n      this.state.step = step;\n    }\n    this.notifyStateChanged();\n  }\n\n  // set a new value for the tooltip field\n  public setNewValueTooltip(value: boolean): void {\n    if (value !== this.state.isTooltip) {\n      this.state.isTooltip = value;\n      this.notifyStateChanged();\n    }\n  }\n\n  // set new value for orientation field\n  public setNewValueOrientation(value: string): void {\n    if (value === 'horizontal') {\n      this.state.orientation = 'horizontal';\n    } else if (value === 'vertical') {\n      this.state.orientation = 'vertical';\n    }\n    this.notifyStateChanged();\n  }\n\n  public overwriteCurrentThumbsValues(thumbsValues: number[]): void {\n    this.state.thumbsValues = thumbsValues;\n    this.notifyStateChanged();\n  }\n\n  public setCurrentThumbsValues(value: number, index: number): void {\n    this.state.thumbsValues[index] = value;\n    this.notifyStateChanged();\n  }\n\n  private notifyStateChanged(): void {\n    this.emitter.emit('model:state-changed', this.state);\n  }\n\n  private checkMinValueInArrayThumbsValues(state: IModelState): void {\n    if (state.min > this.state.thumbsValues[0]) {\n      this.state.thumbsValues[0] = state.min;\n      this.notifyStateChanged();\n    }\n  }\n\n  private checkMaxValueInArrayThumbsValues(state: IModelState): void {\n    if (\n      state.max < this.state.thumbsValues[this.state.thumbsValues.length - 1]\n    ) {\n      this.state.thumbsValues[this.state.thumbsValues.length - 1] = state.max;\n      this.notifyStateChanged();\n    }\n  }\n\n  // Calculate thumbs values based on step size\n  private checkThumbsValues(state: IModelState): void {\n    state.thumbsValues.forEach((element: number, i: number) => {\n      const newValue: number = element;\n      const remainderOfTheDivision: number = newValue % state.step;\n      const newCurrentValue: number = newValue - remainderOfTheDivision;\n      const maxPossibleValue: number =\n        state.max -\n        (state.max % state.step) -\n        (state.thumbsValues.length - 1 - i) * state.step;\n      let minPossibleValue: number =\n        state.min - (state.min % state.step) + i * state.step;\n\n      if (minPossibleValue < state.min) {\n        minPossibleValue += state.step;\n      }\n\n      if (newCurrentValue > maxPossibleValue) {\n        this.state.thumbsValues[i] = maxPossibleValue;\n        this.notifyStateChanged();\n      } else if (newCurrentValue < minPossibleValue) {\n        this.state.thumbsValues[i] = minPossibleValue;\n        this.notifyStateChanged();\n      } else if (this.state.thumbsValues[i] !== newCurrentValue) {\n        this.state.thumbsValues[i] = newCurrentValue;\n        this.notifyStateChanged();\n      }\n\n      if (newCurrentValue < state.min) {\n        this.state.thumbsValues[i] = minPossibleValue;\n        this.notifyStateChanged();\n      }\n      if (newCurrentValue > state.max) {\n        this.state.thumbsValues[i] = maxPossibleValue;\n        this.notifyStateChanged();\n      }\n    });\n  }\n\n  // Check sliders overlap\n  private checkThumbsValuesForOverlap(): void {\n    this.state.thumbsValues.forEach((element: number, i: number) => {\n      const maxPossibleValue: number =\n        this.state.max -\n        (this.state.thumbsValues.length - 1 - i) * this.state.step;\n      const minPossibleValue: number = this.state.min + i * this.state.step;\n      const isIntermediateThumb: boolean =\n        i !== 0 && element <= this.state.thumbsValues[i - 1];\n      const isLastThumb: boolean =\n        i !== this.state.thumbsValues[this.state.thumbsValues.length - 1] &&\n        element >= this.state.thumbsValues[i + 1];\n\n      if (isIntermediateThumb) {\n        this.state.thumbsValues[i - 1] =\n          this.state.thumbsValues[i] - this.state.step;\n        if (\n          this.state.thumbsValues[i - 1] <\n          minPossibleValue - this.state.step\n        ) {\n          this.state.thumbsValues[i - 1] = minPossibleValue - this.state.step;\n          this.state.thumbsValues[i] = minPossibleValue;\n        }\n        this.notifyStateChanged();\n      }\n      if (isLastThumb) {\n        this.state.thumbsValues[i + 1] =\n          this.state.thumbsValues[i] + this.state.step;\n        if (\n          this.state.thumbsValues[i + 1] >\n          maxPossibleValue + this.state.step\n        ) {\n          this.state.thumbsValues[i + 1] = maxPossibleValue + this.state.step;\n          this.state.thumbsValues[i] = maxPossibleValue;\n        }\n        this.notifyStateChanged();\n      }\n    });\n  }\n}\nexport default Model;\n","/* функция CreateElement создает необходимый элемент с заданным классом */\nconst createElement = (teg: string, className: string): HTMLElement => {\n  const element: HTMLElement = document.createElement(teg);\n  element.className = className;\n  return element;\n};\nexport default createElement;\n","import { IModelState } from '../../interfaces/iModelState';\nimport { IDriver } from '../../interfaces/iDriver';\nimport createElement from '../../functions/createElement';\n\nconst driverHorizontal: IDriver = {\n  getElementOffset(element: HTMLElement): number {\n    return element.offsetLeft;\n  },\n  createElementTooltipText(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__tooltip-text js-slider__tooltip-text',\n    );\n    return element;\n  },\n  createElementScale(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'div',\n      'slider__scale js-slider__scale',\n    );\n    return element;\n  },\n  createElementActiveRange(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__active-range js-slider__active-range',\n    );\n    return element;\n  },\n  searchElementsTooltipText(slider: HTMLElement): HTMLElement[] {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__vertical-tooltip-text'),\n    );\n    return $elements;\n  },\n  calculateCoefficientPoint(\n    scale: HTMLElement,\n    max: number,\n    min: number,\n  ): number {\n    return scale.offsetWidth / (max - min);\n  },\n  searchElementScaleToDelete(slider: HTMLElement): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find(\n      '.js-slider__vertical-scale',\n    );\n    return $element;\n  },\n  searchElementActiveRangeToDelete(slider: HTMLElement): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find(\n      '.js-slider__vertical-active-range',\n    );\n    return $element;\n  },\n  setInPlaceThumb(\n    elements: HTMLElement[],\n    modelState: IModelState,\n    activeRange: HTMLElement,\n    scale: HTMLElement,\n  ): void {\n    new Array(elements.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        const thumb = elements[i];\n        const indentLeft = String(\n          Math.ceil(\n            driverHorizontal.calculateCoefficientPoint(\n              scale,\n              modelState.max,\n              modelState.min,\n            ) * modelState.thumbsValues[i],\n          ),\n        );\n        thumb.style.left = `${indentLeft}px`;\n      });\n\n    const range = activeRange;\n    const marginLeft = String(driverHorizontal.getElementOffset(elements[0]));\n    const width = String(\n      driverHorizontal.getElementOffset(elements[elements.length - 1]) -\n        driverHorizontal.getElementOffset(elements[0]),\n    );\n    range.style.marginLeft = `${marginLeft}px`;\n    range.style.width = `${width}px`;\n  },\n  setInPlaceNewThumb(\n    elements: HTMLElement[],\n    currentThumbIndex: number | null,\n    coefficientPoint: number,\n    modelState: IModelState,\n    shiftToMinValue: number,\n    activeRange: HTMLElement,\n  ): void {\n    const range = activeRange;\n    new Array(elements.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        if (i !== currentThumbIndex) {\n          const thumb = elements[i];\n          const indentLeft = String(\n            Math.ceil(coefficientPoint * modelState.thumbsValues[i]) -\n              shiftToMinValue,\n          );\n          thumb.style.top = '';\n          thumb.style.left = `${indentLeft}px`;\n        }\n      });\n    range.style.marginTop = '';\n    range.style.height = '';\n\n    const marginLeft = String(driverHorizontal.getElementOffset(elements[0]));\n    const width = String(\n      driverHorizontal.getElementOffset(elements[elements.length - 1]) -\n        driverHorizontal.getElementOffset(elements[0]),\n    );\n    range.style.marginLeft = `${marginLeft}px`;\n    range.style.width = `${width}px`;\n  },\n  getCurrentValueAxisToProcessStart(target: HTMLElement): number {\n    return target.offsetLeft;\n  },\n  getStartValueAxisToProcessStart(\n    eventThumb: MouseEvent,\n    currentXorY: number,\n  ): number {\n    return eventThumb.pageX - currentXorY;\n  },\n  getMaxValueAxisToProcessStart(scale: HTMLElement): number {\n    return scale.offsetWidth;\n  },\n  getCurrentValueAxisToProcessMove(\n    eventThumb: MouseEvent,\n    startXorY: number,\n  ): number {\n    return eventThumb.pageX - startXorY;\n  },\n  setIndentForTarget(target: HTMLElement, currentXorY: number): void {\n    const element = target;\n    const indentLeft = String(currentXorY);\n    element.style.left = `${indentLeft}px`;\n  },\n  getTargetWidth(target: HTMLElement): number {\n    return target.offsetWidth;\n  },\n  setIndentForTargetToProcessStop(\n    target: HTMLElement,\n    coefficientPoint: number,\n    currentValue: number,\n    shiftToMinValue: number,\n  ): void {\n    const element = target;\n    const indentLeft = String(\n      Math.ceil(coefficientPoint * currentValue) - shiftToMinValue,\n    );\n    element.style.left = `${indentLeft}px`;\n  },\n  updateActiveRange(activeRange: HTMLElement, elements: HTMLElement[]): void {\n    const range = activeRange;\n    const marginLeft = String(driverHorizontal.getElementOffset(elements[0]));\n    const width = String(\n      driverHorizontal.getElementOffset(elements[elements.length - 1]) -\n        driverHorizontal.getElementOffset(elements[0]),\n    );\n    range.style.marginLeft = `${marginLeft}px`;\n    range.style.width = `${width}px`;\n  },\n  calculateClickLocation(event: MouseEvent, target: HTMLElement): number {\n    return event.offsetX + target.offsetLeft;\n  },\n  getOffsetFromClick(event: MouseEvent): number {\n    return event.offsetX;\n  },\n};\nexport default driverHorizontal;\n","import { IModelState } from '../../interfaces/iModelState';\nimport { IDriver } from '../../interfaces/iDriver';\nimport createElement from '../../functions/createElement';\n\nconst driverVertical: IDriver = {\n  getElementOffset(element: HTMLElement): number {\n    return element.offsetTop;\n  },\n  createElementTooltipText(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__vertical-tooltip-text js-slider__vertical-tooltip-text',\n    );\n    return element;\n  },\n  createElementScale(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'div',\n      'slider__vertical-scale js-slider__vertical-scale',\n    );\n    return element;\n  },\n  createElementActiveRange(): HTMLElement {\n    const element: HTMLElement = createElement(\n      'span',\n      'slider__vertical-active-range js-slider__vertical-active-range',\n    );\n    return element;\n  },\n  searchElementsTooltipText(slider: HTMLElement): HTMLElement[] {\n    const $elements: HTMLElement[] = Array.from(\n      $(slider).find('.js-slider__tooltip-text'),\n    );\n    return $elements;\n  },\n  searchElementScaleToDelete(slider: HTMLElement): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find('.js-slider__scale');\n    return $element;\n  },\n  searchElementActiveRangeToDelete(slider: HTMLElement): JQuery<HTMLElement> {\n    const $element: JQuery<HTMLElement> = $(slider).find(\n      '.js-slider__active-range',\n    );\n    return $element;\n  },\n  calculateCoefficientPoint(\n    scale: HTMLElement,\n    max: number,\n    min: number,\n  ): number {\n    return scale.offsetHeight / (max - min);\n  },\n  setInPlaceThumb(\n    elements: HTMLElement[],\n    modelState: IModelState,\n    activeRange: HTMLElement,\n    scale: HTMLElement,\n  ): void {\n    const range = activeRange;\n    new Array(elements.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        const thumb = elements[i];\n        const indentTop = String(\n          Math.ceil(\n            driverVertical.calculateCoefficientPoint(\n              scale,\n              modelState.max,\n              modelState.min,\n            ) * modelState.thumbsValues[i],\n          ),\n        );\n        thumb.style.top = `${indentTop}px`;\n      });\n\n    const marginTop = String(driverVertical.getElementOffset(elements[0]));\n    const height = String(\n      driverVertical.getElementOffset(elements[elements.length - 1]) -\n        driverVertical.getElementOffset(elements[0]),\n    );\n    range.style.marginTop = `${marginTop}px`;\n    range.style.height = `${height}px`;\n  },\n  setInPlaceNewThumb(\n    elements: HTMLElement[],\n    currentThumbIndex: number | null,\n    coefficientPoint: number,\n    modelState: IModelState,\n    shiftToMinValue: number,\n    activeRange: HTMLElement,\n  ): void {\n    const range = activeRange;\n    new Array(elements.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        if (i !== currentThumbIndex) {\n          const thumb = elements[i];\n          const indentTop = String(\n            Math.ceil(coefficientPoint * modelState.thumbsValues[i]) -\n              shiftToMinValue,\n          );\n          thumb.style.left = '';\n          thumb.style.top = `${indentTop}px`;\n        }\n      });\n    range.style.marginLeft = '';\n    range.style.width = '';\n\n    const marginTop = String(driverVertical.getElementOffset(elements[0]));\n    const height = String(\n      driverVertical.getElementOffset(elements[elements.length - 1]) -\n        driverVertical.getElementOffset(elements[0]),\n    );\n    range.style.marginTop = `${marginTop}px`;\n    range.style.height = `${height}px`;\n  },\n  getCurrentValueAxisToProcessStart(target: HTMLElement): number {\n    return target.offsetTop;\n  },\n  getStartValueAxisToProcessStart(\n    eventThumb: MouseEvent,\n    currentXorY: number,\n  ): number {\n    return eventThumb.pageY - currentXorY;\n  },\n  getMaxValueAxisToProcessStart(scale: HTMLElement): number {\n    return scale.offsetHeight;\n  },\n  getCurrentValueAxisToProcessMove(\n    eventThumb: MouseEvent,\n    startXorY: number,\n  ): number {\n    return eventThumb.pageY - startXorY;\n  },\n  setIndentForTarget(target: HTMLElement, currentXorY: number): void {\n    const element = target;\n    const indentTop = String(currentXorY);\n    element.style.top = `${indentTop}px`;\n  },\n  getTargetWidth(target: HTMLElement): number {\n    return target.offsetHeight;\n  },\n  setIndentForTargetToProcessStop(\n    target: HTMLElement,\n    coefficientPoint: number,\n    currentValue: number,\n    shiftToMinValue: number,\n  ): void {\n    const element = target;\n    const indentTop = String(\n      Math.ceil(coefficientPoint * currentValue) - shiftToMinValue,\n    );\n    element.style.top = `${indentTop}px`;\n  },\n  updateActiveRange(activeRange: HTMLElement, elements: HTMLElement[]): void {\n    const range = activeRange;\n    const marginTop = String(driverVertical.getElementOffset(elements[0]));\n    const height = String(\n      driverVertical.getElementOffset(elements[elements.length - 1]) -\n        driverVertical.getElementOffset(elements[0]),\n    );\n    range.style.marginTop = `${marginTop}px`;\n    range.style.height = `${height}px`;\n  },\n  calculateClickLocation(event: MouseEvent, target: HTMLElement): number {\n    return event.offsetY + target.offsetTop;\n  },\n  getOffsetFromClick(event: MouseEvent): number {\n    return event.offsetY;\n  },\n};\nexport default driverVertical;\n","import { IModelState } from '../interfaces/iModelState';\nimport { IDriver } from '../interfaces/iDriver';\n\nclass Scale {\n  public slider: HTMLElement;\n\n  public scale!: HTMLElement;\n\n  public activeRange!: HTMLElement;\n\n  constructor(element: HTMLElement) {\n    this.slider = element;\n  }\n\n  /* function createScale adds scale elements to the main html slider structure */\n  createScale(driver: IDriver): void {\n    const scale: HTMLElement = driver.createElementScale();\n    const activeRange: HTMLElement = driver.createElementActiveRange();\n\n    this.slider.append(scale);\n    scale.append(activeRange);\n\n    this.activeRange = activeRange;\n    this.scale = scale;\n  }\n\n  changeOrientation(\n    setThumbToNewPosition: (\n      event: MouseEvent,\n      modelState: IModelState,\n      driver: IDriver,\n    ) => void,\n    modelState: IModelState,\n    driver: IDriver,\n  ): void {\n    const activeRangeToRemove: JQuery<HTMLElement> = driver.searchElementActiveRangeToDelete(\n      this.slider,\n    );\n    activeRangeToRemove.remove();\n    const scaleToDelete: JQuery<HTMLElement> = driver.searchElementScaleToDelete(\n      this.slider,\n    );\n    scaleToDelete.remove();\n\n    this.createScale(driver);\n    this.listenScaleEvents(setThumbToNewPosition, modelState, driver);\n  }\n\n  listenScaleEvents(\n    setThumbToNewPosition: (\n      event: MouseEvent,\n      modelState: IModelState,\n      driver: IDriver,\n    ) => void,\n    modelState: IModelState,\n    driver: IDriver,\n  ): void {\n    const handleScaleClick: (event: MouseEvent) => void = event =>\n      setThumbToNewPosition(event, modelState, driver);\n    this.scale.addEventListener('click', handleScaleClick);\n  }\n}\nexport default Scale;\n","import EventEmitter from '../eventEmitter';\nimport createElement from '../functions/createElement';\nimport { IModelState } from '../interfaces/iModelState';\nimport { IThumbsState } from '../interfaces/IThumbsState';\nimport { IDriver } from '../interfaces/iDriver';\n\nclass Thumbs {\n  private slider: HTMLElement;\n\n  private emitter: EventEmitter;\n\n  public state: IThumbsState;\n\n  public driver: IDriver | null;\n\n  constructor(element: HTMLElement, eventEmitter: EventEmitter) {\n    this.slider = element;\n    this.emitter = eventEmitter;\n    this.driver = null;\n\n    this.state = {\n      thumbs: [],\n      coefficientPoint: 0,\n      shiftToMinValue: 0,\n      currentThumbIndex: null,\n      currentValue: 0,\n      currentValueAxis: 0,\n      startValueAxis: 0,\n      maxValueAxis: 0,\n    };\n  }\n\n  /* the CreateSlider function adds sliders to the parent of the slider */\n  createThumbs(amount: number): void {\n    const fragment = document.createDocumentFragment();\n    new Array(amount).fill(1).forEach(() => {\n      const thumb: HTMLElement = createElement(\n        'div',\n        'slider__thumb js-slider__thumb',\n      );\n\n      fragment.append(thumb);\n      this.state.thumbs.push(thumb);\n    });\n    this.slider.append(fragment);\n  }\n\n  /* changes the number of sliders drawn on the scale */\n  changeAmountThumbs({\n    modelState,\n    driver,\n    scale,\n    activeRange,\n    setCurrentTooltipValue,\n  }: {\n    modelState: IModelState;\n    driver: IDriver;\n    scale: HTMLElement;\n    activeRange: HTMLElement;\n    setCurrentTooltipValue: (modelState: IModelState, i: number) => void;\n  }): void {\n    if (this.state.thumbs.length < modelState.amount) {\n      const amount: number = modelState.amount - this.state.thumbs.length;\n\n      this.createThumbs(amount);\n      this.listenNewThumbsEvents({\n        amount,\n        modelState,\n        driver,\n        scale,\n        activeRange,\n        setCurrentTooltipValue,\n      });\n      this.setValueToNewThumb(amount, modelState);\n    }\n    if (this.state.thumbs.length > modelState.amount) {\n      const excessAmount: number = this.state.thumbs.length - modelState.amount;\n      const $allThumbs: HTMLElement[] = Array.from(\n        $(this.slider).find('.js-slider__thumb'),\n      );\n\n      new Array(excessAmount).fill(1).forEach((_element: number, i: number) => {\n        modelState.thumbsValues.splice(-1, 1);\n        this.state.thumbs.splice(-1, 1);\n        const newLength = $allThumbs.length - i;\n        $allThumbs[newLength - 1].remove();\n      });\n      this.emitter.emit('view:amountThumbs-changed', modelState.thumbsValues);\n    }\n  }\n\n  listenThumbsEventsWhenChangingOrientation({\n    modelState,\n    driver,\n    scale,\n    activeRange,\n    setCurrentTooltipValue,\n  }: {\n    modelState: IModelState;\n    driver: IDriver;\n    scale: HTMLElement;\n    activeRange: HTMLElement;\n    setCurrentTooltipValue: (modelState: IModelState, i: number) => void;\n  }): void {\n    this.driver = driver;\n    this.state.thumbs.forEach((element: HTMLElement, i: number) => {\n      const start: (event: MouseEvent) => void = event =>\n        this.processStart({\n          modelState,\n          event,\n          i,\n          scale,\n          activeRange,\n          setCurrentTooltipValue,\n        });\n      element.removeEventListener('mousedown', start);\n      element.addEventListener('mousedown', start);\n    });\n  }\n\n  /* hangs the 'mousedown' event handler for each created thumb */\n  listenThumbsEvents({\n    modelState,\n    driver,\n    scale,\n    activeRange,\n    setCurrentTooltipValue,\n  }: {\n    modelState: IModelState;\n    driver: IDriver;\n    scale: HTMLElement;\n    activeRange: HTMLElement;\n    setCurrentTooltipValue: (modelState: IModelState, i: number) => void;\n  }): void {\n    this.driver = driver;\n    this.state.thumbs.forEach((element: HTMLElement, i: number) => {\n      const start: (event: MouseEvent) => void = event =>\n        this.processStart({\n          modelState,\n          event,\n          i,\n          scale,\n          activeRange,\n          setCurrentTooltipValue,\n        });\n      element.addEventListener('mousedown', start);\n    });\n  }\n\n  /* hangs the 'mousedown' event handler for each added thumb */\n  listenNewThumbsEvents({\n    amount,\n    modelState,\n    driver,\n    scale,\n    activeRange,\n    setCurrentTooltipValue,\n  }: {\n    amount: number;\n    modelState: IModelState;\n    driver: IDriver;\n    scale: HTMLElement;\n    activeRange: HTMLElement;\n    setCurrentTooltipValue: (modelState: IModelState, i: number) => void;\n  }): void {\n    this.driver = driver;\n    new Array(amount).fill(1).forEach((_element: number, i: number) => {\n      const index = this.state.thumbs.length - (amount - i);\n      const start: (event: MouseEvent) => void = event =>\n        this.processStart({\n          modelState,\n          event,\n          i: index,\n          scale,\n          activeRange,\n          setCurrentTooltipValue,\n        });\n      this.state.thumbs[\n        this.state.thumbs.length - (amount - i)\n      ].addEventListener('mousedown', start);\n    });\n  }\n\n  /* listens to the 'resize' event on the slider page */\n  listenSizeWindow({\n    scale,\n    activeRange,\n    modelState,\n    driver,\n  }: {\n    scale: HTMLElement;\n    activeRange: HTMLElement;\n    modelState: IModelState;\n    driver: IDriver;\n  }): void {\n    const handleWindowResize = () =>\n      this.setNewValuesForThumbs({\n        scale,\n        activeRange,\n        modelState,\n        driver,\n      });\n    window.addEventListener('resize', handleWindowResize);\n  }\n\n  listenSizeWindowWhenChangingOrientation({\n    modelState,\n    driver,\n    scale,\n    activeRange,\n  }: {\n    modelState: IModelState;\n    driver: IDriver;\n    scale: HTMLElement;\n    activeRange: HTMLElement;\n  }): void {\n    this.driver = driver;\n    const handleWindowResize = () =>\n      this.setNewValuesForThumbs({\n        scale,\n        activeRange,\n        modelState,\n        driver,\n      });\n    window.removeEventListener('resize', handleWindowResize);\n    window.addEventListener('resize', handleWindowResize);\n  }\n\n  /* sets a value for each added thumb */\n  setValueToNewThumb(amount: number, modelState: IModelState): void {\n    const currentState = { ...modelState };\n    if (this.state.thumbs.length === currentState.thumbsValues.length) {\n      return;\n    }\n    new Array(amount).fill(1).forEach((_element: number, i: number) => {\n      currentState.thumbsValues[this.state.thumbs.length - (amount - i)] =\n        currentState.thumbsValues[this.state.thumbs.length - 1 - (amount - i)] +\n        currentState.step;\n    });\n    this.emitter.emit('view:amountThumbs-changed', currentState.thumbsValues);\n  }\n\n  /* places thumbs on the slider based on default values */\n  setValuesThumbs({\n    modelState,\n    activeRange,\n    scale,\n    driver,\n  }: {\n    modelState: IModelState;\n    activeRange: HTMLElement;\n    scale: HTMLElement;\n    driver: IDriver;\n  }): void {\n    driver.setInPlaceThumb(this.state.thumbs, modelState, activeRange, scale);\n  }\n\n  /* places thumbs on the slider depending on the received new value */\n  setNewValuesForThumbs({\n    scale,\n    activeRange,\n    modelState,\n    driver,\n  }: {\n    scale: HTMLElement;\n    activeRange: HTMLElement;\n    modelState: IModelState;\n    driver: IDriver;\n  }): void {\n    this.state.coefficientPoint = driver.calculateCoefficientPoint(\n      scale,\n      modelState.max,\n      modelState.min,\n    );\n\n    this.state.shiftToMinValue = Math.ceil(\n      this.state.coefficientPoint * modelState.min,\n    );\n    driver.setInPlaceNewThumb(\n      this.state.thumbs,\n      this.state.currentThumbIndex,\n      this.state.coefficientPoint,\n      modelState,\n      this.state.shiftToMinValue,\n      activeRange,\n    );\n  }\n\n  /* the method calculates the current value of the thumb */\n  calculateValue(modelState: IModelState, currentValueAxis: number): number {\n    let currentValue: number =\n      Math.floor(currentValueAxis / this.state.coefficientPoint) +\n      modelState.min;\n    const multi: number = Math.floor(currentValue / modelState.step);\n    currentValue = modelState.step * multi;\n    return currentValue;\n  }\n\n  /* the method calculates the value of the position of the thumb on the scale */\n  calculateValueOfPlaceOnScale(modelState: IModelState, i: number): void {\n    this.state.currentValue = this.calculateValue(\n      modelState,\n      this.state.currentValueAxis,\n    );\n    const halfStep =\n      Math.floor(\n        (this.state.currentValue + modelState.step / 2) *\n          this.state.coefficientPoint,\n      ) - this.state.shiftToMinValue;\n\n    if (this.state.currentValueAxis > halfStep) {\n      this.state.currentValue += modelState.step;\n    }\n    if (modelState.thumbsValues[i] !== this.state.currentValue) {\n      this.emitter.emit('view:thumbsValues-changed', {\n        value: this.state.currentValue,\n        index: i,\n      });\n    }\n  }\n\n  /* calculates the potential value of the thumb at the point of click on the scale */\n  calculateValueOfPlaceClickOnScale(\n    modelState: IModelState,\n    currentValueAxis: number,\n  ): number {\n    const currentValue: number | null = this.calculateValue(\n      modelState,\n      currentValueAxis,\n    );\n    if (this.state.currentValue !== null) {\n      const halfStep =\n        Math.floor(\n          (this.state.currentValue + modelState.step / 2) *\n            this.state.coefficientPoint,\n        ) - this.state.shiftToMinValue;\n\n      if (this.state.currentValueAxis > halfStep) {\n        this.state.currentValue += modelState.step;\n      }\n    }\n    return currentValue;\n  }\n\n  /* method for setting the closest slider to the clicked position on the slider scale */\n  setThumbToNewPosition(\n    event: MouseEvent,\n    modelState: IModelState,\n    driver: IDriver,\n  ): [number, number | null] {\n    event.preventDefault();\n    const target: HTMLDivElement = event.target as HTMLDivElement;\n    let clickLocationAxis = 0;\n    const isHorizontalTarget: boolean =\n      target != null && target.className === 'js-slider__active-range';\n    const isVerticalTarget: boolean =\n      target != null && target.className === 'js-slider__vertical-active-range';\n    if (isHorizontalTarget) {\n      clickLocationAxis = driver.calculateClickLocation(event, target);\n    } else if (isVerticalTarget) {\n      clickLocationAxis = driver.calculateClickLocation(event, target);\n    } else {\n      clickLocationAxis = driver.getOffsetFromClick(event);\n    }\n    const currentValue:\n      | number\n      | null\n      | undefined = this.calculateValueOfPlaceClickOnScale(\n      modelState,\n      clickLocationAxis,\n    );\n    let nearestThumbIndex: number | null = null;\n\n    modelState.thumbsValues.forEach((thumbsValues: number, i: number) => {\n      const isCurrentValue: boolean =\n        currentValue !== null && currentValue !== undefined;\n      const isFirstThumb: boolean = i === 0 && thumbsValues >= currentValue;\n      const isLastThumb: boolean =\n        i === modelState.thumbsValues.length - 1 &&\n        thumbsValues <= currentValue;\n      const isIntermediateThumb: boolean =\n        currentValue >= thumbsValues &&\n        currentValue <= modelState.thumbsValues[i + 1];\n\n      if (isCurrentValue) {\n        if (isFirstThumb) {\n          nearestThumbIndex = i;\n        } else if (isLastThumb) {\n          nearestThumbIndex = i;\n        } else if (isIntermediateThumb) {\n          const leftSpacing: number = currentValue - thumbsValues;\n          const rightSpacing: number =\n            modelState.thumbsValues[i + 1] - currentValue;\n\n          if (leftSpacing > rightSpacing) {\n            nearestThumbIndex = i + 1;\n          } else {\n            nearestThumbIndex = i;\n          }\n        }\n      }\n    });\n    if (\n      nearestThumbIndex != null &&\n      modelState.thumbsValues[nearestThumbIndex] !== this.state.currentValue\n    ) {\n      this.emitter.emit('view:thumbsValues-changed', {\n        value: currentValue,\n        index: nearestThumbIndex,\n      });\n    }\n    return [currentValue, nearestThumbIndex];\n  }\n\n  processStart({\n    modelState,\n    event,\n    i,\n    scale,\n    activeRange,\n    setCurrentTooltipValue,\n  }: {\n    modelState: IModelState;\n    event: MouseEvent;\n    i: number;\n    scale: HTMLElement;\n    activeRange: HTMLElement;\n    setCurrentTooltipValue: (modelState: IModelState, i: number) => void;\n  }): void {\n    this.state.currentThumbIndex = i;\n    event.preventDefault();\n\n    const elements: HTMLElement[] = this.state.thumbs;\n    const target: HTMLElement = elements[i];\n    // const eventThumb: MouseEvent = event;\n\n    if (this.driver !== null) {\n      this.state.currentValueAxis = this.driver.getCurrentValueAxisToProcessStart(\n        target,\n      );\n      this.state.startValueAxis = this.driver.getStartValueAxisToProcessStart(\n        event,\n        this.state.currentValueAxis,\n      );\n      this.state.maxValueAxis = this.driver.getMaxValueAxisToProcessStart(\n        scale,\n      );\n    }\n    this.state.currentValue = modelState.thumbsValues[i];\n\n    const handleMove = (event: MouseEvent) =>\n      this.processMove({\n        modelState,\n        event,\n        i,\n        target,\n        activeRange,\n        setCurrentTooltipValue,\n      });\n    document.addEventListener('mousemove', handleMove);\n\n    const handleStop = (event: MouseEvent) =>\n      this.processStop({\n        handleMove,\n        handleStop,\n        _event: event,\n        i,\n        target,\n        modelState,\n        setCurrentTooltipValue,\n      });\n    document.addEventListener('mouseup', handleStop);\n  }\n\n  processMove({\n    modelState,\n    event,\n    i,\n    target,\n    activeRange,\n    setCurrentTooltipValue,\n  }: {\n    modelState: IModelState;\n    event: MouseEvent;\n    i: number;\n    target: HTMLElement;\n    activeRange: HTMLElement;\n    setCurrentTooltipValue: (modelState: IModelState, i: number) => void;\n  }): void {\n    const elements: HTMLElement[] = this.state.thumbs;\n\n    const isFirstThumb: boolean = i === 0;\n    const isIntermediateThumb: boolean = i > 0 && i < elements.length - 1;\n    const isLastThumb: boolean = i === elements.length - 1 && i !== 0;\n    const isOneThumb: boolean = elements.length === 1;\n    const isMultipleThumbs: boolean = elements.length !== 1;\n\n    if (this.driver !== null) {\n      const targetWidth: number = this.driver.getTargetWidth(target);\n      this.state.currentValueAxis = this.driver.getCurrentValueAxisToProcessMove(\n        event,\n        this.state.startValueAxis,\n      );\n      if (isFirstThumb) {\n        if (isOneThumb) {\n          if (this.state.currentValueAxis > this.state.maxValueAxis) {\n            this.state.currentValueAxis = this.state.maxValueAxis;\n          }\n        }\n        if (isMultipleThumbs) {\n          const offsetNextSlider: number =\n            this.driver.getElementOffset(elements[i + 1]) - targetWidth;\n          if (this.state.currentValueAxis > offsetNextSlider) {\n            this.state.currentValueAxis = offsetNextSlider;\n          }\n        }\n        if (this.state.currentValueAxis < modelState.min) {\n          this.state.currentValueAxis = modelState.min;\n        }\n\n        this.driver.setIndentForTarget(target, this.state.currentValueAxis);\n      }\n      if (isIntermediateThumb) {\n        const offsetNextThumb: number =\n          this.driver.getElementOffset(elements[i + 1]) - targetWidth;\n        const offsetPreviousThumb: number =\n          this.driver.getElementOffset(elements[i - 1]) + targetWidth;\n        const { currentValueAxis: valueAxis } = this.state;\n\n        if (valueAxis > offsetNextThumb) {\n          this.state.currentValueAxis = offsetNextThumb;\n        }\n        if (valueAxis < offsetPreviousThumb) {\n          this.state.currentValueAxis = offsetPreviousThumb;\n        }\n        this.driver.setIndentForTarget(target, this.state.currentValueAxis);\n      }\n      if (isLastThumb) {\n        const offsetPreviousThumb: number =\n          this.driver.getElementOffset(elements[i - 1]) + targetWidth;\n        const valueAxis = this.state.currentValueAxis;\n        if (valueAxis < offsetPreviousThumb) {\n          this.state.currentValueAxis = offsetPreviousThumb;\n        }\n        if (valueAxis > this.state.maxValueAxis) {\n          this.state.currentValueAxis = this.state.maxValueAxis;\n        }\n        this.driver.setIndentForTarget(target, this.state.currentValueAxis);\n      }\n\n      // update line span\n      this.driver.updateActiveRange(activeRange, elements);\n    }\n    this.calculateValueOfPlaceOnScale(modelState, i);\n    setCurrentTooltipValue(modelState, i);\n  }\n\n  processStop({\n    handleMove,\n    handleStop,\n    i,\n    target,\n    modelState,\n    setCurrentTooltipValue,\n  }: {\n    handleMove: (event: MouseEvent) => void;\n    handleStop: (event: MouseEvent) => void;\n    _event: MouseEvent;\n    i: number;\n    target: HTMLElement;\n    modelState: IModelState;\n    setCurrentTooltipValue: (modelState: IModelState, i: number) => void;\n  }): void {\n    setCurrentTooltipValue(modelState, i);\n    if (this.driver !== null) {\n      if (this.state.currentValue !== null) {\n        this.driver.setIndentForTargetToProcessStop(\n          target,\n          this.state.coefficientPoint,\n          this.state.currentValue,\n          this.state.shiftToMinValue,\n        );\n      }\n    }\n\n    document.removeEventListener('mousemove', handleMove);\n    document.removeEventListener('mouseup', handleStop);\n\n    this.state.currentValue = null;\n    this.state.currentThumbIndex = null;\n  }\n}\nexport default Thumbs;\n","import createElement from '../functions/createElement';\nimport { IModelState } from '../interfaces/iModelState';\nimport { IDriver } from '../interfaces/iDriver';\n\nclass Tooltips {\n  private slider: HTMLElement;\n\n  public tooltipsElements: HTMLElement[];\n\n  public textInTooltips!: HTMLElement[];\n\n  constructor(element: HTMLElement) {\n    this.slider = element;\n    this.tooltipsElements = [];\n    this.textInTooltips = [];\n  }\n\n  /* createTooltips function adds tooltip elements to the main html slider structure */\n  createTooltips(\n    amount: number,\n    sliders: HTMLElement[],\n    driver: IDriver,\n  ): void {\n    new Array(amount).fill(1).forEach((_element: number, i: number) => {\n      const tooltip: HTMLElement = createElement(\n        'div',\n        'slider__tooltip js-slider__tooltip',\n      );\n      const textInTooltips: HTMLElement = driver.createElementTooltipText();\n\n      tooltip.append(textInTooltips);\n      sliders[sliders.length - (amount - i)].append(tooltip);\n      this.tooltipsElements.push(tooltip);\n      this.textInTooltips.push(textInTooltips);\n    });\n  }\n\n  /* sets the default sliders for their respective tooltips */\n  setTooltipsValues(modelState: IModelState): void {\n    modelState.thumbsValues.forEach((element: number, i: number) => {\n      this.textInTooltips[i].innerHTML = String(element);\n    });\n  }\n\n  /* changes the number of rendered tooltips */\n  changeAmountTooltips(\n    sliders: HTMLElement[],\n    driver: IDriver,\n    modelState: IModelState,\n  ): void {\n    if (this.tooltipsElements.length < modelState.thumbsValues.length) {\n      const amount: number =\n        modelState.thumbsValues.length - this.tooltipsElements.length;\n      this.createTooltips(amount, sliders, driver);\n    }\n    if (this.tooltipsElements.length > modelState.thumbsValues.length) {\n      const excessAmount: number =\n        this.tooltipsElements.length - modelState.thumbsValues.length;\n\n      new Array(excessAmount).fill(1).forEach(() => {\n        this.tooltipsElements.splice(-1, 1);\n        this.textInTooltips.splice(-1, 1);\n      });\n    }\n  }\n\n  /* redraws tooltips when orientation changes */\n  changeOrientation(driver: IDriver): void {\n    const $tooltips: HTMLElement[] = Array.from(\n      $(this.slider).find('.js-slider__tooltip'),\n    );\n    this.textInTooltips = [];\n    const textInTooltips: HTMLElement[] = driver.searchElementsTooltipText(\n      this.slider,\n    );\n    textInTooltips.forEach((element: HTMLElement) => {\n      element.remove();\n    });\n    $tooltips.forEach((element: HTMLElement) => {\n      const tooltipText: HTMLElement = driver.createElementTooltipText();\n      element.append(tooltipText);\n      this.textInTooltips.push(tooltipText);\n    });\n  }\n\n  /* the method sets the current value to the slider tooltip when it moves */\n  setCurrentTooltipValue(modelState: IModelState, i: number): void {\n    this.textInTooltips[i].innerHTML = String(modelState.thumbsValues[i]);\n  }\n\n  /* hideTooltip method hides sliders tooltips */\n  hideTooltip(): void {\n    const $allTooltips: HTMLElement[] = Array.from(\n      $(this.slider).find('.js-slider__tooltip'),\n    );\n    $allTooltips.forEach((element: HTMLElement): void => {\n      element.classList.add('slider__tooltip-hide');\n    });\n  }\n\n  /* showTooltip method shows sliders tooltips */\n  showTooltip(): void {\n    const $allTooltips: HTMLElement[] = Array.from(\n      $(this.slider).find('.js-slider__tooltip'),\n    );\n    $allTooltips.forEach((element: HTMLElement): void => {\n      element.classList.remove('slider__tooltip-hide');\n    });\n  }\n}\nexport default Tooltips;\n","import driverHorizontal from './drivers/driverHorizontal';\nimport driverVertical from './drivers/driverVertical';\nimport EventEmitter from '../eventEmitter';\nimport { IModelState } from '../interfaces/iModelState';\nimport { IDriver } from '../interfaces/iDriver';\nimport Scale from '../view/scale';\nimport Thumbs from './thumbs';\nimport Tooltips from '../view/tooltips';\n\nclass View {\n  private slider: HTMLElement;\n\n  private isCreatedSlider: boolean;\n\n  private modelState!: IModelState;\n\n  private driver!: IDriver;\n\n  private currentOrientation: string | null;\n\n  private emitter: EventEmitter;\n\n  private scale!: Scale;\n\n  private thumbs!: Thumbs;\n\n  private tooltips!: Tooltips;\n\n  constructor(slider: HTMLElement, eventEmitter: EventEmitter) {\n    this.slider = slider;\n    this.isCreatedSlider = false;\n    this.currentOrientation = null;\n    this.emitter = eventEmitter;\n    this.scale = new Scale(this.slider);\n    this.thumbs = new Thumbs(this.slider, this.emitter);\n    this.tooltips = new Tooltips(this.slider);\n    this.emitter.makeSubscribe('model:state-changed', (state: IModelState) => {\n      this.renderView(state);\n    });\n  }\n\n  private renderView(state: IModelState): void {\n    this.modelState = { ...state };\n    if (this.modelState.orientation === 'horizontal') {\n      this.driver = driverHorizontal;\n    }\n    if (this.modelState.orientation === 'vertical') {\n      this.driver = driverVertical;\n    }\n    if (this.currentOrientation !== this.modelState.orientation) {\n      this.currentOrientation = this.modelState.orientation;\n      if (this.isCreatedSlider) {\n        this.scale.changeOrientation(\n          this.thumbs.setThumbToNewPosition.bind(this.thumbs),\n          this.modelState,\n          this.driver,\n        );\n\n        this.tooltips.changeOrientation(this.driver);\n\n        this.thumbs.setValuesThumbs({\n          modelState: this.modelState,\n          activeRange: this.scale.activeRange,\n          scale: this.scale.scale,\n          driver: this.driver,\n        });\n\n        this.tooltips.setTooltipsValues(this.modelState);\n\n        this.thumbs.listenThumbsEventsWhenChangingOrientation({\n          modelState: this.modelState,\n          driver: this.driver,\n          scale: this.scale.scale,\n          activeRange: this.scale.activeRange,\n          setCurrentTooltipValue: this.tooltips.setCurrentTooltipValue.bind(\n            this.tooltips,\n          ),\n        });\n\n        this.thumbs.listenSizeWindowWhenChangingOrientation({\n          modelState: this.modelState,\n          driver: this.driver,\n          scale: this.scale.scale,\n          activeRange: this.scale.activeRange,\n        });\n      }\n    }\n    if (!this.isCreatedSlider) {\n      this.scale.createScale(this.driver);\n      this.thumbs.createThumbs(this.modelState.amount);\n      this.tooltips.createTooltips(\n        this.modelState.amount,\n        this.thumbs.state.thumbs,\n        this.driver,\n      );\n      this.isCreatedSlider = true;\n      this.thumbs.setValuesThumbs({\n        modelState: this.modelState,\n        activeRange: this.scale.activeRange,\n        scale: this.scale.scale,\n        driver: this.driver,\n      });\n\n      this.thumbs.listenThumbsEvents({\n        modelState: this.modelState,\n        driver: this.driver,\n        scale: this.scale.scale,\n        activeRange: this.scale.activeRange,\n        setCurrentTooltipValue: this.tooltips.setCurrentTooltipValue.bind(\n          this.tooltips,\n        ),\n      });\n      this.scale.listenScaleEvents(\n        this.thumbs.setThumbToNewPosition.bind(this.thumbs),\n        this.modelState,\n        this.driver,\n      );\n      this.thumbs.listenSizeWindow({\n        scale: this.scale.scale,\n        activeRange: this.scale.activeRange,\n        modelState: this.modelState,\n        driver: this.driver,\n      });\n    }\n    if (this.thumbs.state.thumbs.length !== this.modelState.amount) {\n      this.thumbs.changeAmountThumbs({\n        modelState: this.modelState,\n        driver: this.driver,\n        scale: this.scale.scale,\n        activeRange: this.scale.activeRange,\n        setCurrentTooltipValue: this.tooltips.setCurrentTooltipValue.bind(\n          this.tooltips,\n        ),\n      });\n    }\n    if (\n      this.tooltips.tooltipsElements.length !==\n      this.modelState.thumbsValues.length\n    ) {\n      this.tooltips.changeAmountTooltips(\n        this.thumbs.state.thumbs,\n        this.driver,\n        this.modelState,\n      );\n    }\n    if (this.modelState.isTooltip === false) {\n      this.tooltips.hideTooltip();\n    }\n    if (this.modelState.isTooltip === true) {\n      this.tooltips.showTooltip();\n    }\n    this.thumbs.setNewValuesForThumbs({\n      scale: this.scale.scale,\n      activeRange: this.scale.activeRange,\n      modelState: this.modelState,\n      driver: this.driver,\n    });\n    this.tooltips.setTooltipsValues(this.modelState);\n  }\n}\nexport default View;\n","import { IModelState } from './interfaces/iModelState';\n\ninterface IData {\n  value: number;\n  index: number;\n}\ntype CallbackFunctionVariadic = (...args: any[]) => void;\ninterface StringArray {\n  [index: string]: CallbackFunctionVariadic[];\n}\nclass EventEmitter {\n  public handlersByEvent: StringArray;\n\n  constructor() {\n    this.handlersByEvent = {};\n  }\n\n  public makeSubscribe(\n    eventName: string,\n    fn: CallbackFunctionVariadic,\n  ): () => void {\n    if (!this.handlersByEvent[eventName]) {\n      this.handlersByEvent[eventName] = [];\n    }\n\n    this.handlersByEvent[eventName].push(fn);\n    return (): void => {\n      this.handlersByEvent[eventName] = this.handlersByEvent[eventName].filter(\n        eventFn => fn !== eventFn,\n      );\n    };\n  }\n\n  public emit(eventName: string, data: IModelState | IData | number[]): void {\n    const handlers: CallbackFunctionVariadic[] = this.handlersByEvent[\n      eventName\n    ];\n    if (handlers) {\n      handlers.forEach(fn => {\n        fn.call(null, data);\n      });\n    }\n  }\n}\nexport default EventEmitter;\n","import { IHTMLElement } from './interfaces/iHTMLElement';\nimport { IModelState } from './interfaces/iModelState';\nimport Model from './model';\nimport View from './view/view';\nimport EventEmitter from './eventEmitter';\n\ninterface IData {\n  value: number;\n  index: number;\n}\n\nclass Controller {\n  public slider: IHTMLElement;\n\n  constructor(element: IHTMLElement) {\n    this.slider = element;\n    this.slider.classList.add('slider');\n\n    const eventEmitter = new EventEmitter();\n    new View(this.slider, eventEmitter);\n    const model: Model = new Model(eventEmitter);\n\n    this.attachPublicMethods(model, eventEmitter);\n\n    eventEmitter.makeSubscribe(\n      'view:amountThumbs-changed',\n      (thumbsValues: number[]) => {\n        model.overwriteCurrentThumbsValues(thumbsValues);\n      },\n    );\n\n    eventEmitter.makeSubscribe('view:thumbsValues-changed', (data: IData) => {\n      model.setCurrentThumbsValues(data.value, data.index);\n    });\n  }\n\n  private attachPublicMethods(model: Model, eventEmitter: EventEmitter) {\n    this.slider.getState = (): IModelState => {\n      const modelState: IModelState = { ...model.state };\n      return modelState;\n    };\n    this.slider.setNewValueMin = (min: number): void => {\n      model.setNewValueMin(min);\n    };\n    this.slider.setNewValueMax = (max: number): void => {\n      model.setNewValueMax(max);\n    };\n    this.slider.setNewValueAmount = (amount: number): void => {\n      model.setNewValueAmount(amount);\n    };\n    this.slider.setNewValueThumbsValues = (\n      touchValue: number,\n      index: number,\n    ): void => {\n      model.setNewValueThumbsValues(touchValue, index);\n    };\n    this.slider.setNewValueStep = (step: number): void => {\n      model.setNewValueStep(step);\n    };\n    this.slider.setNewValueOrientation = (value: string): void => {\n      model.setNewValueOrientation(value);\n    };\n    this.slider.setNewValueTooltip = (value: boolean): void => {\n      model.setNewValueTooltip(value);\n    };\n    this.slider.subscribeToStateModel = (\n      handler: (state: IModelState) => void,\n      isCreatedInput: boolean,\n      amountInputs: () => Element[],\n      changeAmountInputs: (state: IModelState) => void,\n      setValueToInputFromModelState: (state: IModelState) => void,\n      setValueToStepFromModelState: (state: IModelState) => void,\n      setValueToMinInputFromModelState: (state: IModelState) => void,\n      setValueMaxInputFromModelState: (state: IModelState) => void,\n    ): void => {\n      eventEmitter.makeSubscribe(\n        'model:state-changed',\n        (state: IModelState): void => {\n          let isCreatedElement = isCreatedInput;\n          if (!isCreatedElement) {\n            handler(state);\n            isCreatedElement = true;\n          }\n          const arrayAmountInputs = amountInputs();\n          if (arrayAmountInputs.length !== state.thumbsValues.length) {\n            changeAmountInputs(state);\n          }\n          setValueToInputFromModelState(state);\n          setValueToStepFromModelState(state);\n          setValueToMinInputFromModelState(state);\n          setValueMaxInputFromModelState(state);\n        },\n      );\n    };\n  }\n}\nexport default Controller;\n","import Controller from './controller';\nimport { IHTMLElement } from './interfaces/iHTMLElement';\n\n(function callSlider($) {\n  const $jquery = $;\n  $jquery.fn.slider = function renderSlider() {\n    const elements: IHTMLElement[] = Array.from(this) as IHTMLElement[];\n    elements.forEach((element: IHTMLElement) => {\n      new Controller(element);\n    });\n  };\n})(jQuery);\n"]}