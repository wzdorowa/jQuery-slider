{"version":3,"sources":["demo/components/configuration-panel/utilities.ts","demo/components/configuration-panel/configuration-panel.ts"],"names":[],"mappings":"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","file":"configuration-panel.7ac40dc9.js","sourceRoot":"../src","sourcesContent":["import { IHTMLElement } from '../../../slider/interfaces/iHTMLElement';\n\nconst utilities = {\n  createElement(tag: string, className: string): IHTMLElement {\n    const htmlElement: IHTMLElement = document.createElement(\n      tag,\n    ) as IHTMLElement;\n    htmlElement.className = className;\n    return htmlElement;\n  },\n};\n\nexport default utilities;\n","import { IModelState } from '../../../slider/interfaces/iModelState';\nimport { IHTMLElement } from '../../../slider/interfaces/iHTMLElement';\nimport utilities from './utilities';\n\nclass ConfigurationPanel {\n  public isCreatedInput: boolean;\n\n  public slider: IHTMLElement;\n\n  public sliderIndex: number;\n\n  public elements: {\n    panel: HTMLElement | null;\n    minValue: HTMLInputElement | null;\n    maxValue: HTMLInputElement | null;\n    countSliderThumbs: HTMLInputElement[] | null;\n    inputsSliderThumbs: HTMLInputElement[] | null;\n    stepSize: HTMLInputElement[] | null;\n    orientationSlider: HTMLElement[] | null;\n    checkboxContainer: HTMLInputElement[] | null;\n    checkboxInputTooltip: HTMLInputElement[] | null;\n    checkboxInputScaleOfValues: HTMLInputElement[] | null;\n    forms: HTMLElement[] | null;\n  };\n\n  public state: IModelState;\n\n  constructor(element: JQuery<HTMLElement>, index: number) {\n    this.slider = (element[0] as unknown) as IHTMLElement;\n    this.isCreatedInput = false;\n    this.sliderIndex = index;\n    this.elements = {\n      panel: null,\n      minValue: null,\n      maxValue: null,\n      countSliderThumbs: null,\n      inputsSliderThumbs: null,\n      stepSize: null,\n      orientationSlider: null,\n      checkboxContainer: null,\n      checkboxInputTooltip: null,\n      checkboxInputScaleOfValues: null,\n      forms: null,\n    };\n    this.state = this.slider.getState();\n\n    this.initialize();\n    this.findElements();\n\n    this.listenMinValue();\n    this.listenMaxValue();\n    this.listenThumbsCount();\n    this.listenStepSize();\n    this.listenInputsSliderThumbs();\n    this.listenOrientationSlider();\n    this.listenCheckboxContainer();\n    this.listenForm();\n\n    this.slider.subscribeToStateModel(\n      this.createInput,\n      this.isCreatedInput,\n      this.getCountInputs.bind(this),\n      this.changeCountInputs.bind(this),\n      this.setValueToInputFromModelState.bind(this),\n      this.setValueToStepFromModelState.bind(this),\n      this.setValueToMinInputFromModelState.bind(this),\n      this.setValueMaxInputFromModelState.bind(this),\n      this.setValueCountThumbsFromModelState.bind(this),\n    );\n  }\n\n  initialize(): void {\n    this.getState();\n    this.createInput(this.state);\n    this.setValueToOrientationFromModelState(this.state);\n    this.setValueToStepFromModelState(this.state);\n    this.setValueToMinInputFromModelState(this.state);\n    this.setValueMaxInputFromModelState(this.state);\n    this.setValueCountThumbsFromModelState(this.state);\n    this.setValueToCheckboxTooltipFromModelState(this.state);\n    this.setValueToCheckboxScaleOfValuesFromModelState(this.state);\n  }\n\n  getState(): void {\n    this.state = this.slider.getState();\n  }\n\n  createInput(state: IModelState): void {\n    const thumbsCurrentValuesList: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration__thumbs-current-value-list'),\n    );\n\n    const fragmentCurrentValueList = document.createDocumentFragment();\n\n    new Array(state.thumbsCount)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        const currentValueItem: HTMLElement = utilities.createElement(\n          'li',\n          'configuration__thumbs-item js-configuration__thumbs-item',\n        );\n        const currentValueInput: HTMLElement = utilities.createElement(\n          'input',\n          'configuration__thumbs-value js-configuration__thumbs-value',\n        );\n        currentValueInput.setAttribute('type', 'number');\n        currentValueInput.setAttribute('value', String(state.thumbsValues[i]));\n\n        currentValueItem.append(currentValueInput);\n        fragmentCurrentValueList.append(currentValueItem);\n      });\n    thumbsCurrentValuesList[this.sliderIndex].append(fragmentCurrentValueList);\n    if (!this.isCreatedInput) {\n      this.isCreatedInput = true;\n    }\n  }\n\n  setNewValueToNewInputs(state: IModelState): void {\n    const thumbsCurrentValuesList: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration__thumbs-current-value-list'),\n    );\n\n    const $allThumbs: HTMLInputElement[] = Array.from(\n      $(thumbsCurrentValuesList[this.sliderIndex]).find(\n        '.js-configuration__thumbs-value',\n      ),\n    ) as HTMLInputElement[];\n    const indexNewInput: number = $allThumbs.length - 1;\n    $allThumbs[indexNewInput].value = String(state.thumbsValues[indexNewInput]);\n  }\n\n  changeCountInputs(state: IModelState): void {\n    const thumbsCurrentValuesList: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration__thumbs-current-value-list'),\n    );\n    const $countInputs: HTMLElement[] = Array.from(\n      $(thumbsCurrentValuesList[this.sliderIndex]).find(\n        '.js-configuration__thumbs-item',\n      ),\n    );\n\n    if ($countInputs.length < state.thumbsCount) {\n      const missingCount: number = state.thumbsCount - $countInputs.length;\n\n      const fragmentCurrentValueList = document.createDocumentFragment();\n      new Array(missingCount).fill(1).forEach((_element: number, i: number) => {\n        const currentValueItem: HTMLElement = utilities.createElement(\n          'li',\n          'configuration__thumbs-item js-configuration__thumbs-item',\n        );\n        const currentValueInput: HTMLElement = utilities.createElement(\n          'input',\n          'configuration__thumbs-value js-configuration__thumbs-value',\n        );\n        currentValueInput.setAttribute('type', 'number');\n        currentValueInput.setAttribute('value', String(state.thumbsValues[i]));\n\n        currentValueItem.append(currentValueInput);\n        fragmentCurrentValueList.append(currentValueItem);\n\n        this.setNewValueToNewInputs(state);\n      });\n      thumbsCurrentValuesList[this.sliderIndex].append(\n        fragmentCurrentValueList,\n      );\n    }\n    if ($countInputs.length > state.thumbsCount) {\n      const excessCount: number = $countInputs.length - state.thumbsCount;\n\n      const $allCurrentValuesInputs: HTMLElement[] = Array.from(\n        $(thumbsCurrentValuesList[this.sliderIndex]).find(\n          '.js-configuration__thumbs-item',\n        ),\n      );\n      new Array(excessCount).fill(1).forEach(() => {\n        $allCurrentValuesInputs[$allCurrentValuesInputs.length - 1].remove();\n        $allCurrentValuesInputs.splice(-1, 1);\n      });\n    }\n  }\n\n  setValueToOrientationFromModelState(state: IModelState): void {\n    const configurationPanel: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n\n    const $buttonsOrientation: HTMLInputElement[] = Array.from(\n      $(configurationPanel[this.sliderIndex]).find('.js-radio-button__content'),\n    ) as HTMLInputElement[];\n\n    if (state.orientation === 'horizontal') {\n      $buttonsOrientation[0].checked = true;\n    }\n    if (state.orientation === 'vertical') {\n      $buttonsOrientation[1].checked = true;\n    }\n  }\n\n  setValueToMinInputFromModelState(state: IModelState): void {\n    const configurationPanel: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-field__min-max'),\n    );\n\n    const $minMaxInputs: HTMLInputElement[] = Array.from(\n      $(configurationPanel[this.sliderIndex]).find('.js-input__value'),\n    ) as HTMLInputElement[];\n    const minInput: HTMLInputElement = $minMaxInputs[0];\n    minInput.value = String(state.min);\n  }\n\n  setValueMaxInputFromModelState(state: IModelState): void {\n    const configurationPanel: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-field__min-max'),\n    );\n\n    const $minMaxInputs: HTMLInputElement[] = Array.from(\n      $(configurationPanel[this.sliderIndex]).find('.js-input__value'),\n    ) as HTMLInputElement[];\n    const maxInput: HTMLInputElement = $minMaxInputs[1];\n    maxInput.value = String(state.max);\n  }\n\n  setValueCountThumbsFromModelState(state: IModelState): void {\n    const fieldCountThumbs: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration__field-count-thumb'),\n    );\n    const countThumbsInput: HTMLInputElement = fieldCountThumbs[\n      this.sliderIndex\n    ].querySelector('.js-input__value') as HTMLInputElement;\n    countThumbsInput.value = String(state.thumbsCount);\n  }\n\n  setValueToInputFromModelState(state: IModelState): void {\n    const thumbsCurrentValuesList: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration__thumbs-current-value-list'),\n    );\n\n    const $allThumbs: HTMLInputElement[] = Array.from(\n      $(thumbsCurrentValuesList[this.sliderIndex]).find(\n        '.js-configuration__thumbs-value',\n      ),\n    ) as HTMLInputElement[];\n\n    new Array(state.thumbsValues.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        $allThumbs[i].value = String(state.thumbsValues[i]);\n      });\n  }\n\n  setValueToStepFromModelState(state: IModelState): void {\n    const configurationPanel: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration__field-step-size'),\n    );\n\n    const $stepSizes: HTMLInputElement[] = Array.from(\n      $(configurationPanel[this.sliderIndex]).find('.js-input__value'),\n    ) as HTMLInputElement[];\n\n    const stepSize = $stepSizes[0];\n    stepSize.value = String(state.step);\n  }\n\n  setValueToCheckboxTooltipFromModelState(state: IModelState): void {\n    const configurationPanel: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n\n    const $checkboxTooltip: HTMLInputElement[] = Array.from(\n      $(configurationPanel[this.sliderIndex]).find(\n        '.js-checkbox-button__tooltip',\n      ),\n    ) as HTMLInputElement[];\n\n    if (!state.isTooltip) {\n      $checkboxTooltip[0].checked = false;\n    }\n    if (state.isTooltip) {\n      $checkboxTooltip[0].checked = true;\n    }\n  }\n\n  setValueToCheckboxScaleOfValuesFromModelState(state: IModelState): void {\n    const configurationPanel: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n\n    const $checkboxScaleOfValues: HTMLInputElement[] = Array.from(\n      $(configurationPanel[this.sliderIndex]).find(\n        '.js-checkbox-button__scale-of-values',\n      ),\n    ) as HTMLInputElement[];\n\n    if (!state.isScaleOfValues) {\n      $checkboxScaleOfValues[0].checked = false;\n    }\n    if (state.isScaleOfValues) {\n      $checkboxScaleOfValues[0].checked = true;\n    }\n  }\n\n  getCountInputs(): HTMLElement[] {\n    const configurationPanel: HTMLDivElement[] = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n\n    const $countInputs: HTMLElement[] = Array.from(\n      $(configurationPanel[this.sliderIndex]).find(\n        '.js-configuration__thumbs-value',\n      ),\n    );\n    return $countInputs;\n  }\n\n  findElements(): void {\n    const configurationPanels = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n\n    this.elements.panel = configurationPanels[this.sliderIndex] as HTMLElement;\n\n    const $minMaxContainer = $('.js-field__min-max');\n    const $minMaxValues: HTMLInputElement[] = Array.from(\n      $($minMaxContainer[this.sliderIndex]).find('.js-input__value'),\n    ) as HTMLInputElement[];\n\n    [this.elements.minValue, this.elements.maxValue] = $minMaxValues;\n\n    const $countThumbsContainer = $('.js-configuration__field-count-thumb');\n    this.elements.countSliderThumbs = Array.from(\n      $($countThumbsContainer[this.sliderIndex]).find('.js-input__value'),\n    ) as HTMLInputElement[];\n\n    const $thumbsValuesContainer = $('.js-field__thumbs-values');\n\n    this.elements.inputsSliderThumbs = Array.from(\n      $($thumbsValuesContainer[this.sliderIndex]).find(\n        '.js-configuration__thumbs-value',\n      ),\n    ) as HTMLInputElement[];\n\n    const $stepSizeContainer = $('.js-configuration__field-step-size');\n    this.elements.stepSize = Array.from(\n      $($stepSizeContainer[this.sliderIndex]).find('.js-input__value'),\n    ) as HTMLInputElement[];\n\n    this.elements.orientationSlider = Array.from(\n      $(this.elements.panel).find('.js-radio-button'),\n    );\n\n    this.elements.checkboxContainer = Array.from(\n      $(this.elements.panel).find('.js-checkbox-button'),\n    ) as HTMLInputElement[];\n    this.elements.checkboxInputTooltip = Array.from(\n      $(this.elements.panel).find('.js-checkbox-button__tooltip'),\n    ) as HTMLInputElement[];\n    this.elements.checkboxInputScaleOfValues = Array.from(\n      $(this.elements.panel).find('.js-checkbox-button__scale-of-values'),\n    ) as HTMLInputElement[];\n\n    this.elements.forms = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    ) as HTMLElement[];\n  }\n\n  setValueOfInputsSliderThumbs(): void {\n    const $thumbsValuesContainer = document.querySelectorAll(\n      '.js-field__thumbs-values',\n    );\n    this.elements.inputsSliderThumbs = Array.from(\n      $($thumbsValuesContainer[this.sliderIndex]).find(\n        '.js-configuration__thumbs-value',\n      ),\n    ) as HTMLInputElement[];\n\n    if (this.elements.inputsSliderThumbs !== null) {\n      new Array(this.elements.inputsSliderThumbs.length)\n        .fill(1)\n        .forEach((_element: number, i: number) => {\n          if (this.elements.inputsSliderThumbs !== null) {\n            const thumbsValue = Number(\n              this.elements.inputsSliderThumbs[i].value,\n            );\n            this.slider.setNewValueThumbsValues(thumbsValue, i);\n          }\n        });\n    }\n  }\n\n  listenMinValue(): void {\n    if (this.elements.minValue !== null) {\n      this.elements.minValue.addEventListener(\n        'blur',\n        this.handleMinValueBlur.bind(this),\n      );\n    }\n  }\n\n  listenMaxValue(): void {\n    if (this.elements.maxValue !== null) {\n      this.elements.maxValue.addEventListener(\n        'blur',\n        this.handleMaxValueBlur.bind(this),\n      );\n    }\n  }\n\n  listenThumbsCount(): void {\n    if (this.elements.countSliderThumbs !== null) {\n      this.elements.countSliderThumbs[0].addEventListener(\n        'blur',\n        this.handleCountSliderThumbsBlur.bind(this),\n      );\n    }\n  }\n\n  listenStepSize(): void {\n    if (this.elements.stepSize !== null) {\n      this.elements.stepSize[0].addEventListener(\n        'blur',\n        this.handleStepSizeBlur.bind(this),\n      );\n    }\n  }\n\n  listenInputsSliderThumbs(): void {\n    if (this.elements.inputsSliderThumbs !== null) {\n      new Array(this.elements.inputsSliderThumbs.length)\n        .fill(1)\n        .forEach((_element: number, i: number) => {\n          if (this.elements.inputsSliderThumbs !== null) {\n            this.elements.inputsSliderThumbs[i].addEventListener(\n              'blur',\n              this.handleInputsSliderThumbsBlur.bind(this, i),\n            );\n          }\n        });\n    }\n  }\n\n  handleInputsSliderThumbsBlur(index: number): void {\n    if (this.elements.inputsSliderThumbs !== null) {\n      const thumbsValue = Number(this.elements.inputsSliderThumbs[index].value);\n      this.slider.setNewValueThumbsValues(thumbsValue, index);\n    }\n  }\n\n  listenOrientationSlider(): void {\n    if (this.elements.orientationSlider !== null) {\n      new Array(this.elements.orientationSlider.length)\n        .fill(1)\n        .forEach((_element: number, i: number) => {\n          const handleOrientationSliderClick = () => {\n            let orientation = '';\n            if (i === 0) {\n              orientation = 'horizontal';\n            }\n            if (i === 1) {\n              orientation = 'vertical';\n            }\n            this.slider.setNewValueOrientation(orientation);\n          };\n          if (this.elements.orientationSlider !== null) {\n            this.elements.orientationSlider[i].addEventListener(\n              'click',\n              handleOrientationSliderClick.bind(this),\n            );\n          }\n        });\n    }\n  }\n\n  listenCheckboxContainer(): void {\n    if (this.elements.checkboxContainer !== null) {\n      this.elements.checkboxContainer[0].addEventListener(\n        'click',\n        this.handleCheckboxTooltipClick.bind(this),\n      );\n      this.elements.checkboxContainer[1].addEventListener(\n        'click',\n        this.handleCheckboxScaleOfValuesClick.bind(this),\n      );\n    }\n  }\n\n  listenForm(): void {\n    if (this.elements.forms !== null) {\n      this.elements.forms.forEach((elementForm: HTMLElement) => {\n        elementForm.addEventListener(\n          'submit',\n          this.handleElementFormSubmit.bind(this),\n        );\n      });\n    }\n  }\n\n  handleMinValueBlur(): void {\n    if (this.elements.minValue !== null) {\n      const min = Number(this.elements.minValue.value);\n      this.slider.setNewValueMin(min);\n    }\n  }\n\n  handleMaxValueBlur(): void {\n    if (this.elements.maxValue !== null) {\n      const max = Number(this.elements.maxValue.value);\n      this.slider.setNewValueMax(max);\n    }\n  }\n\n  handleCountSliderThumbsBlur(): void {\n    if (this.elements.countSliderThumbs !== null) {\n      const count = Number(this.elements.countSliderThumbs[0].value);\n      this.slider.setNewValueCount(count);\n    }\n  }\n\n  handleStepSizeBlur(): void {\n    if (this.elements.stepSize !== null) {\n      const step = Number(this.elements.stepSize[0].value);\n      this.slider.setNewValueStep(step);\n    }\n  }\n\n  handleCheckboxTooltipClick(): void {\n    if (this.elements.checkboxInputTooltip !== null) {\n      let isChecked = true;\n      if (this.elements.checkboxInputTooltip[0].checked) {\n        isChecked = true;\n      }\n      if (!this.elements.checkboxInputTooltip[0].checked) {\n        isChecked = false;\n      }\n      this.slider.setNewValueTooltip(isChecked);\n    }\n  }\n\n  handleCheckboxScaleOfValuesClick(): void {\n    if (this.elements.checkboxInputScaleOfValues !== null) {\n      let isChecked = true;\n      if (this.elements.checkboxInputScaleOfValues[0].checked) {\n        isChecked = true;\n      }\n      if (!this.elements.checkboxInputScaleOfValues[0].checked) {\n        isChecked = false;\n      }\n      this.slider.setNewValueScaleOfValues(isChecked);\n    }\n  }\n\n  handleElementFormSubmit: (event: Event) => void = (event): void => {\n    const currentEvent: Event = event;\n    currentEvent.preventDefault();\n\n    if (this.elements.minValue !== null) {\n      const min = Number(this.elements.minValue.value);\n      this.slider.setNewValueMin(min);\n    }\n\n    if (this.elements.maxValue !== null) {\n      const max = Number(this.elements.maxValue.value);\n      this.slider.setNewValueMax(max);\n    }\n\n    if (this.elements.countSliderThumbs !== null) {\n      const count = Number(this.elements.countSliderThumbs[0].value);\n      this.slider.setNewValueCount(count);\n    }\n\n    this.setValueOfInputsSliderThumbs();\n\n    if (this.elements.stepSize !== null) {\n      const step = Number(this.elements.stepSize[0].value);\n      this.slider.setNewValueStep(step);\n    }\n  };\n}\nexport default ConfigurationPanel;\n"]}