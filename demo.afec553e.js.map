{"version":3,"sources":["pages/demo/demo.ts"],"names":[],"mappings":"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","file":"demo.afec553e.js","sourceRoot":"../src","sourcesContent":["import { IModelState } from '../../slider/interfaces/iModelState';\nimport { IHTMLElement } from '../../slider/interfaces/iHTMLElement';\n\n$(() => {\n  $('.js-slider-test').slider();\n\n  const elements: IHTMLElement[] = Array.from($('.js-slider-test'));\n\n  elements.forEach((element: IHTMLElement, index: number) => {\n    let isCreatedInput = false;\n\n    const createElement = (teg: string, className: string) => {\n      const htmlElement: IHTMLElement = document.createElement(\n        teg,\n      ) as IHTMLElement;\n      htmlElement.className = className;\n      return htmlElement;\n    };\n\n    const createInput = (state: IModelState) => {\n      const thumbsCurrentValuesList: IHTMLElement[] = Array.from(\n        document.querySelectorAll(\n          '.js-configuration__thumbs-current-value-list',\n        ),\n      );\n\n      const fragmentCurrentValueList = document.createDocumentFragment();\n\n      new Array(state.thumbsCount)\n        .fill(1)\n        .forEach((_element: number, i: number) => {\n          const currentValueItem: HTMLElement = createElement(\n            'li',\n            'configuration__thumbs-item js-configuration__thumbs-item',\n          );\n          const currentValueInput: HTMLElement = createElement(\n            'input',\n            'configuration__thumbs-value js-configuration__thumbs-value',\n          );\n          currentValueInput.setAttribute('type', 'number');\n          currentValueInput.setAttribute(\n            'value',\n            String(state.thumbsValues[i]),\n          );\n\n          currentValueItem.append(currentValueInput);\n          fragmentCurrentValueList.append(currentValueItem);\n        });\n      thumbsCurrentValuesList[index].append(fragmentCurrentValueList);\n      if (!isCreatedInput) {\n        isCreatedInput = true;\n      }\n    };\n    const setNewValueToNewInputs = (state: IModelState) => {\n      const thumbsCurrentValuesList: IHTMLElement[] = Array.from(\n        document.querySelectorAll(\n          '.js-configuration__thumbs-current-value-list',\n        ),\n      );\n\n      const $allThumbs: HTMLInputElement[] = Array.from(\n        $(thumbsCurrentValuesList[index]).find(\n          '.js-configuration__thumbs-value',\n        ),\n      ) as HTMLInputElement[];\n      const indexNewInput: number = $allThumbs.length - 1;\n      $allThumbs[indexNewInput].value = String(\n        state.thumbsValues[indexNewInput],\n      );\n    };\n    const changeCountInputs = (state: IModelState) => {\n      const thumbsCurrentValuesList: IHTMLElement[] = Array.from(\n        document.querySelectorAll(\n          '.js-configuration__thumbs-current-value-list',\n        ),\n      );\n      const $countInputs: HTMLElement[] = Array.from(\n        $(thumbsCurrentValuesList[index]).find(\n          '.js-configuration__thumbs-item',\n        ),\n      );\n\n      if ($countInputs.length < state.thumbsCount) {\n        const missingCount: number = state.thumbsCount - $countInputs.length;\n\n        const fragmentCurrentValueList = document.createDocumentFragment();\n        new Array(missingCount)\n          .fill(1)\n          .forEach((_element: number, i: number) => {\n            const $currentCountInputs: HTMLElement[] = Array.from(\n              $(thumbsCurrentValuesList[index]).find(\n                '.js-configuration__thumbs-item',\n              ),\n            );\n            const currentValueItem: HTMLElement = createElement(\n              'li',\n              'configuration__thumbs-item js-configuration__thumbs-item',\n            );\n            const currentValueInput: HTMLElement = createElement(\n              'input',\n              'configuration__thumbs-value js-configuration__thumbs-value',\n            );\n            currentValueInput.setAttribute('type', 'number');\n            currentValueInput.setAttribute(\n              'value',\n              String(state.thumbsValues[i]),\n            );\n\n            currentValueItem.append(currentValueInput);\n            fragmentCurrentValueList.append(currentValueItem);\n\n            setNewValueToNewInputs(state);\n          });\n        thumbsCurrentValuesList[index].append(fragmentCurrentValueList);\n      }\n      if ($countInputs.length > state.thumbsCount) {\n        const excessCount: number = $countInputs.length - state.thumbsCount;\n\n        const $allCurrentValuesInputs: HTMLElement[] = Array.from(\n          $(thumbsCurrentValuesList[index]).find(\n            '.js-configuration__thumbs-item',\n          ),\n        );\n        new Array(excessCount).fill(1).forEach(() => {\n          $allCurrentValuesInputs[$allCurrentValuesInputs.length - 1].remove();\n          $allCurrentValuesInputs.splice(-1, 1);\n        });\n      }\n    };\n    const setValueToInputFromModelState = (state: IModelState) => {\n      const thumbsCurrentValuesList: IHTMLElement[] = Array.from(\n        document.querySelectorAll(\n          '.js-configuration__thumbs-current-value-list',\n        ),\n      );\n\n      const $allThumbs: HTMLInputElement[] = Array.from(\n        $(thumbsCurrentValuesList[index]).find(\n          '.js-configuration__thumbs-value',\n        ),\n      ) as HTMLInputElement[];\n\n      new Array(state.thumbsValues.length)\n        .fill(1)\n        .forEach((_element: number, i: number) => {\n          $allThumbs[i].value = String(state.thumbsValues[i]);\n        });\n    };\n    const setValueToStepFromModelState = (state: IModelState) => {\n      const configurationPanel: IHTMLElement[] = Array.from(\n        document.querySelectorAll('.js-configuration'),\n      );\n\n      const $stepSizes: HTMLInputElement[] = Array.from(\n        $(configurationPanel[index]).find('.js-input-step-size__value'),\n      ) as HTMLInputElement[];\n      const stepSize = $stepSizes[0];\n      stepSize.value = String(state.step);\n    };\n    const setValueToMinInputFromModelState = (state: IModelState) => {\n      const configurationPanel: IHTMLElement[] = Array.from(\n        document.querySelectorAll('.js-configuration'),\n      );\n\n      const $minMaxInputs: HTMLInputElement[] = Array.from(\n        $(configurationPanel[index]).find('.js-input-min-max__value'),\n      ) as HTMLInputElement[];\n      const minInput: HTMLInputElement = $minMaxInputs[0];\n      minInput.value = String(state.min);\n    };\n    const setValueMaxInputFromModelState = (state: IModelState) => {\n      const configurationPanel: IHTMLElement[] = Array.from(\n        document.querySelectorAll('.js-configuration'),\n      );\n\n      const $minMaxInputs: HTMLInputElement[] = Array.from(\n        $(configurationPanel[index]).find('.js-input-min-max__value'),\n      ) as HTMLInputElement[];\n      const maxInput: HTMLInputElement = $minMaxInputs[1];\n      maxInput.value = String(state.max);\n    };\n\n    const modelState: IModelState = element.getState();\n    createInput(modelState);\n    setValueToStepFromModelState(modelState);\n    setValueToMinInputFromModelState(modelState);\n    setValueMaxInputFromModelState(modelState);\n\n    const getCountInputs = () => {\n      const configurationPanel: HTMLDivElement[] = Array.from(\n        document.querySelectorAll('.js-configuration'),\n      );\n\n      const $countInputs: HTMLElement[] = Array.from(\n        $(configurationPanel[index]).find('.js-configuration__thumbs-value'),\n      );\n      return $countInputs;\n    };\n\n    element.subscribeToStateModel(\n      createInput,\n      isCreatedInput,\n      getCountInputs,\n      changeCountInputs,\n      setValueToInputFromModelState,\n      setValueToStepFromModelState,\n      setValueToMinInputFromModelState,\n      setValueMaxInputFromModelState,\n    );\n\n    const configurationPanel: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n\n    // get from the input field and transfer the new user-entered min\n    // and max values of the slider from the configuration panel\n    const $minMaxValues: HTMLInputElement[] = Array.from(\n      $(configurationPanel[index]).find('.js-input-min-max__value'),\n    ) as HTMLInputElement[];\n    const minValue: HTMLInputElement = $minMaxValues[0];\n    const maxValue: HTMLInputElement = $minMaxValues[1];\n\n    const handleMinValueBlur = () => {\n      const min = Number(minValue.value);\n      element.setNewValueMin(min);\n    };\n    const handleMaxValueBlur = () => {\n      const max = Number(maxValue.value);\n      element.setNewValueMax(max);\n    };\n    minValue.addEventListener('blur', handleMinValueBlur);\n    maxValue.addEventListener('blur', handleMaxValueBlur);\n\n    // get from the input field and pass the new value of the number\n    // of sliders entered by the user from the configuration panel\n    const $countSliderThumbs: HTMLInputElement[] = Array.from(\n      $(configurationPanel[index]).find('.js-input-count-thumb__value'),\n    ) as HTMLInputElement[];\n\n    const handleCountSliderThumbsBlur = () => {\n      const count = Number($countSliderThumbs[0].value);\n      element.setNewValueCount(count);\n    };\n    $countSliderThumbs[0].addEventListener('blur', handleCountSliderThumbsBlur);\n    // get from the input field and pass the new values of the current\n    // states of the thumbs entered by the user from the configuration panel\n    const toFindInputsSliderThumbs = (): HTMLInputElement[] => {\n      const $element: HTMLInputElement[] = Array.from(\n        $(configurationPanel[index]).find('.js-configuration__thumbs-value'),\n      ) as HTMLInputElement[];\n      return $element;\n    };\n    const inputsSliderThumbs: HTMLInputElement[] = toFindInputsSliderThumbs();\n\n    new Array(inputsSliderThumbs.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        const handleInputsSliderThumbsBlur = () => {\n          const thumbsValue = Number(inputsSliderThumbs[i].value);\n          element.setNewValueThumbsValues(thumbsValue, i);\n        };\n        inputsSliderThumbs[i].addEventListener(\n          'blur',\n          handleInputsSliderThumbsBlur,\n        );\n      });\n\n    // get from the input field and pass the new value of the step size\n    // entered by the user from the configuration panel\n    const $stepSize: HTMLInputElement[] = Array.from(\n      $(configurationPanel[index]).find('.js-input-step-size__value'),\n    ) as HTMLInputElement[];\n\n    const handleStepSizeBlur = () => {\n      const step = Number($stepSize[0].value);\n      element.setNewValueStep(step);\n    };\n    $stepSize[0].addEventListener('blur', handleStepSizeBlur);\n\n    // get from input field and pass new slider orientation value\n    const $orientationSlider: HTMLElement[] = Array.from(\n      $(configurationPanel[index]).find('.js-radio-button'),\n    );\n\n    new Array($orientationSlider.length)\n      .fill(1)\n      .forEach((_element: number, i: number) => {\n        const handleOrientationSliderClick = () => {\n          let orientation = '';\n          if (i === 0) {\n            orientation = 'horizontal';\n          }\n          if (i === 1) {\n            orientation = 'vertical';\n          }\n          element.setNewValueOrientation(orientation);\n        };\n        $orientationSlider[i].addEventListener(\n          'click',\n          handleOrientationSliderClick,\n        );\n      });\n\n    // get from the input field and pass the new value of the tooltip presence\n    const $checkboxContainer: HTMLInputElement[] = Array.from(\n      $(configurationPanel[index]).find('.js-checkbox-button'),\n    ) as HTMLInputElement[];\n    const $checkboxInputTooltip: HTMLInputElement[] = Array.from(\n      $(configurationPanel[index]).find('.js-checkbox-button__tooltip'),\n    ) as HTMLInputElement[];\n    const $checkboxInputScaleOfValues: HTMLInputElement[] = Array.from(\n      $(configurationPanel[index]).find('.js-checkbox-button__scale-of-values'),\n    ) as HTMLInputElement[];\n\n    const handleCheckboxTooltipClick = () => {\n      let isChecked = true;\n      if ($checkboxInputTooltip[0].checked) {\n        isChecked = true;\n      }\n      if (!$checkboxInputTooltip[0].checked) {\n        isChecked = false;\n      }\n      element.setNewValueTooltip(isChecked);\n    };\n    const handleCheckboxScaleOfValuesClick = () => {\n      let isChecked = true;\n      if ($checkboxInputScaleOfValues[0].checked) {\n        isChecked = true;\n      }\n      if (!$checkboxInputScaleOfValues[0].checked) {\n        isChecked = false;\n      }\n      element.setNewValueScaleOfValues(isChecked);\n    };\n    $checkboxContainer[0].addEventListener('click', handleCheckboxTooltipClick);\n    $checkboxContainer[1].addEventListener(\n      'click',\n      handleCheckboxScaleOfValuesClick,\n    );\n\n    const setValueOfInputsSliderThumbs = () => {\n      const currentInputsSliderThumbs: HTMLInputElement[] = toFindInputsSliderThumbs();\n      new Array(currentInputsSliderThumbs.length)\n        .fill(1)\n        .forEach((_element: number, i: number) => {\n          const thumbsValue = Number(currentInputsSliderThumbs[i].value);\n          element.setNewValueThumbsValues(thumbsValue, i);\n        });\n    };\n\n    const form: IHTMLElement[] = Array.from(\n      document.querySelectorAll('.js-configuration'),\n    );\n    const handleElementFormSubmit: (event: Event) => void = (event): void => {\n      const currentEvent: Event = event;\n      currentEvent.preventDefault();\n\n      const min = Number(minValue.value);\n      element.setNewValueMin(min);\n\n      const max = Number(maxValue.value);\n      element.setNewValueMax(max);\n\n      const count = Number($countSliderThumbs[0].value);\n      element.setNewValueCount(count);\n\n      setValueOfInputsSliderThumbs();\n\n      const step = Number($stepSize[0].value);\n      element.setNewValueStep(step);\n    };\n    form.forEach((elementForm: HTMLElement) => {\n      elementForm.addEventListener('submit', handleElementFormSubmit);\n    });\n  });\n});\n"]}